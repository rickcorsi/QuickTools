@page "/"
@using System.Drawing;
@using System.Timers;
@using System.Threading.Tasks;
@using MudBlazor.Utilities;
@using System.Linq;
@using System.Text.RegularExpressions;
@using System.Collections.Generic;

@inject IDialogService DialogService

<style>
    :root {
        --mud-palette-primary: #111A28;
        background-color: @backcolor;
    }
</style>
<PageTitle>Index</PageTitle>
<div>
    <MudAppBar Color="MudBlazor.Color.Primary" Class="MudAppBar">
        <MudButton OnClick="tab1" Class="MudButton">
            <MudText Style="font-size: 18px;" Class="Text">Home</MudText>
        </MudButton>
        <MudButton OnClick="tab2" Class="MudButton">
            <MudText Style="font-size: 18px;" Class="Text">Utilities</MudText>
        </MudButton>
        <MudButton OnClick="tab3" Class="MudButton">
            <MudText Style="font-size: 18px;" Class="Text">Converters</MudText>
        </MudButton>        
    </MudAppBar>
    @if (home == true)
    {
        <MudAppBar Color="MudBlazor.Color.Primary" Style="margin-top: 32px;" Class="MudAppBar"><MudButton Style="font-size: 16px;" OnClick="OpenDialog" Class="" ><MudText Style="" Class="Text">Select Widgets</MudText></MudButton></MudAppBar>
    }
    @if (Utilities == true)
    {
        <MudAppBar Color="MudBlazor.Color.Primary" Style="margin-top: 32px;" Class="MudAppBar">
            <MudButton OnClick="Tab_Calculator" Class="MudButton">
                <MudText Style="font-size: 16px;" Class="Text">Calculator</MudText>
            </MudButton>       
            <MudButton OnClick="Tab_Stopwatch" Class="MudButton">
                <MudText Style="font-size: 16px;" Class="Text">Stopwatch</MudText>
            </MudButton>    
            <MudButton OnClick="Tab_ColorPicker" Class="MudButton">
                <MudText Style="font-size: 16px;" Class="Text">Color Picker</MudText>
            </MudButton>  
            <MudButton OnClick="Tab_Notes" Class="MudButton">
                <MudText Style="font-size: 16px;" Class="Text">Notes</MudText>
            </MudButton>  
        </MudAppBar>
    }
    @if (Converters == true)
    {
        <MudAppBar Color="MudBlazor.Color.Primary" Style="margin-top: 32px;" Class="MudAppBar">
            <MudButton OnClick="Tab_TemperatureConverter" Class="MudButton">
                <MudText Style="font-size: 16px;" Class="Text">Temperature Converter</MudText>
            </MudButton>
            <MudButton OnClick="Tab_DollarsCentsConverter" Class="MudButton">
                <MudText Style="font-size: 16px;" Class="Text">Dollars to Cents Converter</MudText>
            </MudButton>  
            <MudButton OnClick="Tab_LengthConverter" Class="MudButton">
                <MudText Style="font-size: 16px;" Class="Text">Length Converter</MudText>
            </MudButton>  
            <MudButton OnClick="Tab_MassConverter" Class="MudButton">
                <MudText Style="font-size: 16px;" Class="Text">Mass Converter</MudText>
            </MudButton>  
        </MudAppBar>
    }
</div>
<div class="backScreen" style="background-color: @backcolor">
    @if (home == true) {
    }
    <div class="@className">
    @if (Utilities == true || home == true)
    {
            @if (App_Calculator == true)
            {
                <div class="MudPaperSmallWidget">
                    <div style="display: flex;">
                    <MudText Style="margin: 5%;">Calculator</MudText>
                    @if (home == true) {
                    <MudIconButton OnClick='() => App_Calculator = false' Style="margin-left: 245px; width: 40px; height: 40px;" Icon="@Icons.Material.Filled.Close"></MudIconButton>
                    }    
                    </div>
                    <div style="display: flex;">
                    <MudTextField @bind-Value="App_Calculator_Display" ReadOnly="true" Variant="Variant.Outlined" Style="margin-left: 2%; margin-right: 2%; margin-bottom: 3%;" ></MudTextField>
                    </div>
                    <div style="margin-left: 15px; max-width: 390px;">
                        <MudButton OnClick="App_Calculator_Clear" Style="min-width: 90px; min-height: 50px;" Class="MudButtonCalculator"><MudText Style="font-size: 20px; color: black;" Class="Text">C</MudText></MudButton>
                        <MudButton Style="min-width: 90px; min-height: 50px;" Class="MudButtonCalculator"><MudText Style="font-size: 20px; color: black;" Class="Text">x²</MudText></MudButton>
                        <MudButton OnClick="Calc_Button_Backspace" Style="min-width: 90px; min-height: 50px;" Class="MudButtonCalculator"><MudText Style="font-size: 20px; color: black;" Class="Text">←</MudText></MudButton>
                        <MudButton OnClick="Division" Style="min-width: 90px; min-height: 50px;" Class="MudButtonCalculator"><MudText Style="font-size: 20px; color: black;" Class="Text">÷</MudText></MudButton>
                        <MudButton OnClick='() => Calc_Button_Number("7")' Style="min-width: 90px; min-height: 50px;" Class="MudButtonCalculator"><MudText Style="font-size: 20px; color: black;" Class="Text">7</MudText></MudButton>
                        <MudButton OnClick='() => Calc_Button_Number("8")' Style="min-width: 90px; min-height: 50px;" Class="MudButtonCalculator"><MudText Style="font-size: 20px; color: black;" Class="Text">8</MudText></MudButton>
                        <MudButton OnClick='() => Calc_Button_Number("9")' Style="min-width: 90px; min-height: 50px;" Class="MudButtonCalculator"><MudText Style="font-size: 20px; color: black;" Class="Text">9</MudText></MudButton>
                        <MudButton OnClick="Multiplication" Style="min-width: 90px; min-height: 50px;" Class="MudButtonCalculator"><MudText Style="font-size: 20px; color: black;" Class="Text">x</MudText></MudButton>
                        <MudButton OnClick='() => Calc_Button_Number("4")' Style="min-width: 90px; min-height: 50px;" Class="MudButtonCalculator"><MudText Style="font-size: 20px; color: black;" Class="Text">4</MudText></MudButton>
                        <MudButton OnClick='() => Calc_Button_Number("5")' Style="min-width: 90px; min-height: 50px;" Class="MudButtonCalculator"><MudText Style="font-size: 20px; color: black;" Class="Text">5</MudText></MudButton>
                        <MudButton OnClick='() => Calc_Button_Number("6")' Style="min-width: 90px; min-height: 50px;" Class="MudButtonCalculator"><MudText Style="font-size: 20px; color: black;" Class="Text">6</MudText></MudButton>
                        <MudButton OnClick="Addition" Style="min-width: 90px; min-height: 50px;" Class="MudButtonCalculator"><MudText Style="font-size: 20px; color: black;" Class="Text">+</MudText></MudButton>
                        <MudButton OnClick='() => Calc_Button_Number("1")' Style="min-width: 90px; min-height: 50px;" Class="MudButtonCalculator"><MudText Style="font-size: 20px; color: black;" Class="Text">1</MudText></MudButton>
                        <MudButton OnClick='() => Calc_Button_Number("2")' Style="min-width: 90px; min-height: 50px;" Class="MudButtonCalculator"><MudText Style="font-size: 20px; color: black;" Class="Text">2</MudText></MudButton>
                        <MudButton OnClick='() => Calc_Button_Number("3")' Style="min-width: 90px; min-height: 50px;" Class="MudButtonCalculator"><MudText Style="font-size: 20px; color: black;" Class="Text">3</MudText></MudButton>
                        <MudButton OnClick="Subtraction" Style="min-width: 90px; min-height: 50px;" Class="MudButtonCalculator"><MudText Style="font-size: 20px; color: black;" Class="Text">-</MudText></MudButton>
                        <MudButton OnClick="App_Calculator_PlusMinus" Style="min-width: 90px; min-height: 50px;" Class="MudButtonCalculator"><MudText Style="font-size: 20px; color: black;" Class="Text">±</MudText></MudButton>
                        <MudButton OnClick='() => Calc_Button_Number("0")' Style="min-width: 90px; min-height: 50px;" Class="MudButtonCalculator"><MudText Style="font-size: 20px; color: black;" Class="Text">0</MudText></MudButton>
                        <MudButton OnClick="App_Calculator_Decimal" Style="min-width: 90px; min-height: 50px;" Class="MudButtonCalculator"><MudText Style="font-size: 20px; color: black;" Class="Text">.</MudText></MudButton>
                        <MudButton OnClick="Equals" Style="min-width: 90px; min-height: 50px;" Class="MudButtonCalculator"><MudText Style="font-size: 20px; color: black;" Class="Text">=</MudText></MudButton>
                    </div>
                    <MudText Class="Text" Style="margin-top: 40px;" >App_Calculator_Value: @App_Calculator_Value</MudText>
                    <MudText Class="Text" >App_Calculator_Value2: @App_Calculator_Value2</MudText>
                    <MudText Class="Text" >App_Calculator_Display: @App_Calculator_Display</MudText>
                    <MudText Class="Text" >App_Calculator_FirstNumber: @App_Calculator_FirstNumber</MudText>
                    <MudText Class="Text" >App_Calculator_SecondNumber: @App_Calculator_SecondNumber</MudText>
                    <MudText Class="Text" >App_Calculator_Mode: @App_Calculator_Mode</MudText>
                    <MudText Class="Text" >negateTemp: @negateTemp</MudText>
                    <MudText Class="Text" >secondNumberLength: @App_Calculator_SecondNumber.Length</MudText>
                    <MudText Class="Text" >buttonValue: @buttonValue</MudText>
                </div>
            }
            @if (App_ColorPicker == true)
            {
                <div class="MudPaperMediumWidget">
                    <div style="display: flex;">
                    <MudText Style="margin-top: 5%; margin-left: 5%; margin-right: 5%;">Color Picker</MudText>
                    @if (home == true) {
                    <MudIconButton OnClick='() => App_ColorPicker = false' Style="margin-left: 365px; width: 40px; height: 40px;" Icon="@Icons.Material.Filled.Close"></MudIconButton>
                    }    
                    </div>   
                    <div style="display: flex; justify-content: center;">
                    <MudColorPicker Value="_pickerColor" ValueChanged="UpdateSelectedColor" Class="ColorPicker" DisableToolbar="true" DisableAlpha="true" DisableColorField="false" DisablePreview="true" DisableSliders="false" DisableInputs="true" DisableModeSwitch="false" ColorPickerMode="ColorPickerMode.RGB" PickerVariant="PickerVariant.Static" />
                    <div>
                    <MudList Clickable="true" SelectedItemChanged="ChangeSelectedColor">
                        <MudListItem OnClick="firstColorTrue">
                            <div class="colorPreview" style="@($"background-color:{firstColor};")"></div>
                        </MudListItem>
                        <MudTextField @bind-Value="firstColorConverted" Style="margin-right: 4%; margin-bottom: 3%" Adornment="Adornment.End" AdornmentIcon="@Icons.Outlined.ChangeCircle" OnAdornmentClick="HEXColorEntered" ReadOnly="false" Variant="Variant.Outlined"/>
                        <MudListItem OnClick="secondColorTrue">
                            <div class="colorPreview" style="@($"background-color:{secondColor};")"></div>
                        </MudListItem>
                        <MudTextField @bind-Value="secondColorConverted" Style="margin-right: 4%;" Adornment="Adornment.End" AdornmentIcon="@Icons.Outlined.ChangeCircle" OnAdornmentClick="HEXColorEntered" ReadOnly="false" Variant="Variant.Outlined"/>
                    </MudList>
                    <MudButton OnClick="SetBackgroundColor" Style="margin-top: 13px;">Set Background</MudButton>
                    </div>
                    </div>
                </div>
            }
            @if (App_Stopwatch == true)
            {
                <div class="MudPaperSmallWidget">
                    <div style="display: flex;">
                    <MudText Style="margin: 5%;">Stopwatch</MudText>
                    @if (home == true) {
                    <MudIconButton OnClick='() => App_Stopwatch = false' Style="margin-left: 241px; width: 40px; height: 40px;" Icon="@Icons.Material.Filled.Close"></MudIconButton>
                    }    
                    </div> 
                    <div style="display: flex; justify-content: center;">
                        <MudText Style="font-size: 36px;">@displaytimer</MudText>
                    </div>
                    <div style="display: flex; justify-content: center;">
                        <MudButton Style="margin: 5%;" Disabled="@isTiming" OnClick="StopwatchTiming">Start</MudButton>
                        <MudButton Style="margin: 5%;" Disabled="@isStopped" OnClick="StopwatchStop">Stop</MudButton>
                    </div>
                    @if (stopwatchStops >= 1)
                    {
                        <div style="display: flex; justify-content: center; margin-top: 5px;">
                            <MudText Style="font-size: 16px;">Recent Times:</MudText>
                        </div>
                        <div style="display: flex; justify-content: center; margin-top: 5px;">
                            <MudText Style="font-size: 14px;">@RecentTime1</MudText>
                        </div>
                        <div style="display: flex; justify-content: center; margin-top: 5px;">
                            <MudText Style="font-size: 14px;">@RecentTime2</MudText>
                        </div>
                        <div style="display: flex; justify-content: center; margin-top: 5px;">
                            <MudText Style="font-size: 14px;">@RecentTime3</MudText>
                        </div>
                    }
                </div>
            }   
            @if (App_Notes == true)
            {
                <div class="MudPaperSmallWidget">
                    <div style="display: flex;">
                        <MudText Style="margin-top: 5%; margin-left: 5%; margin-right: 5%;">Notes</MudText>
                        @if (home == true)
                        {
                            <MudIconButton OnClick='() => App_Notes = false' Style="margin-left: 275px; width: 40px; height: 40px;" Icon="@Icons.Material.Filled.Close"></MudIconButton>
                        }    
                </div>
                <div style="justify-content: start;">
                    <MudTextField Style="margin: 4%;" Label="" DisableUnderLine="false" T="string" Lines="16" />
                </div> 
                </div>
            }
    }
    @if (Converters == true || home == true)
    {
            @if (App_TemperatureConverter == true)
            {
                <div class="MudPaperMediumWidget">
                    <div style="display: flex;">
                    <MudText Style="margin: 5%;">Temperature Converter</MudText>
                    @if (home == true) {
                    <MudIconButton OnClick='() => App_TemperatureConverter = false' Style="margin-left: 288px; width: 40px; height: 40px;" Icon="@Icons.Material.Filled.Close"></MudIconButton>
                    }    
                    </div>                    <div style="display: flex;">
                        <div style="margin-left: 5%;">
                            <MudTextField @bind-Value="App_TemperatureConverter_Value1" ReadOnly="false" Variant="Variant.Outlined" Style="" ></MudTextField>
                            <MudSelect @bind-Value="TempValue1" Margin="Margin.Dense" T="string" Variant="Variant.Outlined">
                                <MudSelectItem Value="@("Fahrenheit")" />
                                <MudSelectItem Value="@("Celsius")" />
                                <MudSelectItem Value="@("Kelvin")" />
                            </MudSelect>    
                        </div>
                        <div style="margin-left: 5%;">
                            <MudTextField @bind-Value="App_TemperatureConverter_Value2" ReadOnly="true" Variant="Variant.Outlined" Style="" ></MudTextField>
                            <MudSelect @bind-Value="TempValue2" Margin="Margin.Dense" T="string" Variant="Variant.Outlined">
                                <MudSelectItem Value="@("Fahrenheit")" />
                                <MudSelectItem Value="@("Celsius")" />
                                <MudSelectItem Value="@("Kelvin")" />
                            </MudSelect>                
                        </div>
                    </div>
                    <div>
                        <MudButton OnClick="ConvertTemp" Style="margin: 5%; margin-top: 155px;" >Convert</MudButton>
                    </div>
                </div>
            }
            @if (App_DollarsCentsConverter == true)
            {
                <div class="MudPaperSmallWidget">
                    <div style="display: flex;">
                    <MudText Style="margin: 5%;">Dollars to Cents Converter</MudText>
                    @if (home == true) {
                    <MudIconButton OnClick='() => App_DollarsCentsConverter = false' Style="margin-left: 132px; width: 40px; height: 40px;" Icon="@Icons.Material.Filled.Close"></MudIconButton>
                    }    
                    </div> 
                    <div style="justify-content: center; padding: 10%;">
                        <MudTextField @bind-Value="DollarAmount" Label="Enter $ Amount" Variant="Variant.Outlined"/>
                        <MudButton Style="margin: 5%;" OnClick="ConvertDollars">Convert</MudButton>
                        <MudTextField ReadOnly="true" T="string" Variant="Variant.Outlined" Text="@OutcomeStatement" Lines="3" />
                    </div> 
                </div>
            }
            @if (App_LengthConverter == true)
            {
                <div class="MudPaperMediumWidget">
                    <div style="display: flex;">
                    <MudText Style="margin: 5%;">Length Converter</MudText>
                    @if (home == true) {
                    <MudIconButton OnClick='() => App_LengthConverter = false' Style="margin-left: 330px; width: 40px; height: 40px;" Icon="@Icons.Material.Filled.Close"></MudIconButton>
                    }    
                    </div>                    <div style="display: flex;">
                        <div style="margin-left: 5%;">
                            <MudTextField @bind-Value="App_LengthConverter_Value1" ReadOnly="false" Variant="Variant.Outlined" Style="" ></MudTextField>
                            <MudSelect @bind-Value="LengthValue1" Margin="Margin.Dense" T="string" Variant="Variant.Outlined">
                                <MudSelectItem Value="@("Foot")" />
                                <MudSelectItem Value="@("Yard")" />
                                <MudSelectItem Value="@("Mile")" />
                                <MudSelectItem Value="@("Inch")" />
                                <MudSelectItem Value="@("Meter")" />
                                <MudSelectItem Value="@("Kilometer")" />
                            </MudSelect>    
                        </div>
                        <div style="margin-left: 5%;">
                            <MudTextField @bind-Value="App_LengthConverter_Value2" ReadOnly="true" Variant="Variant.Outlined" Style="" ></MudTextField>
                            <MudSelect @bind-Value="LengthValue2" Margin="Margin.Dense" T="string" Variant="Variant.Outlined">
                                <MudSelectItem Value="@("Foot")" />
                                <MudSelectItem Value="@("Yard")" />
                                <MudSelectItem Value="@("Mile")" />
                                <MudSelectItem Value="@("Inch")" />
                                <MudSelectItem Value="@("Meter")" />
                                <MudSelectItem Value="@("Kilometer")" />
                            </MudSelect>                
                        </div>
                    </div>
                    <div>
                        <MudButton OnClick="ConvertLength" Style="margin: 5%; margin-top: 155px;" >Convert</MudButton>
                    </div>
                </div>
            }
            @if (App_MassConverter == true)
            {
                <div class="MudPaperMediumWidget">
                    <div style="display: flex;">
                    <MudText Style="margin: 5%;">Mass Converter</MudText>
                    @if (home == true) {
                    <MudIconButton OnClick='() => App_MassConverter = false' Style="margin-left: 340px; width: 40px; height: 40px;" Icon="@Icons.Material.Filled.Close"></MudIconButton>
                    }    
                    </div>                    <div style="display: flex;">
                        <div style="margin-left: 5%;">
                            <MudTextField @bind-Value="App_MassConverter_Value1" ReadOnly="false" Variant="Variant.Outlined" Style="" ></MudTextField>
                            <MudSelect @bind-Value="MassValue1" Margin="Margin.Dense" T="string" Variant="Variant.Outlined">
                                <MudSelectItem Value="@("Pound")" />
                                <MudSelectItem Value="@("Ounce")" />
                                <MudSelectItem Value="@("Kilogram")" />
                                <MudSelectItem Value="@("Gram")" />
                                <MudSelectItem Value="@("US Ton")" />
                                <MudSelectItem Value="@("Metric Ton")" />
                            </MudSelect>    
                        </div>
                        <div style="margin-left: 5%;">
                            <MudTextField @bind-Value="App_MassConverter_Value2" ReadOnly="true" Variant="Variant.Outlined" Style="" ></MudTextField>
                            <MudSelect @bind-Value="MassValue2" Margin="Margin.Dense" T="string" Variant="Variant.Outlined">
                                <MudSelectItem Value="@("Pound")" />
                                <MudSelectItem Value="@("Ounce")" />
                                <MudSelectItem Value="@("Kilogram")" />
                                <MudSelectItem Value="@("Gram")" />
                                <MudSelectItem Value="@("US Ton")" />
                                <MudSelectItem Value="@("Metric Ton")" />
                            </MudSelect>                
                        </div>
                    </div>
                    <div>
                        <MudButton OnClick="ConvertMass" Style="margin: 5%; margin-top: 155px;" >Convert</MudButton>
                    </div>
                </div>
            }
    }
    </div>    
    @if (Advanced == true)
    {
    }
</div>
<MudDialog @bind-IsVisible="visible" Options="dialogOptions">
    <TitleContent>
        Select Widgets
    </TitleContent>
    <DialogContent>
        <MudText>Utilities</MudText>
        <MudCheckBox @bind-Checked="@App_Calculator" Label="Calculator"></MudCheckBox>
        <MudCheckBox @bind-Checked="@App_ColorPicker" Label="Color Picker"></MudCheckBox>
        <MudCheckBox @bind-Checked="@App_Stopwatch" Label="Stopwatch"></MudCheckBox>
        <MudCheckBox @bind-Checked="@App_Notes" Label="Notes"></MudCheckBox>
        <MudText>Converters</MudText>
        <MudCheckBox @bind-Checked="@App_TemperatureConverter" Label="Temperature Converter"></MudCheckBox>
        <MudCheckBox @bind-Checked="@App_DollarsCentsConverter" Label="Dollars to Cents Converter"></MudCheckBox>
        <MudCheckBox @bind-Checked="@App_LengthConverter" Label="Length Converter"></MudCheckBox>
        <MudCheckBox @bind-Checked="@App_MassConverter" Label="Mass Converter"></MudCheckBox>
    </DialogContent>
    <DialogActions>
        @if (App_Calculator == true && App_TemperatureConverter == true && App_ColorPicker == true && App_Stopwatch == true && App_DollarsCentsConverter == true && App_Notes == true && App_LengthConverter == true)
        {
        <MudButton Variant="Variant.Filled" OnClick="AllAppsFalse" Style="width:140px;">Deselect All</MudButton>
        }
        else {
        <MudButton Variant="Variant.Filled" OnClick="App_SelectAll" Style="width:140px;">Select All</MudButton>
        }
        <MudButton Variant="Variant.Filled" OnClick="Submit" Class="px-10">Close</MudButton>
    </DialogActions>
</MudDialog>
@code {
    private bool visible;
    private int rating;
    private void OpenDialog() => visible = true;
    void Submit() => visible = false;
    private DialogOptions dialogOptions = new() { FullWidth = true };

    string className = "MultipleWidgetsDiv";

    //Apps
    //Calculator - WIP
    private bool App_Calculator = false;
    string buttonValue = "0";
    double App_Calculator_Value = 0;
    double App_Calculator_Value2 = 0;
    double negateTemp = 0;
    string App_Calculator_Display = "0";
    string App_Calculator_FirstNumber = "0";
    string App_Calculator_SecondNumber = "0";
    string App_Calculator_Mode = "";
    int secondNumberLength = 0;
    private void Addition()
    {
        if (App_Calculator_Display.Contains('+') || App_Calculator_Display.Contains("- ") || App_Calculator_Display.Contains('*') || App_Calculator_Display.Contains('÷'))
        {
            Equals(); 
        }
        App_Calculator_Mode = "Addition";
        App_Calculator_Value = Double.Parse(App_Calculator_FirstNumber);
        App_Calculator_Display = App_Calculator_Value + " + ";
    }
    private void Subtraction()
    {
        if (App_Calculator_Display.Contains('+') || App_Calculator_Display.Contains("- ") || App_Calculator_Display.Contains('*') || App_Calculator_Display.Contains('÷'))
        {
            Equals(); 
        }
        App_Calculator_Mode = "Subtraction";
        App_Calculator_Value = Double.Parse(App_Calculator_FirstNumber);
        App_Calculator_Display = App_Calculator_Value + " - ";
    }
    private void Multiplication()
    {
        if (App_Calculator_Display.Contains('+') || App_Calculator_Display.Contains("- ") || App_Calculator_Display.Contains('*') || App_Calculator_Display.Contains('÷'))
        {
            Equals(); 
        }
        App_Calculator_Mode = "Multiplication";
        App_Calculator_Value = Double.Parse(App_Calculator_FirstNumber);
        App_Calculator_Display = App_Calculator_Value + " * ";
    }
    private void Division()
    {
        if (App_Calculator_Display.Contains('+') || App_Calculator_Display.Contains("- ") || App_Calculator_Display.Contains('*') || App_Calculator_Display.Contains('÷'))
        {
            Equals(); 
        }
        App_Calculator_Mode = "Division";
        App_Calculator_Value = Double.Parse(App_Calculator_FirstNumber);
        App_Calculator_Display = App_Calculator_Value + " ÷ ";
    }
    private void Equals()
    {

        if (App_Calculator_Mode == "Addition")
        {
            App_Calculator_Value = Double.Parse(App_Calculator_FirstNumber);
            App_Calculator_Value2 = Double.Parse(App_Calculator_SecondNumber);
            App_Calculator_Value = App_Calculator_Value + App_Calculator_Value2;
            App_Calculator_Display = App_Calculator_Value.ToString();
            App_Calculator_FirstNumber = App_Calculator_Value.ToString();
            App_Calculator_SecondNumber = "0";
        }
        if (App_Calculator_Mode == "Subtraction")
        {
            App_Calculator_Value = Double.Parse(App_Calculator_FirstNumber);
            App_Calculator_Value2 = Double.Parse(App_Calculator_SecondNumber);
            App_Calculator_Value = App_Calculator_Value - App_Calculator_Value2;
            App_Calculator_Display = App_Calculator_Value.ToString();
            App_Calculator_FirstNumber = App_Calculator_Value.ToString();
            App_Calculator_SecondNumber = "0";
        }
        if (App_Calculator_Mode == "Multiplication")
        {
            App_Calculator_Value = Double.Parse(App_Calculator_FirstNumber);
            App_Calculator_Value2 = Double.Parse(App_Calculator_SecondNumber);
            App_Calculator_Value = App_Calculator_Value * App_Calculator_Value2;
            App_Calculator_Display = App_Calculator_Value.ToString();
            App_Calculator_FirstNumber = App_Calculator_Value.ToString();
            App_Calculator_SecondNumber = "0";
        }
        if (App_Calculator_Mode == "Division")
        {
            App_Calculator_Value = Double.Parse(App_Calculator_FirstNumber);
            App_Calculator_Value2 = Double.Parse(App_Calculator_SecondNumber);
            App_Calculator_Value = App_Calculator_Value / App_Calculator_Value2;
            App_Calculator_Display = App_Calculator_Value.ToString();
            App_Calculator_FirstNumber = App_Calculator_Value.ToString();
            App_Calculator_SecondNumber = "0";
        }
    }
    private void App_Calculator_Clear()
    {
        App_Calculator_SecondNumber = "0";
        App_Calculator_FirstNumber = "0";   
        App_Calculator_Display = "0";   
        App_Calculator_Mode = "";
        App_Calculator_Value = 0;
        App_Calculator_Value2 = 0;
        negateTemp = 0;
    }
    private void App_Calculator_Decimal()
    {
        if (App_Calculator_Display.Contains('+') || App_Calculator_Display.Contains("- ") || App_Calculator_Display.Contains('*') || App_Calculator_Display.Contains('÷'))
        {
            if (!App_Calculator_SecondNumber.Contains('.'))
            {
                App_Calculator_SecondNumber = App_Calculator_SecondNumber + ".";
                App_Calculator_Display = App_Calculator_Display + ".";
            }
        }
        else 
        {
            if (!App_Calculator_FirstNumber.Contains('.')) {
                App_Calculator_FirstNumber = App_Calculator_FirstNumber + ".";
                App_Calculator_Display = App_Calculator_Display + "."; 
            }
        }
    }
    private void App_Calculator_PlusMinus()
    {
        if (App_Calculator_Display.Contains('+') || App_Calculator_Display.Contains("- ") || App_Calculator_Display.Contains('*') || App_Calculator_Display.Contains('÷'))
        {
            secondNumberLength = App_Calculator_SecondNumber.Length;
            if (App_Calculator_SecondNumber.Contains('-') == false)
            {
                if (App_Calculator_SecondNumber == "0")
                {
                    App_Calculator_Display = App_Calculator_Display + "-";
                    App_Calculator_SecondNumber = "-0";
                }
                else if (App_Calculator_SecondNumber == "0.")
                {
                    App_Calculator_Display = App_Calculator_Display.Remove(App_Calculator_Display.Length - 1);
                    App_Calculator_Display = App_Calculator_Display + "-.";
                    App_Calculator_SecondNumber = "-0.";
                }
                else
                {
                    App_Calculator_Display = App_Calculator_Display.Remove(App_Calculator_Display.Length - secondNumberLength);
                    negateTemp = Double.Parse(App_Calculator_SecondNumber);
                    negateTemp = negateTemp * -1;
                    App_Calculator_SecondNumber = negateTemp.ToString();
                    App_Calculator_Display = App_Calculator_Display + App_Calculator_SecondNumber;
                }
            }
            else if (App_Calculator_SecondNumber.Contains('-') == true)
            {
                if (App_Calculator_SecondNumber == "-0")
                {
                    App_Calculator_Display = App_Calculator_Display.Remove(App_Calculator_Display.Length - 1);
                    App_Calculator_SecondNumber = "0";
                }
                else if (App_Calculator_SecondNumber.Contains("-0.") == true)
                {
                    App_Calculator_SecondNumber = App_Calculator_SecondNumber.Replace("-.", string.Empty);
                    App_Calculator_Display = App_Calculator_Display.Replace(" -.", " .");
                    App_Calculator_SecondNumber = "0.";
                }
                else
                {
                    App_Calculator_Display = App_Calculator_Display.Remove(App_Calculator_Display.Length - secondNumberLength);
                    App_Calculator_SecondNumber = App_Calculator_SecondNumber.Replace("-", string.Empty);
                    negateTemp = Double.Parse(App_Calculator_SecondNumber);
                    if (App_Calculator_SecondNumber == "")
                    {
                        App_Calculator_SecondNumber = "0";
                    }
                    App_Calculator_Display = App_Calculator_Display + App_Calculator_SecondNumber;
                }
            }
        }
        else
        {
            if (App_Calculator_FirstNumber.Contains('-') == false)
            {
                negateTemp = Double.Parse(App_Calculator_FirstNumber);
                negateTemp = negateTemp * -1;
                App_Calculator_FirstNumber = negateTemp.ToString();
                App_Calculator_Display = App_Calculator_FirstNumber;
                if (App_Calculator_Display == "-0")
                {
                    App_Calculator_Display = "-";
                }
            }
            else if (App_Calculator_FirstNumber.Contains('-') == true)
            {
                App_Calculator_FirstNumber = App_Calculator_FirstNumber.Replace("-", string.Empty);
                App_Calculator_Display = App_Calculator_FirstNumber;
                if (App_Calculator_FirstNumber == "")
                {
                    App_Calculator_FirstNumber = "0";
                    App_Calculator_Display = App_Calculator_FirstNumber;
                }
                negateTemp = 0;
            }
        }
    }
    private void Calc_Button_Backspace()
    {
        if (App_Calculator_Display.Contains('+') || App_Calculator_Display.Contains("- ") || App_Calculator_Display.Contains('*') || App_Calculator_Display.Contains('÷'))
        {
            if (App_Calculator_SecondNumber == "0")
            {
                App_Calculator_Display = App_Calculator_Display.Remove(App_Calculator_Display.Length - 2);
                App_Calculator_Mode = "";
            }
            if (App_Calculator_SecondNumber.Length > 1)
            {
                App_Calculator_SecondNumber = App_Calculator_SecondNumber.Remove(App_Calculator_SecondNumber.Length - 1);
                App_Calculator_Display = App_Calculator_Display.Remove(App_Calculator_Display.Length - 1);
                if (App_Calculator_SecondNumber == "")
                {
                    App_Calculator_SecondNumber = "0";
                }
            }
            else {
                App_Calculator_Display = App_Calculator_Display.Remove(App_Calculator_Display.Length - 1);
                App_Calculator_SecondNumber = "0";
            }
        }
        else
        {
            if (App_Calculator_Display.Length > 1 && App_Calculator_FirstNumber.Length > 1)
            {
                App_Calculator_FirstNumber = App_Calculator_FirstNumber.Remove(App_Calculator_FirstNumber.Length - 1);
                App_Calculator_Display = App_Calculator_Display.Remove(App_Calculator_Display.Length - 1);
            }
            else
            {
                App_Calculator_FirstNumber = "0";
                App_Calculator_Display = "0";
            }
        }
        App_Calculator_Value = 0;
        App_Calculator_Value2 = 0;
    }
    private void Calc_Button_Number(string buttonValue)
    {
        if (App_Calculator_Display.Contains('+') || App_Calculator_Display.Contains("- ") || App_Calculator_Display.Contains('*') || App_Calculator_Display.Contains('÷'))
        {
            if (App_Calculator_SecondNumber == "0")
            {
                App_Calculator_SecondNumber = "";
            }
            if (App_Calculator_SecondNumber == "-0")
            {
                App_Calculator_SecondNumber = buttonValue;
                App_Calculator_Display = App_Calculator_Display.Remove(App_Calculator_Display.Length - 1);
                App_Calculator_Display = App_Calculator_Display + App_Calculator_SecondNumber;
            }
            else
            {
                App_Calculator_Value2 = Double.Parse(buttonValue);
                App_Calculator_Display = App_Calculator_Display + App_Calculator_Value2.ToString();
                App_Calculator_SecondNumber = App_Calculator_SecondNumber + App_Calculator_Value2.ToString();
            }
        }
        else
        {
            if (App_Calculator_Display == "0")
            {
                App_Calculator_Value = Double.Parse(buttonValue);
                App_Calculator_Display = App_Calculator_Value.ToString();
                App_Calculator_FirstNumber = App_Calculator_Display;
            }
            else
            {
                App_Calculator_Value = Double.Parse(buttonValue);
                App_Calculator_Display = App_Calculator_Display + App_Calculator_Value.ToString();
                App_Calculator_FirstNumber = App_Calculator_Display;
            }
        }
    }

    //Temperature Converter
    private bool App_TemperatureConverter = false;
    double App_TemperatureConverter_Value1 = 0;
    double App_TemperatureConverter_Value2 = 0;
    private string TempValue1 { get; set; } = "Fahrenheit";
    private string TempValue2 { get; set; } = "Celsius";
    private void ConvertTemp()
    {
        if (TempValue1 == "Fahrenheit" && TempValue2 == "Fahrenheit")
        {
            App_TemperatureConverter_Value2 = App_TemperatureConverter_Value1;
        }
        if (TempValue1 == "Fahrenheit" && TempValue2 == "Celsius")
        {
            App_TemperatureConverter_Value2 = App_TemperatureConverter_Value1;
            App_TemperatureConverter_Value2 = App_TemperatureConverter_Value2 - 32;
            App_TemperatureConverter_Value2 = App_TemperatureConverter_Value2 * 5 / 9;
        }
        if (TempValue1 == "Fahrenheit" && TempValue2 == "Kelvin")
        {
            App_TemperatureConverter_Value2 = App_TemperatureConverter_Value1;
            App_TemperatureConverter_Value2 = App_TemperatureConverter_Value2 - 32;
            App_TemperatureConverter_Value2 = App_TemperatureConverter_Value2 * 5 / 9;
            App_TemperatureConverter_Value2 = App_TemperatureConverter_Value2 + 273.15;
        }
        if (TempValue1 == "Celsius" && TempValue2 == "Fahrenheit")
        {
            App_TemperatureConverter_Value2 = App_TemperatureConverter_Value1;
            App_TemperatureConverter_Value2 = App_TemperatureConverter_Value2 * 9 / 5;
            App_TemperatureConverter_Value2 = App_TemperatureConverter_Value2 + 32;
        }
        if (TempValue1 == "Celsius" && TempValue2 == "Celsius")
        {
            App_TemperatureConverter_Value2 = App_TemperatureConverter_Value1;
        }
        if (TempValue1 == "Celsius" && TempValue2 == "Kelvin")
        {
            App_TemperatureConverter_Value2 = App_TemperatureConverter_Value1;
            App_TemperatureConverter_Value2 = App_TemperatureConverter_Value2 + 273.15;
        }
        if (TempValue1 == "Kelvin" && TempValue2 == "Fahrenheit")
        {
            App_TemperatureConverter_Value2 = App_TemperatureConverter_Value1;
            App_TemperatureConverter_Value2 = App_TemperatureConverter_Value2 - 273.15;
            App_TemperatureConverter_Value2 = App_TemperatureConverter_Value2 * 9 / 5;
            App_TemperatureConverter_Value2 = App_TemperatureConverter_Value2 + 32;
        }
        if (TempValue1 == "Kelvin" && TempValue2 == "Celsius")
        {
            App_TemperatureConverter_Value2 = App_TemperatureConverter_Value1;
            App_TemperatureConverter_Value2 = App_TemperatureConverter_Value2 - 273.15;
        }
        if (TempValue1 == "Kelvin" && TempValue2 == "Kelvin")
        {
            App_TemperatureConverter_Value2 = App_TemperatureConverter_Value1;
        }
    }
    //Dollars to Cents Converter - WIP
    private bool App_DollarsCentsConverter = false;
    double DollarAmount = 0;
    double quarters = 0;
    private string Cents { get; set; } = "";
    private string OutcomeStatement { get; set; } = "";
    private string OutcomeStatementCents { get; set; } = "";
    private string OutcomeStatementCoins { get; set; } = "";
    private void ConvertDollars()
    {
        Cents = String.Format("{0:0.00}", DollarAmount);
        Cents = Cents.Replace("0.0", "");
        Cents = Cents.Replace(".0", "");
        Cents = Cents.Replace(".", "");
        OutcomeStatementCents = "You have " + Cents + " cents.";



        int total = Convert.ToInt32(DollarAmount);
        for (int q = 0; q <= total / 25; q++)
        {
            int total_less_q = total - q * 25;
            for (int d = 0; d <= total_less_q / 10; d++)
            {
                int total_less_q_d = total_less_q - d * 10;
                for (int n = 0; n <= total_less_q_d / 5; n++)
                {
                    int p = total_less_q_d - n * 5;
                    OutcomeStatementCoins = " This is " + q + " Quarters, " + d + " Dimes, " + n + " Nickels, and " + p + "Pennies.";
                }
            }
        }
        OutcomeStatement = OutcomeStatementCents + OutcomeStatementCoins;

    }
    //Stopwatch
    private bool App_Stopwatch = false;
    private bool isTiming = false;
    private bool isStopped = true;
    string displaytimer = "00:00:00";
    int stopwatchStops = 0;
    string RecentTime1 = "";
    string RecentTime2 = "";
    string RecentTime3 = "";
    //displayed time
    TimeSpan TimeFromZero;
    async Task StopwatchTiming() { //Stopwatch task
        displaytimer = "00:00:00";
        isStopped = false;
        TimeFromZero = new TimeSpan(0, 0, 0); //Timespan 
        isTiming = true;
        while (isTiming) { //While stopwatch is running
            await Task.Delay(1000);
            if (isTiming)
            {
                TimeFromZero = TimeFromZero.Add(new TimeSpan(0, 0, 1)); //Add one second while stopwatch is running
                displaytimer = TimeFromZero.ToString();
                StateHasChanged();
            }
        }
    }
    void StopwatchStop()
    {
        if (stopwatchStops >= 2) {
            RecentTime3 = RecentTime2;
        }
        if (stopwatchStops >= 1) {
            RecentTime2 = RecentTime1;
        }
        RecentTime1 = TimeFromZero.ToString();
        isTiming = false;
        isStopped = true;

        stopwatchStops++;
    }
    //Color Picker
    private bool App_ColorPicker = false;
    private bool isFirstColor = true;
    public MudColor backcolor = "#2E333C";
    public MudColor firstColor = "#2275d2";
    public MudColor secondColor = "#ed930c";
    public MudColor _pickerColor = "#2275d2";
    string firstColorConverted = "#2275d2";
    string secondColorConverted = "#ed930c";
    private void ChangeSelectedColor(MudListItem item)
    {
        if (isFirstColor == true)
        {
            _pickerColor = firstColor;
            UpdateSelectedColor(firstColor);
        }
        if (isFirstColor == false)
        {
            isFirstColor = false;
            _pickerColor = secondColor;
            UpdateSelectedColor(secondColor);
        }
    }
    public void UpdateSelectedColor(MudColor value)
    {
        _pickerColor = value;
        if (isFirstColor)
        {
            firstColor = value;
            firstColorConverted = firstColor.ToString(MudColorOutputFormats.Hex);
        }
        else
        {
            secondColor = value;
            secondColorConverted = secondColor.ToString(MudColorOutputFormats.Hex);
        }
    }
    private void firstColorTrue()
    {
        _pickerColor = firstColorConverted;
        isFirstColor = true;
    }
    private void secondColorTrue()
    {
        _pickerColor = secondColorConverted;
        isFirstColor = false;
    }
    private void HEXColorEntered()
    {
        firstColor = firstColorConverted;
        secondColor = secondColorConverted;
        if (isFirstColor == true){
            _pickerColor = firstColorConverted;
        }
        if (isFirstColor == false){
            _pickerColor = secondColorConverted;
        }
    }
    private void SetBackgroundColor()
    {
        backcolor = _pickerColor;
    }
    //Notes
    private bool App_Notes = false;
    //Length Converter
    private bool App_LengthConverter = false;
    double App_LengthConverter_Value1 = 0;
    double App_LengthConverter_Value2 = 0;
    private string LengthValue1 { get; set; } = "Foot";
    private string LengthValue2 { get; set; } = "Yard";
    private void ConvertLength()
    {
        if (LengthValue1 == "Foot" && LengthValue2 == "Foot") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1;
        }
        if (LengthValue1 == "Foot" && LengthValue2 == "Yard") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 * 1/3;
        }
        if (LengthValue1 == "Foot" && LengthValue2 == "Mile") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 / 5280;
        }
        if (LengthValue1 == "Foot" && LengthValue2 == "Inch") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 * 12;
        }
        if (LengthValue1 == "Foot" && LengthValue2 == "Meter") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 / 3.281;
        }
        if (LengthValue1 == "Foot" && LengthValue2 == "Kilometer") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 / 3281;
        }
        if (LengthValue1 == "Yard" && LengthValue2 == "Foot") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 * 3;
        }
        if (LengthValue1 == "Yard" && LengthValue2 == "Yard") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1;
        }
        if (LengthValue1 == "Yard" && LengthValue2 == "Mile") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 / 1760;
        }
        if (LengthValue1 == "Yard" && LengthValue2 == "Inch") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 * 36;
        }
        if (LengthValue1 == "Yard" && LengthValue2 == "Meter") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 / 1.094;
        }
        if (LengthValue1 == "Yard" && LengthValue2 == "Kilometer") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 / 1094;
        }
        if (LengthValue1 == "Mile" && LengthValue2 == "Foot") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 * 5280;
        }
        if (LengthValue1 == "Mile" && LengthValue2 == "Yard") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 * 1760;
        }
        if (LengthValue1 == "Mile" && LengthValue2 == "Mile") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1;
        }
        if (LengthValue1 == "Mile" && LengthValue2 == "Inch") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 * 63360;
        }
        if (LengthValue1 == "Mile" && LengthValue2 == "Meter") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 * 1609;
        }
        if (LengthValue1 == "Mile" && LengthValue2 == "Kilometer") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 * 1.609;
        }
        if (LengthValue1 == "Inch" && LengthValue2 == "Foot") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 / 12;
        }
        if (LengthValue1 == "Inch" && LengthValue2 == "Yard") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 / 36;
        }
        if (LengthValue1 == "Inch" && LengthValue2 == "Mile") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 / 63360;
        }
        if (LengthValue1 == "Inch" && LengthValue2 == "Inch") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1;
        }
        if (LengthValue1 == "Inch" && LengthValue2 == "Meter") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 / 39.37;
        }
        if (LengthValue1 == "Inch" && LengthValue2 == "Kilometer") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 / 39370;
        }
        if (LengthValue1 == "Meter" && LengthValue2 == "Foot") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 * 3.281;
        }
        if (LengthValue1 == "Meter" && LengthValue2 == "Yard") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 * 1.094;
        }
        if (LengthValue1 == "Meter" && LengthValue2 == "Mile") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 / 1609;
        }
        if (LengthValue1 == "Meter" && LengthValue2 == "Inch") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 * 39.37;
        }
        if (LengthValue1 == "Meter" && LengthValue2 == "Meter") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1;
        }
        if (LengthValue1 == "Meter" && LengthValue2 == "Kilometer") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 / 1000;
        }
        if (LengthValue1 == "Kilometer" && LengthValue2 == "Foot") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 * 3281;
        }
        if (LengthValue1 == "Kilometer" && LengthValue2 == "Yard") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 * 1094;
        }
        if (LengthValue1 == "Kilometer" && LengthValue2 == "Mile") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 / 1.609;
        }
        if (LengthValue1 == "Kilometer" && LengthValue2 == "Inch") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 * 39370;
        }
        if (LengthValue1 == "Kilometer" && LengthValue2 == "Meter") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 * 1000;
        }
        if (LengthValue1 == "Kilometer" && LengthValue2 == "Kilometer") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1;
        }
    }
    //Mass Converter
    private bool App_MassConverter = false;
    double App_MassConverter_Value1 = 0;
    double App_MassConverter_Value2 = 0;
    private string MassValue1 { get; set; } = "Pound";
    private string MassValue2 { get; set; } = "Kilogram";
    private void ConvertMass()
    {
        if (MassValue1 == "Pound" && MassValue2 == "Pound") {
            App_MassConverter_Value2 = App_MassConverter_Value1;
        }
        if (MassValue1 == "Pound" && MassValue2 == "Ounce") {
            App_MassConverter_Value2 = App_MassConverter_Value1 * 16;
        }
        if (MassValue1 == "Pound" && MassValue2 == "Kilogram") {
            App_MassConverter_Value2 = App_MassConverter_Value1 / 2.205;
        }
        if (MassValue1 == "Pound" && MassValue2 == "Gram") {
            App_MassConverter_Value2 = App_MassConverter_Value1 * 453.6;
        }
        if (MassValue1 == "Pound" && MassValue2 == "US Ton") {
            App_MassConverter_Value2 = App_MassConverter_Value1 / 2000;
        }
        if (MassValue1 == "Pound" && MassValue2 == "Metric Ton") {
            App_MassConverter_Value2 = App_MassConverter_Value1 / 2205;
        }
        if (MassValue1 == "Ounce" && MassValue2 == "Pound") {
            App_MassConverter_Value2 = App_MassConverter_Value1 / 16;
        }
        if (MassValue1 == "Ounce" && MassValue2 == "Ounce") {
            App_MassConverter_Value2 = App_MassConverter_Value1;
        }
        if (MassValue1 == "Ounce" && MassValue2 == "Kilogram") {
            App_MassConverter_Value2 = App_MassConverter_Value1 / 35.274;
        }
        if (MassValue1 == "Ounce" && MassValue2 == "Gram") {
            App_MassConverter_Value2 = App_MassConverter_Value1 * 28.35;
        }
        if (MassValue1 == "Ounce" && MassValue2 == "US Ton") {
            App_MassConverter_Value2 = App_MassConverter_Value1 / 32000;
        }
        if (MassValue1 == "Ounce" && MassValue2 == "Metric Ton") {
            App_MassConverter_Value2 = App_MassConverter_Value1 / 35270;
        }
        if (MassValue1 == "Kilogram" && MassValue2 == "Pound") {
            App_MassConverter_Value2 = App_MassConverter_Value1 * 2.205;
        }
        if (MassValue1 == "Kilogram" && MassValue2 == "Ounce") {
            App_MassConverter_Value2 = App_MassConverter_Value1 * 35.274;
        }
        if (MassValue1 == "Kilogram" && MassValue2 == "Kilogram") {
            App_MassConverter_Value2 = App_MassConverter_Value1;
        }
        if (MassValue1 == "Kilogram" && MassValue2 == "Gram") {
            App_MassConverter_Value2 = App_MassConverter_Value1 * 1000;
        }
        if (MassValue1 == "Kilogram" && MassValue2 == "US Ton") {
            App_MassConverter_Value2 = App_MassConverter_Value1 / 907.2;
        }
        if (MassValue1 == "Kilogram" && MassValue2 == "Metric Ton") {
            App_MassConverter_Value2 = App_MassConverter_Value1 / 1000;
        }
        if (MassValue1 == "Gram" && MassValue2 == "Pound") {
            App_MassConverter_Value2 = App_MassConverter_Value1 / 453.6;
        }
        if (MassValue1 == "Gram" && MassValue2 == "Ounce") {
            App_MassConverter_Value2 = App_MassConverter_Value1 / 28.35;
        }
        if (MassValue1 == "Gram" && MassValue2 == "Kilogram") {
            App_MassConverter_Value2 = App_MassConverter_Value1 / 63360;
        }
        if (MassValue1 == "Gram" && MassValue2 == "Gram") {
            App_MassConverter_Value2 = App_MassConverter_Value1;
        }
        if (MassValue1 == "Gram" && MassValue2 == "US Ton") {
            App_MassConverter_Value2 = App_MassConverter_Value1 / 907200;
        }
        if (MassValue1 == "Gram" && MassValue2 == "Metric Ton") {
            App_MassConverter_Value2 = App_MassConverter_Value1 / 0.000001;
        }
        if (MassValue1 == "US Ton" && MassValue2 == "Pound") {
            App_MassConverter_Value2 = App_MassConverter_Value1 * 2000;
        }
        if (MassValue1 == "US Ton" && MassValue2 == "Ounce") {
            App_MassConverter_Value2 = App_MassConverter_Value1 * 32000;
        }
        if (MassValue1 == "US Ton" && MassValue2 == "Kilogram") {
            App_MassConverter_Value2 = App_MassConverter_Value1 * 907.2;
        }
        if (MassValue1 == "US Ton" && MassValue2 == "Gram") {
            App_MassConverter_Value2 = App_MassConverter_Value1 * 907200;
        }
        if (MassValue1 == "US Ton" && MassValue2 == "US Ton") {
            App_MassConverter_Value2 = App_MassConverter_Value1;
        }
        if (MassValue1 == "US Ton" && MassValue2 == "Metric Ton") {
            App_MassConverter_Value2 = App_MassConverter_Value1 / 1.102;
        }
        if (MassValue1 == "Metric Ton" && MassValue2 == "Pound") {
            App_MassConverter_Value2 = App_MassConverter_Value1 * 2205;
        }
        if (MassValue1 == "Metric Ton" && MassValue2 == "Ounce") {
            App_MassConverter_Value2 = App_MassConverter_Value1 * 35270;
        }
        if (MassValue1 == "Metric Ton" && MassValue2 == "Kilogram") {
            App_MassConverter_Value2 = App_MassConverter_Value1 * 1000;
        }
        if (MassValue1 == "Metric Ton" && MassValue2 == "Gram") {
            App_MassConverter_Value2 = App_MassConverter_Value1 * 0.000001;
        }
        if (MassValue1 == "Metric Ton" && MassValue2 == "US Ton") {
            App_MassConverter_Value2 = App_MassConverter_Value1 * 1.102;
        }
        if (MassValue1 == "Metric Ton" && MassValue2 == "Metric Ton") {
            App_MassConverter_Value2 = App_MassConverter_Value1;
        }
    }
    //Tab Controls
    private bool home = true;
    private bool Utilities = false;
    private bool Converters = false;
    private bool Advanced = false;
    private void tab1() {
        AllTabsFalse();
        className = "MultipleWidgetsDiv";
        AllAppsFalse();
        home = true;
    }
    private void tab2() {
        AllTabsFalse();
        className = "MainDiv";
        AllAppsFalse();
        Utilities = true;
        App_Calculator = true;
    }
    private void tab3() {
        AllTabsFalse();
        className = "MainDiv";
        AllAppsFalse();
        Converters = true;
        App_TemperatureConverter = true;
    }
    private void tab4() {
        AllTabsFalse();
        Advanced = true;    
    }
    private void Tab_Calculator() {
        AllAppsFalse();
        App_Calculator = true;
    }
    private void Tab_TemperatureConverter() {
        AllAppsFalse();
        App_TemperatureConverter = true;
    }
    private void Tab_DollarsCentsConverter() {
        AllAppsFalse();
        App_DollarsCentsConverter = true;
    }
    private void Tab_Stopwatch() {
        AllAppsFalse();
        App_Stopwatch = true;    
    }
    private void Tab_ColorPicker()
    {
        AllAppsFalse();
        App_ColorPicker = true;
    }
    private void Tab_Notes()
    {
        AllAppsFalse();
        App_Notes = true;
    }
    private void Tab_LengthConverter()
    {
        AllAppsFalse();
        App_LengthConverter = true;
    }
    private void Tab_MassConverter()
    {
        AllAppsFalse();
        App_MassConverter = true;
    }
    private void AllTabsFalse() {
        home = false;
        Utilities = false;
        Converters = false;
        Advanced = false; 
    }
    private void AllAppsFalse()
    {
        App_Calculator = false;
        App_Stopwatch = false;
        App_ColorPicker = false;
        App_Notes = false;
        App_TemperatureConverter = false;
        App_DollarsCentsConverter = false;
        App_LengthConverter = false;
        App_MassConverter = false;
    }
    private void App_SelectAll()
    {
        App_Calculator = true;
        App_TemperatureConverter = true;
        App_DollarsCentsConverter = true;
        App_Stopwatch = true;
        App_ColorPicker = true;
        App_Notes = true;
        App_LengthConverter = true;
        App_MassConverter = true;
    }
}