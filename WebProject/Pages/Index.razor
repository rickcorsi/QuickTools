@page "/"
@using System.Drawing;
@using System.Timers;
@using System.Threading.Tasks;
@using Microsoft.AspNetCore.Mvc.ViewFeatures
@using MudBlazor.Utilities;
@using System.Linq;
@using System.Text.RegularExpressions;
@using System.Collections.Generic;
@using System.ComponentModel;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage BrowserStorage
@inject IDialogService DialogService
<MudThemeProvider @bind-IsDarkMode="@_isDarkMode" Theme="_theme"/>
<style>
        :root {
            --mud-palette-primary-darken: @backcolor;
            --mud-palette-primary-lighten: @accentcolor;
            --mud-palette-secondary-darken: @backcolor;
            --mud-palette-secondary-lighten: @accentcolor;
            --mud-palette-primary: @accentcolor;
            --mud-palette-appbar-background: @appbarcolor;
            --mud-palette-lines-inputs: @widgetTextColor;
            --mud-palette-secondary: @widgetTextColor;
            --mud-palette-action-default: @widgetTextColor;
            --mud-palette-tertiary: @textColor;
            --mud-palette-warning: @textColorInactive;
            --mud-palette-success: @backcolor;
            --mud-palette-success-text: @widgetTextColor;
            --mud-palette-surface: @widgetColor;
            --mud-palette-text-primary: @widgetTextColor;
            --mud-palette-text-secondary: @widgetTextColor;
            --mud-palette-background: @textColor;
            --mud-palette-background-grey: @textColor;
            --mud-palette-primary-text: @textColor;
            --mud-palette-action-disabled-background: @backcolor;
            background-color: @backcolor;
        }
</style>
<PageTitle>QuickTools</PageTitle>
@if (@isTiming == true)
{
    <PageTitle>QuickTools | @displaytimer</PageTitle>
}
@if (@isTiming_Timer == true)
{
    <PageTitle>QuickTools | @displaytimer_Timer</PageTitle>
}
@if (isTiming == true && @isTiming_Timer == true)
{
    <PageTitle>QuickTools | @displaytimer | @displaytimer_Timer</PageTitle>
}
<div>
<div class="NewToolBar">
    <div class="NewToolBarChild1" style="background-color: @appbarcolor">
    <MudButton Disabled="true" OnClick="tab1" Class="AppBarButton" Style="" DisableRipple="true" Variant="Variant.Text">
        <MudText Class="AppBarButtonText" Style="" Color="MudBlazor.Color.Tertiary"> QuickTools </MudText>
    </MudButton> 
    <MudButton OnClick="tab1" Class="AppBarButton" Style="border-radius: 0px;" DisableRipple="true" Variant="Variant.Text">
    @if (home == true) {
        <MudText Class="AppBarButtonText" Style="" Color="MudBlazor.Color.Tertiary"> Home </MudText>
    }
    else {
        <MudText Class="AppBarButtonText" Style="" Color="MudBlazor.Color.Warning"> Home </MudText>
    }
    </MudButton> 
    <MudButton OnClick="tab2" Class="AppBarButton" Style="border-radius: 0px;" DisableRipple="true" Variant="Variant.Text">
    @if (Utilities == true) {
        <MudText Class="AppBarButtonText" Style="" Color="MudBlazor.Color.Tertiary"> Utilities </MudText>
    }
    else {
        <MudText Class="AppBarButtonText" Style="" Color="MudBlazor.Color.Warning"> Utilities </MudText>
    }
    </MudButton> 
    <MudButton OnClick="tab3" Class="AppBarButton" Style="border-radius: 0px;" DisableRipple="true" Variant="Variant.Text">
    @if (Converters == true) {
        <MudText Class="AppBarButtonText" Style="" Color="MudBlazor.Color.Tertiary"> Converters </MudText>
    }
    else {
        <MudText Class="AppBarButtonText" Style="" Color="MudBlazor.Color.Warning"> Converters </MudText>
    }
    </MudButton>
    <div class="selectTheme">
    <MudMenu @bind-Value="selectedTheme" Class="mudMenu" Variant="Variant.Outlined" Style="" Color="MudBlazor.Color.Tertiary" Label="Select Theme" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter" Dense="true">
        <MudMenuItem Style="width: 120px;" OnClick='() => SetTheme("Light")'>
        @if (@theme1 == true) {
        <MudText Style="font-weight: bold;" >Light</MudText>
        }
        else {
        <MudText>Light</MudText>
        }
        </MudMenuItem>
        <MudMenuItem Style="width: 120px;" OnClick='() => SetTheme("Dark")'>
        @if (@theme2 == true) {
        <MudText Style="font-weight: bold;">Dark</MudText>
        }
        else {
        <MudText>Dark</MudText>
        }
        </MudMenuItem>
        <MudMenuItem Style="width: 120px;" OnClick='() => SetTheme("Miami Vice")'>
        @if (@theme3 == true) {
        <MudText Style="font-weight: bold;">Miami Vice</MudText>
        }
        else {
        <MudText>Miami Vice</MudText>
        }
        </MudMenuItem>
        <MudMenuItem Style="width: 120px;" OnClick='() => SetTheme("Cyberpunk")'>
        @if (@theme4 == true) {
        <MudText Style="font-weight: bold;">Cyberpunk</MudText>
        }
        else {
        <MudText>Cyberpunk</MudText>
        }
        </MudMenuItem>
        @if (customThemeCreated == true) {
            <MudMenuItem Style="width: 120px;" OnClick='() => SetTheme("Custom Theme")'>
        @if (@theme5 == true) {
        <MudText Style="font-weight: bold;">Custom</MudText>
        }
        else {
        <MudText>Custom</MudText>
        }
        </MudMenuItem>
        }
    </MudMenu>
    </div>
</div>
<div class="NewToolBarChild2" style="background-color: @appbarcolor">
    @if (home == true) {
    <MudButton OnClick="OpenDialog" Class="AppBarButtonChild" Style="margin: 4px;" DisableRipple="true" Variant="Variant.Outlined" Color="MudBlazor.Color.Tertiary">
        <MudText Class="AppBarButtonChildText" Style="" Color="MudBlazor.Color.Tertiary"> Manage Tools </MudText>
    </MudButton>       
    }
    @if (Utilities == true)
    {
        @if (App_Calculator == true) {
        <MudButton OnClick="Tab_Calculator" Class="AppBarButtonChild" Style="margin: 4px;" DisableRipple="true" Variant="Variant.Outlined" Color="MudBlazor.Color.Primary">
            <MudText Class="AppBarButtonChildText" Style="" Color="MudBlazor.Color.Tertiary"> Calculator </MudText>
        </MudButton> 
        }  
        @if (App_Calculator == false) {
        <MudButton OnClick="Tab_Calculator" Class="AppBarButtonChild" Style="margin: 4px;" DisableRipple="true" Variant="Variant.Outlined" Color="MudBlazor.Color.Tertiary">
            <MudText Class="AppBarButtonChildText" Style="" Color="MudBlazor.Color.Tertiary"> Calculator </MudText>
        </MudButton> 
        }  
        @if (App_Stopwatch == true) {
        <MudButton OnClick="Tab_Stopwatch" Class="AppBarButtonChild" Style="margin: 4px;" DisableRipple="true" Variant="Variant.Outlined" Color="MudBlazor.Color.Primary">
            <MudText Class="AppBarButtonChildText" Style="" Color="MudBlazor.Color.Tertiary"> Stopwatch </MudText>
        </MudButton>   
        }  
        @if (App_Stopwatch == false) {
        <MudButton OnClick="Tab_Stopwatch" Class="AppBarButtonChild" Style="margin: 4px;" DisableRipple="true" Variant="Variant.Outlined" Color="MudBlazor.Color.Tertiary">
            <MudText Class="AppBarButtonChildText" Style="" Color="MudBlazor.Color.Tertiary"> Stopwatch </MudText>
        </MudButton>   
        }  
        @if (App_Timer == true) {
        <MudButton OnClick="Tab_Timer" Class="AppBarButtonChild" Style="margin: 4px;" DisableRipple="true" Variant="Variant.Outlined" Color="MudBlazor.Color.Primary">
            <MudText Class="AppBarButtonChildText" Style="" Color="MudBlazor.Color.Tertiary"> Timer </MudText>
        </MudButton> 
        }  
        @if (App_Timer == false) {
        <MudButton OnClick="Tab_Timer" Class="AppBarButtonChild" Style="margin: 4px;" DisableRipple="true" Variant="Variant.Outlined" Color="MudBlazor.Color.Tertiary">
            <MudText Class="AppBarButtonChildText" Style="" Color="MudBlazor.Color.Tertiary"> Timer </MudText>
        </MudButton> 
        } 
        @if (App_ColorPicker == true) {
        <MudButton OnClick="Tab_ColorPicker" Class="AppBarButtonChild" Style="margin: 4px;" DisableRipple="true" Variant="Variant.Outlined" Color="MudBlazor.Color.Primary">
            <MudText Class="AppBarButtonChildText" Style="" Color="MudBlazor.Color.Tertiary"> Color Picker </MudText>
        </MudButton> 
        }  
        @if (App_ColorPicker == false) {
        <MudButton OnClick="Tab_ColorPicker" Class="AppBarButtonChild" Style="margin: 4px;" DisableRipple="true" Variant="Variant.Outlined" Color="MudBlazor.Color.Tertiary">
            <MudText Class="AppBarButtonChildText" Style="" Color="MudBlazor.Color.Tertiary"> Color Picker </MudText>
        </MudButton> 
        }  
        @if (App_Notes == true) {
        <MudButton OnClick="Tab_Notes" Class="AppBarButtonChild" Style="margin: 4px;" DisableRipple="true" Variant="Variant.Outlined" Color="MudBlazor.Color.Primary">
            <MudText Class="AppBarButtonChildText" Style="" Color="MudBlazor.Color.Tertiary"> Notes </MudText>
        </MudButton>
        }  
        @if (App_Notes == false) {
        <MudButton OnClick="Tab_Notes" Class="AppBarButtonChild" Style="margin: 4px;" DisableRipple="true" Variant="Variant.Outlined" Color="MudBlazor.Color.Tertiary">
            <MudText Class="AppBarButtonChildText" Style="" Color="MudBlazor.Color.Tertiary"> Notes </MudText>
        </MudButton>
        }     
        @if (App_Calendar == true) {
        <MudButton OnClick="Tab_Calendar" Class="AppBarButtonChild" Style="margin: 4px;" DisableRipple="true" Variant="Variant.Outlined" Color="MudBlazor.Color.Primary">
            <MudText Class="AppBarButtonChildText" Style="" Color="MudBlazor.Color.Tertiary"> Calendar </MudText>
        </MudButton>  
        }  
        @if (App_Calendar == false) {
        <MudButton OnClick="Tab_Calendar" Class="AppBarButtonChild" Style="margin: 4px;" DisableRipple="true" Variant="Variant.Outlined" Color="MudBlazor.Color.Tertiary">
            <MudText Class="AppBarButtonChildText" Style="" Color="MudBlazor.Color.Tertiary"> Calendar </MudText>
        </MudButton>  
        }     
        @if (App_GraphBuilder == true) {
        <MudButton OnClick="Tab_GraphBuilder" Class="AppBarButtonChild" Style="margin: 4px;" DisableRipple="true" Variant="Variant.Outlined" Color="MudBlazor.Color.Primary">
            <MudText Class="AppBarButtonChildText" Style="" Color="MudBlazor.Color.Tertiary"> Graph Builder </MudText>
        </MudButton>  
        }  
        @if (App_GraphBuilder == false) {
        <MudButton OnClick="Tab_GraphBuilder" Class="AppBarButtonChild" Style="margin: 4px;" DisableRipple="true" Variant="Variant.Outlined" Color="MudBlazor.Color.Tertiary">
            <MudText Class="AppBarButtonChildText" Style="" Color="MudBlazor.Color.Tertiary"> Graph Builder </MudText>
        </MudButton>  
        }     
    }
    @if (Converters == true)
    {
        @if (App_TemperatureConverter == true) {
        <MudButton OnClick="Tab_TemperatureConverter" Class="AppBarButtonChild" Style="margin: 4px;" DisableRipple="true" Variant="Variant.Outlined" Color="MudBlazor.Color.Primary">
            <MudText Class="AppBarButtonChildText" Style="" Color="MudBlazor.Color.Tertiary"> Temperature Converter </MudText>
        </MudButton> 
        }  
        @if (App_TemperatureConverter == false) {
        <MudButton OnClick="Tab_TemperatureConverter" Class="AppBarButtonChild" Style="margin: 4px;" DisableRipple="true" Variant="Variant.Outlined" Color="MudBlazor.Color.Tertiary">
            <MudText Class="AppBarButtonChildText" Style="" Color="MudBlazor.Color.Tertiary"> Temperature Converter </MudText>
        </MudButton>  
        }     
        @if (App_VolumeConverter == true) {
        <MudButton OnClick="Tab_VolumeConverter" Class="AppBarButtonChild" Style="margin: 4px;" DisableRipple="true" Variant="Variant.Outlined" Color="MudBlazor.Color.Primary">
            <MudText Class="AppBarButtonChildText" Style="" Color="MudBlazor.Color.Tertiary"> Volume Converter </MudText>
        </MudButton> 
        }  
        @if (App_VolumeConverter == false) {
        <MudButton OnClick="Tab_VolumeConverter" Class="AppBarButtonChild" Style="margin: 4px;" DisableRipple="true" Variant="Variant.Outlined" Color="MudBlazor.Color.Tertiary">
            <MudText Class="AppBarButtonChildText" Style="" Color="MudBlazor.Color.Tertiary"> Volume Converter </MudText>
        </MudButton>  
        }     
        @if (App_LengthConverter == true) {
        <MudButton OnClick="Tab_LengthConverter" Class="AppBarButtonChild" Style="margin: 4px;" DisableRipple="true" Variant="Variant.Outlined" Color="MudBlazor.Color.Primary">
            <MudText Class="AppBarButtonChildText" Style="" Color="MudBlazor.Color.Tertiary"> Length Converter </MudText>
        </MudButton>  
        }  
        @if (App_LengthConverter == false) {
        <MudButton OnClick="Tab_LengthConverter" Class="AppBarButtonChild" Style="margin: 4px;" DisableRipple="true" Variant="Variant.Outlined" Color="MudBlazor.Color.Tertiary">
            <MudText Class="AppBarButtonChildText" Style="" Color="MudBlazor.Color.Tertiary"> Length Converter </MudText>
        </MudButton>  
        }     
        @if (App_MassConverter == true) {
        <MudButton OnClick="Tab_MassConverter" Class="AppBarButtonChild" Style="margin: 4px;" DisableRipple="true" Variant="Variant.Outlined" Color="MudBlazor.Color.Primary">
            <MudText Class="AppBarButtonChildText" Style="" Color="MudBlazor.Color.Tertiary"> Mass Converter </MudText>
        </MudButton> 
        }  
        @if (App_MassConverter == false) {
        <MudButton OnClick="Tab_MassConverter" Class="AppBarButtonChild" Style="margin: 4px;" DisableRipple="true" Variant="Variant.Outlined" Color="MudBlazor.Color.Tertiary">
            <MudText Class="AppBarButtonChildText" Style="" Color="MudBlazor.Color.Tertiary"> Mass Converter </MudText>
        </MudButton> 
        }      
    }
    </div>
    <div class="NewToolBarChild3" style="background-color: @textColor">
    
    </div>
</div>
<div class="toolbarMobile">
    <div class="toolbarMobileChild1">
    <div>
    <MudButton Disabled="true" OnClick="tab1" Class="MobileAppBarButton" Style="" DisableRipple="true">
        <MudText Class="AppBarButtonText" Style="font-size: 28px;" Color="MudBlazor.Color.Tertiary"> QuickTools </MudText>
    </MudButton> 
    </div>
    <div>
    @if(isDarkMode == true){
    <MudIconButton OnClick="toggleDark" Class="darkModeToggle" Size="MudBlazor.Size.Large" DisableRipple="true" Color="MudBlazor.Color.Tertiary" Icon="@Icons.Rounded.WbSunny"></MudIconButton>
    }
    @if(isDarkMode == false){
    <MudIconButton OnClick="toggleDark" Class="darkModeToggle" Size="MudBlazor.Size.Large" DisableRipple="true" Color="MudBlazor.Color.Tertiary" Icon="@Icons.Rounded.DarkMode"></MudIconButton>
    }    

    <MudIconButton OnClick="ToggleDrawer" Class="openDrawerButton" Size="MudBlazor.Size.Large" DisableRipple="true" Color="MudBlazor.Color.Tertiary" Icon="@Icons.Rounded.Menu"></MudIconButton>
    </div>
    </div>
    <div class="toolbarMobileChild2">
    @if (home == true) {
    <MudButton OnClick="OpenDialog" Class="MobileAppBarButtonChild" Style="margin: 4px;" DisableRipple="true" Variant="Variant.Outlined" Color="MudBlazor.Color.Secondary">
        <MudText Class="MobileAppBarButtonChildText" Style="" Color="MudBlazor.Color.Secondary"> Manage Tools </MudText>
    </MudButton>       
    }
    @if (home == false) {
    <MudButton OnClick="tab1" Class="MobileAppBarButtonChild" Style="margin: 4px;" DisableRipple="true" Variant="Variant.Outlined" Color="MudBlazor.Color.Secondary">
        <MudText Class="MobileAppBarButtonChildText" Style="" Color="MudBlazor.Color.Secondary"> Return Home </MudText>
    </MudButton>       
    }
    </div>
</div>
@if(drawerOpen) {
<div class="mobileOverlay">
    <div class="mobileOverlayChild1">
    <MudText Class="AppBarButtonText" Style="font-size: 18px;" Color="MudBlazor.Color.Tertiary"> Utilities </MudText>
    </div>
    <div class="mobileOverlayChild2">
    <MudButton OnClick="Tab_Calculator" Class="MobileAppBarButtonChild" Style="margin: 5px;" DisableRipple="true" Variant="Variant.Outlined" Color="MudBlazor.Color.Tertiary">
        <MudText Class="MobileAppBarButtonChildText" Style="" Color="MudBlazor.Color.Tertiary"> Calculator </MudText>
    </MudButton>       
    <MudButton OnClick="Tab_Stopwatch" Class="MobileAppBarButtonChild" Style="margin: 5px;" DisableRipple="true" Variant="Variant.Outlined" Color="MudBlazor.Color.Tertiary">
        <MudText Class="MobileAppBarButtonChildText" Style="" Color="MudBlazor.Color.Tertiary"> Stopwatch </MudText>
    </MudButton>   
    <MudButton OnClick="Tab_Timer" Class="MobileAppBarButtonChild" Style="margin: 5px;" DisableRipple="true" Variant="Variant.Outlined" Color="MudBlazor.Color.Tertiary">
        <MudText Class="MobileAppBarButtonChildText" Style="" Color="MudBlazor.Color.Tertiary"> Timer </MudText>
    </MudButton> 
    <MudButton OnClick="Tab_Notes" Class="MobileAppBarButtonChild" Style="margin: 5px;" DisableRipple="true" Variant="Variant.Outlined" Color="MudBlazor.Color.Tertiary">
        <MudText Class="MobileAppBarButtonChildText" Style="" Color="MudBlazor.Color.Tertiary"> Notes </MudText>
    </MudButton>
    </div>
    <div class="mobileOverlayChild3">
    <MudText Class="AppBarButtonText" Style="font-size: 18px;" Color="MudBlazor.Color.Tertiary"> Converters </MudText>
    </div>
    <div class="mobileOverlayChild4">
    <MudButton OnClick="Tab_TemperatureConverter" Class="MobileAppBarButtonChild" Style="margin: 5px;" DisableRipple="true" Variant="Variant.Outlined" Color="MudBlazor.Color.Tertiary">
        <MudText Class="MobileAppBarButtonChildText" Style="" Color="MudBlazor.Color.Tertiary"> Temperature Converter </MudText>
    </MudButton> 
    <MudButton OnClick="Tab_VolumeConverter" Class="MobileAppBarButtonChild" Style="margin: 5px;" DisableRipple="true" Variant="Variant.Outlined" Color="MudBlazor.Color.Tertiary">
        <MudText Class="MobileAppBarButtonChildText" Style="" Color="MudBlazor.Color.Tertiary"> Volume Converter </MudText>
    </MudButton> 
    <MudButton OnClick="Tab_LengthConverter" Class="MobileAppBarButtonChild" Style="margin: 5px;" DisableRipple="true" Variant="Variant.Outlined" Color="MudBlazor.Color.Tertiary">
        <MudText Class="MobileAppBarButtonChildText" Style="" Color="MudBlazor.Color.Tertiary"> Length Converter </MudText>
    </MudButton> 
    <MudButton OnClick="Tab_MassConverter" Class="MobileAppBarButtonChild" Style="margin: 5px;" DisableRipple="true" Variant="Variant.Outlined" Color="MudBlazor.Color.Tertiary">
        <MudText Class="MobileAppBarButtonChildText" Style="" Color="MudBlazor.Color.Tertiary"> Mass Converter </MudText>
    </MudButton>  
    </div>
    <div class="mobileOverlayChild5">
    </div>
</div>
}
<div class="pageHeader" style=""></div>
</div>
<div class="backScreen" style="">
    <div class="@className">
    @if (Converters == true || home == true)
    {
            @if (App_MassConverter == true)
            {
                OpenMassConverter();
                @if (MassConverterIsOpen == true)
                {
                    <div class="MudPaperMediumWidget" style="order: @widgetOrder[10]; background-color: @widgetColor;">
                        <div style="display: flex; justify-content: space-between;">
                            <MudText Color="@MudBlazor.Color.Secondary" Style="margin-top: 5%; margin-left: 5%; margin-right: 5%;">Mass Converter</MudText>
                            @if (home == true)
                            {
                                <div style="margin: 1%;">
                                <MudTooltip Text="Close" Color="@MudBlazor.Color.Primary" Placement="Placement.Top">
                                    <MudIconButton OnClick="CloseMassConverter" Icon="@Icons.Material.Filled.Close"></MudIconButton>
                                </MudTooltip>
                                </div>
                            }    
                        </div>
                        <div style="display: flex;">
                            <div class="converterInput" style="">
                                <MudTextField @bind-Value="App_MassConverter_Value1" ReadOnly="false" Variant="Variant.Outlined" Style="" ></MudTextField>
                                <MudSelect @bind-Value="MassValue1" Margin="Margin.Dense" T="string" Variant="Variant.Outlined">
                                    <MudSelectItem Value="@("Pound")" />
                                    <MudSelectItem Value="@("Ounce")" />
                                    <MudSelectItem Value="@("Kilogram")" />
                                    <MudSelectItem Value="@("Gram")" />
                                    <MudSelectItem Value="@("US Ton")" />
                                    <MudSelectItem Value="@("Metric Ton")" />
                                </MudSelect>    
                            </div>
                            <div class="converterInput" style="">
                                <MudTextField @bind-Value="App_MassConverter_Value2" ReadOnly="true" Variant="Variant.Outlined" Style="Color: " ></MudTextField>
                                <MudSelect @bind-Value="MassValue2" Margin="Margin.Dense" T="string" Variant="Variant.Outlined">
                                    <MudSelectItem Value="@("Pound")" />
                                    <MudSelectItem Value="@("Ounce")" />
                                    <MudSelectItem Value="@("Kilogram")" />
                                    <MudSelectItem Value="@("Gram")" />
                                    <MudSelectItem Value="@("US Ton")" />
                                    <MudSelectItem Value="@("Metric Ton")" />
                                </MudSelect>                
                            </div>
                        </div>
                        @if (LogMass == true)
                        {
                            <div class="converterLog" style="border-color: @widgetTextColor;">
                                @if (LogMass == true)
                                {
                                    <MudTextField @bind-Value="massLog" Class="converterLogText" ReadOnly="true" Variant="Variant.Text" Style="" DisableUnderLine="true" Lines="6" ></MudTextField>
                                }
                            </div>
                        }
                        @if (LogMass == false)
                        {
                            <div class="converterLog" style="border-color: @widgetColor;"></div>
                        }
                        <div class="converterButtonContainer">
                            <MudButton OnClick="ConvertMass" Class="toolButtons" Style="" Variant="Variant.Outlined" Color="MudBlazor.Color.Secondary" >
                                <MudText Class="toolButtonsText">Convert</MudText>
                            </MudButton>
                            @if (LogMass == false)
                            {
                                <MudButton OnClick="ToggleLogMass" Class="toolButtons" Style="" Variant="Variant.Outlined" Color="MudBlazor.Color.Secondary" >
                                    <MudText Class="toolButtonsText">Show Log</MudText>
                                </MudButton>
                            }
                            @if (LogMass == true)
                            {
                                <MudButton OnClick="ToggleLogMass" Class="toolButtons" Style="" Variant="Variant.Outlined" Color="MudBlazor.Color.Secondary" >
                                    <MudText Class="toolButtonsText">Hide Log</MudText>
                                </MudButton>                    
                                <MudButton OnClick="ClearLogMass" Class="toolButtons" Style="" Variant="Variant.Outlined" Color="MudBlazor.Color.Secondary" >
                                    <MudText Class="toolButtonsFont">Clear Log</MudText>
                                </MudButton>
                            }
                    </div>
                </div>
                }
            }
            @if (App_LengthConverter == true)
            {
                OpenLengthConverter();
                @if (LengthConverterIsOpen == true)
                {
                    <div class="MudPaperMediumWidget" style="order: @widgetOrder[9]; background-color: @widgetColor;">
                        <div style="display: flex; justify-content: space-between;">
                            <MudText Color="@MudBlazor.Color.Secondary" Style="margin-top: 5%; margin-left: 5%; margin-right: 5%;">Length Converter</MudText>
                            @if (home == true)
                            {
                                <div style="margin: 1%;">
                                <MudTooltip Text="Close" Color="@MudBlazor.Color.Primary" Placement="Placement.Top">
                                    <MudIconButton OnClick="CloseLengthConverter" Icon="@Icons.Material.Filled.Close"></MudIconButton>
                                </MudTooltip>
                                </div>
                            }    
                        </div>             
                        <div style="display: flex;">
                            <div class="converterInput" style="">
                                <MudTextField @bind-Value="App_LengthConverter_Value1" ReadOnly="false" Variant="Variant.Outlined" Style="" ></MudTextField>
                                <MudSelect @bind-Value="LengthValue1" Margin="Margin.Dense" T="string" Variant="Variant.Outlined">
                                    <MudSelectItem Value="@("Foot")" />
                                    <MudSelectItem Value="@("Yard")" />
                                    <MudSelectItem Value="@("Mile")" />
                                    <MudSelectItem Value="@("Inch")" />
                                    <MudSelectItem Value="@("Meter")" />
                                    <MudSelectItem Value="@("Kilometer")" />
                                </MudSelect>    
                            </div>
                            <div class="converterInput" style="">
                                <MudTextField @bind-Value="App_LengthConverter_Value2" ReadOnly="true" Variant="Variant.Outlined" Style="" ></MudTextField>
                                <MudSelect @bind-Value="LengthValue2" Margin="Margin.Dense" T="string" Variant="Variant.Outlined">
                                    <MudSelectItem Value="@("Foot")" />
                                    <MudSelectItem Value="@("Yard")" />
                                    <MudSelectItem Value="@("Mile")" />
                                    <MudSelectItem Value="@("Inch")" />
                                    <MudSelectItem Value="@("Meter")" />
                                    <MudSelectItem Value="@("Kilometer")" />
                                </MudSelect>                
                            </div>
                        </div>
                        @if (LogLength == true)
                        {
                            <div class="converterLog" style="border-color: @widgetTextColor;">
                                @if (LogLength == true)
                                {
                                    <MudTextField @bind-Value="lengthLog" Class="converterLogText" ReadOnly="true" Variant="Variant.Text" Style="" DisableUnderLine="true" Lines="6" ></MudTextField>
                                }
                            </div>
                        }
                        @if (LogLength == false)
                        {
                            <div class="converterLog" style="border-color: @widgetColor;"></div>
                        }
                        <div class="converterButtonContainer">
                            <MudButton OnClick="ConvertLength" Class="toolButtons" Style="" Variant="Variant.Outlined" Color="MudBlazor.Color.Secondary" >
                                <MudText Class="toolButtonsText">Convert</MudText>
                            </MudButton>
                            @if (LogLength == false)
                            {
                                <MudButton OnClick="ToggleLogLength" Class="toolButtons" Style="" Variant="Variant.Outlined" Color="MudBlazor.Color.Secondary" >
                                    <MudText Class="toolButtonsText">Show Log</MudText>
                                </MudButton>
                            }
                            @if (LogLength == true)
                            {
                                <MudButton OnClick="ToggleLogLength" Class="toolButtons" Style="" Variant="Variant.Outlined" Color="MudBlazor.Color.Secondary" >
                                    <MudText Class="toolButtonsText">Hide Log</MudText>
                                </MudButton>                    
                                <MudButton OnClick="ClearLogLength" Class="toolButtons" Style="" Variant="Variant.Outlined" Color="MudBlazor.Color.Secondary" >
                                    <MudText Class="toolButtonsFont">Clear Log</MudText>
                                </MudButton>
                            }
                        </div>
                </div>
                }
            }
            @if (App_VolumeConverter == true)
            {
                OpenVolumeConverter();
                @if (VolumeConverterIsOpen == true)
                {
                <div class="MudPaperMediumWidget" style="order: @widgetOrder[8]; background-color: @widgetColor;">
                    <div style="display: flex; justify-content: space-between;">
                        <MudText Color="@MudBlazor.Color.Secondary" Style="margin-top: 5%; margin-left: 5%; margin-right: 5%;">Volume Converter</MudText>
                        @if (home == true)
                        {
                            <div style="margin: 1%;">
                            <MudTooltip Text="Close" Color="@MudBlazor.Color.Primary" Placement="Placement.Top">
                                <MudIconButton OnClick="CloseVolumeConverter" Icon="@Icons.Material.Filled.Close"></MudIconButton>
                            </MudTooltip>
                            </div>
                        }    
                    </div>
                    <div style="display: flex;">
                            <div class="converterInput" style="">
                            <MudTextField @bind-Value="App_VolumeConverter_Value1" ReadOnly="false" Variant="Variant.Outlined" Style="" ></MudTextField>
                            <MudSelect @bind-Value="VolumeValue1" Margin="Margin.Dense" T="string" Variant="Variant.Outlined">
                                <MudSelectItem Value="@("US Gallon")" />
                                <MudSelectItem Value="@("US Quart")" />
                                <MudSelectItem Value="@("US Pint")" />
                                <MudSelectItem Value="@("US Cup")" />
                                <MudSelectItem Value="@("Liter")" />
                                <MudSelectItem Value="@("Milliliter")" />
                            </MudSelect>    
                        </div>
                            <div class="converterInput" style="">
                            <MudTextField @bind-Value="App_VolumeConverter_Value2" ReadOnly="true" Variant="Variant.Outlined" Style="" ></MudTextField>
                            <MudSelect @bind-Value="VolumeValue2" Margin="Margin.Dense" T="string" Variant="Variant.Outlined">
                                <MudSelectItem Value="@("US Gallon")" />
                                <MudSelectItem Value="@("US Quart")" />
                                <MudSelectItem Value="@("US Pint")" />
                                <MudSelectItem Value="@("US Cup")" />
                                <MudSelectItem Value="@("Liter")" />
                                <MudSelectItem Value="@("Milliliter")" />
                            </MudSelect>                
                        </div>
                    </div>
                    @if (LogVolume == true) {
                    <div class="converterLog" style="border-color: @widgetTextColor;">
                            @if (LogVolume == true) {
                            <MudTextField @bind-Value="volumeLog" Class="converterLogText" ReadOnly="true" Variant="Variant.Text" Style="" DisableUnderLine="true" Lines="6" ></MudTextField>
                            }
                    </div>
                    }
                    @if (LogVolume == false) {
                    <div class="converterLog" style="border-color: @widgetColor;"></div>
                    }
                        <div class="converterButtonContainer">
                            <MudButton OnClick="ConvertVolume" Class="toolButtons" Style="" Variant="Variant.Outlined" Color="MudBlazor.Color.Secondary" >
                                <MudText Class="toolButtonsText">Convert</MudText>
                            </MudButton>
                            @if (LogVolume == false)
                            {
                                <MudButton OnClick="ToggleLogVolume" Class="toolButtons" Style="" Variant="Variant.Outlined" Color="MudBlazor.Color.Secondary" >
                                    <MudText Class="toolButtonsText">Show Log</MudText>
                                </MudButton>
                            }
                            @if (LogVolume == true)
                            {
                                <MudButton OnClick="ToggleLogVolume" Class="toolButtons" Style="" Variant="Variant.Outlined" Color="MudBlazor.Color.Secondary" >
                                    <MudText Class="toolButtonsText">Hide Log</MudText>
                                </MudButton>                    
                                <MudButton OnClick="ClearLogVolume" Class="toolButtons" Style="" Variant="Variant.Outlined" Color="MudBlazor.Color.Secondary" >
                                    <MudText Class="toolButtonsFont">Clear Log</MudText>
                                </MudButton>
                            }
                        </div>
                </div>
                }
            }
            @if (App_TemperatureConverter == true)
            {
                OpenTemperatureConverter();
                @if (TemperatureConverterIsOpen == true)
                {
                <div class="MudPaperMediumWidget" style="order: @widgetOrder[7]; background-color: @widgetColor;">
                    <div style="display: flex; justify-content: space-between;">
                        <MudText Color="@MudBlazor.Color.Secondary" Style="margin-top: 5%; margin-left: 5%; margin-right: 5%;">Temperature Converter</MudText>
                        @if (home == true)
                        {
                            <div style="margin: 1%;">
                            <MudTooltip Text="Close" Color="@MudBlazor.Color.Primary" Placement="Placement.Top">
                                <MudIconButton OnClick="CloseTemperatureConverter" Icon="@Icons.Material.Filled.Close"></MudIconButton>
                            </MudTooltip>
                            </div>
                        }    
                    </div>                  
                    <div style="display: flex;">
                            <div class="converterInput" style="">
                            <MudTextField @bind-Value="App_TemperatureConverter_Value1" ReadOnly="false" Variant="Variant.Outlined" Style="" ></MudTextField>
                            <MudSelect @bind-Value="TempValue1" Margin="Margin.Dense" T="string" Variant="Variant.Outlined">
                                <MudSelectItem Value="@("Fahrenheit")" />
                                <MudSelectItem Value="@("Celsius")" />
                                <MudSelectItem Value="@("Kelvin")" />
                            </MudSelect>    
                        </div>
                            <div class="converterInput" style="">
                            <MudTextField @bind-Value="App_TemperatureConverter_Value2" ReadOnly="true" Variant="Variant.Outlined" Style="" ></MudTextField>
                            <MudSelect @bind-Value="TempValue2" Margin="Margin.Dense" T="string" Variant="Variant.Outlined">
                                <MudSelectItem Value="@("Fahrenheit")" />
                                <MudSelectItem Value="@("Celsius")" />
                                <MudSelectItem Value="@("Kelvin")" />
                            </MudSelect>                
                        </div>
                    </div>
                    @if (LogTemp == true) {
                    <div class="converterLog" style="border-color: @widgetTextColor;">
                            @if (LogTemp == true) {
                            <MudTextField @bind-Value="tempLog" Class="converterLogText" ReadOnly="true" Variant="Variant.Text" Style="" DisableUnderLine="true" Lines="6" ></MudTextField>
                            }
                    </div>
                    }
                    @if (LogTemp == false) {
                    <div class="converterLog" style="border-color: @widgetColor;"></div>
                    }
                        <div class="converterButtonContainer">
                            <MudButton OnClick="ConvertTemp" Class="toolButtons" Style="" Variant="Variant.Outlined" Color="MudBlazor.Color.Secondary" >
                                <MudText Class="toolButtonsText">Convert</MudText>
                            </MudButton>
                            @if (LogTemp == false)
                            {
                                <MudButton OnClick="ToggleLogTemp" Class="toolButtons" Style="" Variant="Variant.Outlined" Color="MudBlazor.Color.Secondary" >
                                    <MudText Class="toolButtonsText">Show Log</MudText>
                                </MudButton>
                            }
                            @if (LogTemp == true)
                            {
                                <MudButton OnClick="ToggleLogTemp" Class="toolButtons" Style="" Variant="Variant.Outlined" Color="MudBlazor.Color.Secondary" >
                                    <MudText Class="toolButtonsText">Hide Log</MudText>
                                </MudButton>                    
                                <MudButton OnClick="ClearLogTemp" Class="toolButtons" Style="" Variant="Variant.Outlined" Color="MudBlazor.Color.Secondary" >
                                    <MudText Class="toolButtonsFont">Clear Log</MudText>
                                </MudButton>
                            }
                        </div>
                </div>
                }
            }
    }
    @if (Utilities == true || home == true)
    {
            @if (App_GraphBuilder == true)
            {
                OpenGraphBuilder();
                @if (GraphBuilderIsOpen == true)
                {
                <div class="@graphBuilderClass" style="order: @widgetOrder[6]; background-color: @widgetColor;">
                    <div style="display: flex; justify-content: space-between;">
                        <MudText Color="@MudBlazor.Color.Secondary" Style="margin-top: 20px; margin-left: 20px; margin-right: 20px;">Graph Builder</MudText>
                            <div style="margin: 2px;">
                            @if (!isExpandedGraphBuilder)
                            {
                            <MudTooltip Text="More" Color="@MudBlazor.Color.Primary" Placement="Placement.Top">
                                <MudIconButton OnClick="ExpandGraphBuilder" Icon="@Icons.TwoTone.AddCircleOutline"></MudIconButton>
                            </MudTooltip>
                            }
                            @if (isExpandedGraphBuilder)
                            {
                            <MudTooltip Text="Less" Color="@MudBlazor.Color.Primary" Placement="Placement.Top">
                                <MudIconButton OnClick="ExpandGraphBuilder" Icon="@Icons.TwoTone.RemoveCircleOutline"></MudIconButton>
                            </MudTooltip>
                            }
                            @if (home == true)
                            {
                            <MudTooltip Text="Close" Color="@MudBlazor.Color.Primary" Placement="Placement.Top">
                                <MudIconButton OnClick="CloseGraphBuilder" Icon="@Icons.Material.Filled.Close"></MudIconButton>
                            </MudTooltip>
                            }  
                        </div>
                    </div>
                <div style="display: flex; justify-content: start;">
                    <div class="GraphArea">
                        <div class="GraphAreaTitle"><MudText Style="font-size: 20px;">@GraphTitle</MudText></div>
                        <div style="display: flex; justify-content: start;">                        
                            <div class="yAxisContainer">
                                <MudText Style="margin-left: 10px;">@GraphBuilderMax</MudText>
                                <MudText Style="margin-left: 10px; margin-top: 190px;">@GraphBuilderMin</MudText>
                            </div>
                            <div class="GraphContainer">
                                    @if (GraphNumberOfBars >= 1)
                                    {
                                        <div class="GraphBar">
                                            <div style="height: @barHeight[0]%; background-color: @graphcolor;" class="GraphBarInterior">
                                                @if (CheckBoxValues == true) {
                                                <MudText Style="padding-left: 25%;" Class="GraphBarValue">@GraphBar[0]</MudText>
                                                }                                                
                                            </div>
                                        </div>
                                    }
                                    @if (GraphNumberOfBars >= 2)
                                    {
                                        <div class="GraphBar">
                                            <div style="height: @barHeight[1]%; background-color: @graphcolor;" class="GraphBarInterior">
                                                @if (CheckBoxValues == true) {
                                                <MudText Style="padding-left: 25%;" Class="GraphBarValue">@GraphBar[1]</MudText>
                                                }                                             
                                            </div>
                                        </div>                                    
                                    }
                                    @if (GraphNumberOfBars >= 3)
                                    {
                                        <div class="GraphBar">
                                            <div style="height: @barHeight[2]%; background-color: @graphcolor;" class="GraphBarInterior">
                                                @if (CheckBoxValues == true) {
                                                <MudText Style="padding-left: 25%;" Class="GraphBarValue">@GraphBar[2]</MudText>
                                                }                                             
                                            </div>
                                        </div>                                    
                                    }
                                    @if (GraphNumberOfBars >= 4)
                                    {
                                        <div class="GraphBar">
                                            <div style="height: @barHeight[3]%; background-color: @graphcolor;" class="GraphBarInterior">
                                                @if (CheckBoxValues == true) {
                                                <MudText Style="padding-left: 25%;" Class="GraphBarValue">@GraphBar[3]</MudText>
                                                }                                             
                                            </div>
                                        </div>                                    
                                    }
                                    @if (GraphNumberOfBars >= 5)
                                    {
                                        <div class="GraphBar">
                                            <div style="height: @barHeight[4]%; background-color: @graphcolor;" class="GraphBarInterior">
                                                @if (CheckBoxValues == true) {
                                                <MudText Style="padding-left: 25%;" Class="GraphBarValue">@GraphBar[4]</MudText>
                                                }                                             
                                            </div>
                                        </div>                                    
                                    }
                                    @if (GraphNumberOfBars >= 6)
                                    {
                                        <div class="GraphBar">
                                            <div style="height: @barHeight[5]%; background-color: @graphcolor;" class="GraphBarInterior">
                                                @if (CheckBoxValues == true) {
                                                <MudText Style="padding-left: 25%;" Class="GraphBarValue">@GraphBar[5]</MudText>
                                                } 
                                            </div>
                                        </div>                                    
                                    }
                                </div>
                        </div>
                        <div class="xAxisContainer">
                                @if (CheckBoxLabels == true)
                                {
                                    @if (GraphNumberOfBars >= 1)
                                    {
                                        <MudText Class="GraphBarLabel">@GraphBarLabel[0]</MudText>
                                    }
                                    @if (GraphNumberOfBars >= 2)
                                    {
                                        <MudText Class="GraphBarLabel">@GraphBarLabel[1]</MudText>
                                    }
                                    @if (GraphNumberOfBars >= 3)
                                    {
                                        <MudText Class="GraphBarLabel">@GraphBarLabel[2]</MudText>
                                    }
                                    @if (GraphNumberOfBars >= 4)
                                    {
                                        <MudText Class="GraphBarLabel">@GraphBarLabel[3]</MudText>
                                    }
                                    @if (GraphNumberOfBars >= 5)
                                    {
                                        <MudText Class="GraphBarLabel">@GraphBarLabel[4]</MudText>
                                    }
                                    @if (GraphNumberOfBars >= 6)
                                    {
                                        <MudText Class="GraphBarLabel">@GraphBarLabel[5]</MudText>
                                    }
                                }
                        </div>
                    </div>
                    @if (isExpandedGraphBuilder)
                        {
                            @if (graphTabBars == true)
                            {
                            <div class="InputArea">
                                <div style="display: flex; justify-content: space-between;">
                                    <MudIconButton Disabled="isExpandedGraphBuilder" OnClick="ChangeGraphTab" Icon="@Icons.TwoTone.KeyboardArrowLeft"></MudIconButton>
                                    <MudText Style="margin-top: 17px">Data Input</MudText>
                                    <MudTooltip Text="Label Input" Color="@MudBlazor.Color.Primary" Placement="Placement.Top">
                                        <MudIconButton Disabled="!isExpandedGraphBuilder" OnClick="ChangeGraphTab" Icon="@Icons.TwoTone.KeyboardArrowRight"></MudIconButton>
                                    </MudTooltip>
                                </div>
                                <div style="display: flex; justify-content: start;">
                                <MudButton OnClick="BuildGraph" Class="toolButtons" Variant="Variant.Outlined" Color="MudBlazor.Color.Secondary">
                                    <MudText Class="toolButtonsFont">Build Graph</MudText>                                
                                </MudButton>                                  </div>
                                <div style="display: flex; justify-content: start;">
                                <MudNumericField Class="GraphInputBoxes" Margin="Margin.Dense" Style="margin-left: 6px; margin: 2px; width: 140px;" @bind-Value="GraphBuilderMax" Label="Max Value" Variant="Variant.Outlined" />
                                <MudNumericField Class="GraphInputBoxes" Margin="Margin.Dense" Style="margin-left: 6px; margin: 2px; width: 140px;" @bind-Value="GraphNumberOfBars" Label="# of Bars" Variant="Variant.Outlined" Min="0" Max="6"/>
                                </div>
                                <div style="display: flex; justify-content: start;">
                                    @if (GraphNumberOfBars >= 1)
                                    {
                                    <MudNumericField Class="GraphInputBoxes" Margin="Margin.Dense" Style="margin-left: 6px; margin: 2px; width: 140px;" @bind-Value="GraphBar[0]" Label="@GraphBarLabel[0]" Variant="Variant.Outlined" Min="0" Max="@GraphBuilderMax"/>
                                    }
                                    @if (GraphNumberOfBars >= 2)
                                    {
                                    <MudNumericField Class="GraphInputBoxes" Margin="Margin.Dense" Style="margin-left: 6px; margin: 2px; width: 140px;" @bind-Value="GraphBar[1]" Label="@GraphBarLabel[1]" Variant="Variant.Outlined" Min="0" Max="@GraphBuilderMax"/>
                                    }
                                </div>
                                <div style="display: flex; justify-content: start;">
                                    @if (GraphNumberOfBars >= 3)
                                    {
                                    <MudNumericField Class="GraphInputBoxes" Margin="Margin.Dense" Style="margin-left: 6px; margin: 2px; width: 140px;" @bind-Value="GraphBar[2]" Label="@GraphBarLabel[2]" Variant="Variant.Outlined" Min="0" Max="@GraphBuilderMax"/>
                                    }
                                    @if (GraphNumberOfBars >= 4)
                                    {
                                    <MudNumericField Class="GraphInputBoxes" Margin="Margin.Dense" Style="margin-left: 6px; margin: 2px; width: 140px;" @bind-Value="GraphBar[3]" Label="@GraphBarLabel[3]" Variant="Variant.Outlined" Min="0" Max="@GraphBuilderMax"/>
                                    }
                                </div>
                                <div style="display: flex; justify-content: start;">
                                    @if (GraphNumberOfBars >= 5)
                                    {
                                    <MudNumericField Class="GraphInputBoxes" Margin="Margin.Dense" Style="margin-left: 6px; margin: 2px; width: 140px;" @bind-Value="GraphBar[4]" Label="@GraphBarLabel[4]" Variant="Variant.Outlined" Min="0" Max="@GraphBuilderMax"/>
                                    }
                                    @if (GraphNumberOfBars >= 6)
                                    {
                                    <MudNumericField Class="GraphInputBoxes" Margin="Margin.Dense" Style="margin-left: 6px; margin: 2px; width: 140px;" @bind-Value="GraphBar[5]" Label="@GraphBarLabel[5]" Variant="Variant.Outlined" Min="0" Max="@GraphBuilderMax"/>
                                    }
                                </div
                            </div>
                            }
                            @if (graphTabBars == false) {
                            <div class="InputArea">
                                <div style="display: flex; justify-content: space-between;">
                                    <MudTooltip Text="Data Input" Color="@MudBlazor.Color.Primary" Placement="Placement.Top">
                                    <MudIconButton Disabled="!isExpandedGraphBuilder" OnClick="ChangeGraphTab" Icon="@Icons.TwoTone.KeyboardArrowLeft"></MudIconButton>
                                    </MudTooltip>
                                    <MudText Style="margin-top: 17px">Label Input</MudText>
                                    <MudIconButton Disabled="isExpandedGraphBuilder" OnClick="ChangeGraphTab" Icon="@Icons.TwoTone.KeyboardArrowRight"></MudIconButton>
                                </div>
                                <div style="display: flex; justify-content: start;">
                                <MudButton OnClick="BuildGraph" Class="toolButtons" Variant="Variant.Outlined" Color="MudBlazor.Color.Secondary">
                                    <MudText Class="toolButtonsFont">Build Graph</MudText>                                
                                </MudButton>   
                                </div>
                                <MudTextField @bind-Value="GraphTitle" Margin="Margin.Dense" Style="margin-left: 8px; margin-right: 8px;" Label="Graph Title" Variant="Variant.Outlined"></MudTextField>                    
                                <div style="display: flex; justify-content: start;">
                                    <MudCheckBox @bind-Checked="@CheckBoxLabels" Label="Bar Labels"></MudCheckBox>
                                    <MudCheckBox @bind-Checked="@CheckBoxValues" Label="Bar Values"></MudCheckBox>
                                </div>
                                <div style="display: flex; justify-content: start;">
                                    @if (GraphNumberOfBars >= 1)
                                    {
                                    <MudTextField Class="GraphInputBoxes" Margin="Margin.Dense" Style="margin-left: 6px; margin: 2px; width: 140px;" @bind-Value="GraphBarLabel[0]" Label="" Variant="Variant.Outlined"/>
                                    }
                                    @if (GraphNumberOfBars >= 2)
                                    {
                                    <MudTextField Class="GraphInputBoxes" Margin="Margin.Dense" Style="margin-left: 6px; margin: 2px; width: 140px;" @bind-Value="GraphBarLabel[1]" Label="" Variant="Variant.Outlined"/>
                                    }
                                </div>
                                <div style="display: flex; justify-content: start;">
                                    @if (GraphNumberOfBars >= 3)
                                    {
                                    <MudTextField Class="GraphInputBoxes" Margin="Margin.Dense" Style="margin-left: 6px; margin: 2px; width: 140px;" @bind-Value="GraphBarLabel[2]" Label="" Variant="Variant.Outlined"/>
                                    }
                                    @if (GraphNumberOfBars >= 4)
                                    {
                                    <MudTextField Class="GraphInputBoxes" Margin="Margin.Dense" Style="margin-left: 6px; margin: 2px; width: 140px;" @bind-Value="GraphBarLabel[3]" Label="" Variant="Variant.Outlined"/>
                                    }
                                </div>
                                <div style="display: flex; justify-content: start;">
                                    @if (GraphNumberOfBars >= 5)
                                    {
                                    <MudTextField Class="GraphInputBoxes" Margin="Margin.Dense" Style="margin-left: 6px; margin: 2px; width: 140px;" @bind-Value="GraphBarLabel[4]" Label="" Variant="Variant.Outlined"/>
                                    }
                                    @if (GraphNumberOfBars >= 6)
                                    {
                                    <MudTextField Class="GraphInputBoxes" Margin="Margin.Dense" Style="margin-left: 6px; margin: 2px; width: 140px;" @bind-Value="GraphBarLabel[5]" Label="" Variant="Variant.Outlined"/>
                                    }
                                </div
                            </div>
                            }
                        }
                </div> 
                </div>
                }
            }
            @if (App_Calendar == true)
            {
                OpenCalendar();
                @if (CalendarIsOpen == true)
                {
                <div class="CalendarMediumWidget" style="order: @widgetOrder[5]; background-color: @widgetColor;">
                        <div style="display: flex; justify-content: space-between;">
                            <MudText Color="@MudBlazor.Color.Secondary" Style="margin-top: 20px; margin-left: 20px; margin-right: 20px;">Calendar</MudText>
                            @if (home == true)
                            {
                                <div style="margin: 1%;">
                                <MudTooltip Text="Close" Color="@MudBlazor.Color.Primary" Placement="Placement.Top">
                                    <MudIconButton OnClick="CloseCalendar" Icon="@Icons.Material.Filled.Close"></MudIconButton>
                                </MudTooltip>
                                </div>
                            }    
                        </div>
                        @if (home == false)
                        {
                            <div style="width: 550px; height: 25px;"></div>
                        }
                        <div style="display: flex; justify-content: start;">
                    <div class="CalendarDiv">
                        <text style="color: @widgetTextColor;" class="CalenderDayDisplay">Today is @todayDate.</text>
                    </div>
                    <MudDatePicker ReadOnly="true" DisableToolbar="true" PickerVariant="PickerVariant.Static" Orientation="Orientation.Landscape" Date="@(DateTime.Today)" Class="Calendar"/>
                </div> 
                </div>
                }
            }
            @if (App_Notes == true)
            {
                OpenNotes();
                @if (NotesIsOpen == true)
                {
                <div class="@notesClass" style="order: @widgetOrder[4]; background-color: @widgetColor;">
                        <div class="toolHeader">
                            <MudText Color="@MudBlazor.Color.Secondary" Style="margin-top: 20px; margin-left: 20px; margin-right: 20px;">Notes</MudText>
                            <div style="margin: 2px;">
                                @if (!isExpandedNotes)
                                {
                                <MudTooltip Text="More" Color="@MudBlazor.Color.Primary" Placement="Placement.Top">
                                    <MudIconButton OnClick="ExpandNotes" Icon="@Icons.TwoTone.AddCircleOutline"></MudIconButton>
                                </MudTooltip>
                                }
                                @if (isExpandedNotes)
                                {
                                <MudTooltip Text="Less" Color="@MudBlazor.Color.Primary" Placement="Placement.Top">
                                    <MudIconButton OnClick="ExpandNotes" Icon="@Icons.TwoTone.RemoveCircleOutline"></MudIconButton>
                                </MudTooltip>
                                }
                                @if (home == true)
                                {
                                <MudTooltip Text="Close" Color="@MudBlazor.Color.Primary" Placement="Placement.Top">
                                    <MudIconButton OnClick="CloseNotes" Icon="@Icons.Material.Filled.Close"></MudIconButton>
                                </MudTooltip>
                                }   
                            </div>
                    </div>
                    <div style="" class="notesContainer">       
                        <div class="notesChildTools">
                            <button class="notesButtons" onclick="download()">Download</button>
                            <input type="text" class="notesInputText" id="notesfilename" value="notes">
                            <text>.txt</text>
@*                          <button class="notesButtons" onclick="boldText()">Bold</button>
                            <button class="notesButtons" onclick="italicText()">Italic</button>
*@
                        </div>
                        <div class="notesChildInput">
                            <textarea type="text" lock cols="40" rows="5" class="notesInput" style="" name="textarea1" id="textarea1" value=""/>
                        </div>
                    </div> 
                </div>

                }
            }
            @if (App_Timer == true)
            {
                OpenTimer();
                @if (TimerIsOpen == true)
                {
                <div class="MudPaperSmallWidget" style="order: @widgetOrder[3]; background-color: @widgetColor;">
                    <div style="display: flex; justify-content: space-between;">
                        <MudText Color="@MudBlazor.Color.Secondary" Style="margin-top: 20px; margin-left: 20px; margin-right: 20px;">Timer</MudText>
                        <div style="margin: 2px;">
                            @if (home == true)
                            {
                            <MudTooltip Text="Close" Color="@MudBlazor.Color.Primary" Placement="Placement.Top">
                                <MudIconButton OnClick="CloseTimer" Icon="@Icons.Material.Filled.Close"></MudIconButton>
                            </MudTooltip>
                            }    
                        </div>
                    </div>
                    <div style="display: flex; justify-content: center;">
                        <MudText Color="@MudBlazor.Color.Secondary" Style="@($"font-family:{fontType}; font-size: 36px;")">@displaytimer_Timer</MudText>
                    </div>
                    <div style="display: flex; justify-content: center;">
                        <MudButton Disabled="@isTiming_Timer" OnClick="TimerTiming" Class="toolButtons" Variant="Variant.Outlined" Color="MudBlazor.Color.Secondary" >
                            <MudText Class="toolButtonsFont">Start</MudText>                                
                        </MudButton>      
                        <MudButton Disabled="@isPaused_Timer" OnClick="TimerPause" Class="toolButtons" Variant="Variant.Outlined" Color="MudBlazor.Color.Secondary" >
                            <MudText Class="toolButtonsFont">Pause</MudText>                                
                        </MudButton>          
                        <MudButton Disabled="@isReset_Timer" OnClick="TimerReset" Class="toolButtons" Variant="Variant.Outlined" Color="MudBlazor.Color.Secondary" >
                            <MudText Class="toolButtonsFont">Reset</MudText>                                
                        </MudButton>                         
                    </div>
                    <div style="display: flex; justify-content: center; margin: 20px;">
                        <MudNumericField Class="timerField" Style="margin: 10px;" @bind-Value="Hours" Label="Hours" Variant="Variant.Outlined" Min="0" Max="18"/>
                        <MudNumericField Class="timerField" Style="margin: 10px;" @bind-Value="Minutes" Label="Minutes" Variant="Variant.Outlined" Min="0" Max="60"/>
                        <MudNumericField Class="timerField" Style="margin: 10px;" @bind-Value="Seconds" Label="Seconds" Variant="Variant.Outlined" Min="0" Max="60"/>
                    </div> 
                    <div style="margin-left: 15px; margin-top: 84px;">
                        @if (SoundOn == true){
                        <MudTooltip Text="Unmute" Color="@MudBlazor.Color.Primary" Placement="Placement.Top">
                             <MudToggleIconButton @bind-Toggled="@SoundOn"
                             Icon="@Icons.Filled.VolumeOff"
                             ToggledIcon="@Icons.Filled.VolumeUp"/>
                        </MudTooltip>
                        }
                        @if (SoundOn == false){
                        <MudTooltip Text="Mute" Color="@MudBlazor.Color.Primary" Placement="Placement.Top">
                             <MudToggleIconButton @bind-Toggled="@SoundOn"
                             Icon="@Icons.Filled.VolumeOff"
                             ToggledIcon="@Icons.Filled.VolumeUp"/>
                        </MudTooltip>
                        }
                    </div>
                        
                </div>
                }
            }   
            @if (App_Stopwatch == true)
            {
                OpenStopwatch();
                @if (StopwatchIsOpen == true)
                {
                <div class="MudPaperSmallWidget" style="order: @widgetOrder[2]; background-color: @widgetColor;">
                        <div style="display: flex; justify-content: space-between;">
                            <MudText Color="@MudBlazor.Color.Secondary" Style="margin-top: 5%; margin-left: 5%; margin-right: 5%;">Stopwatch</MudText>
                            @if (home == true)
                            {
                                <div style="margin: 1%;">
                                <MudTooltip Text="Close" Color="@MudBlazor.Color.Primary" Placement="Placement.Top">
                                    <MudIconButton OnClick="CloseStopwatch" Icon="@Icons.Material.Filled.Close"></MudIconButton>
                                </MudTooltip>
                                </div>
                            }    
                        </div> 
                        <div style="display: flex; justify-content: center;">
                            <MudText Color="@MudBlazor.Color.Secondary" Style="@($"font-family:{fontType}; font-size: 36px;")">@displaytimer</MudText>
                        </div>
                        <div style="display: flex; justify-content: center;">                        
                            <MudButton Disabled="@isTiming" OnClick="StopwatchTiming" Class="toolButtons" Variant="Variant.Outlined" Color="MudBlazor.Color.Secondary" >
                                <MudText Class="toolButtonsFont">Start</MudText>                                
                            </MudButton>      
                            <MudButton Disabled="@isStopped" OnClick="StopwatchStop" Class="toolButtons" Variant="Variant.Outlined" Color="MudBlazor.Color.Secondary" >
                                <MudText Class="toolButtonsFont">Stop</MudText>                                
                            </MudButton>      
                        </div>
                        @if (LogStopwatch == true)
                        {
                            <div class="stopwatchLog" style="border-color: @widgetTextColor;">
                                @if (LogStopwatch == true)
                                {
                                    <MudTextField @bind-Value="swLog" ReadOnly="true" Variant="Variant.Text" Style="" DisableUnderLine="true" Lines="6" ></MudTextField>
                                }
                            </div>
                        }
                        @if (LogStopwatch == false)
                        {
                            <div class="stopwatchLog" style="border-color: @widgetColor;"></div>
                        }
                        <div class="converterButtonContainer">
                        @if (LogStopwatch == false)
                        {
                            <MudButton OnClick="ToggleLogStopwatch" Class="toolButtons" Variant="Variant.Outlined" Color="MudBlazor.Color.Secondary" >
                                <MudText Class="toolButtonsFont">Show Log</MudText>                                
                            </MudButton>                        
                        }
                        @if (LogStopwatch == true)
                        {
                            <MudButton OnClick="ToggleLogStopwatch" Class="toolButtons" Style="" Variant="Variant.Outlined" Color="MudBlazor.Color.Secondary" >
                                <MudText Class="toolButtonsFont">Hide Log</MudText>                                
                            </MudButton>  
                            <MudButton OnClick="ClearLogStopwatch" Class="toolButtons" Style="" Variant="Variant.Outlined" Color="MudBlazor.Color.Secondary" >
                                <MudText Class="toolButtonsFont">Clear Log</MudText>                                
                            </MudButton>                          
                        }
                        </div>
                </div>
                }
            }   
            @if (App_ColorPicker == true)
            {
                OpenColerPicker();
                @if (ColorPickerIsOpen == true)
                {
                <div class="@colorPickerClass" style="order: @widgetOrder[1]; background-color: @widgetColor;">
                    <div style="display: flex; justify-content: space-between;">
                        <MudText Color="@MudBlazor.Color.Secondary" Style="margin-top: 20px; margin-left: 20px; margin-right: 20px;">Color Picker</MudText>
                        <div style="margin: 2px;">
                        @if (!isExpandedColorPicker)
                        {
                            <MudTooltip Text="More" Color="@MudBlazor.Color.Primary" Placement="Placement.Top">
                                <MudIconButton OnClick="ExpandColorPicker" Icon="@Icons.TwoTone.AddCircleOutline"></MudIconButton>
                            </MudTooltip>
                        }
                        @if (isExpandedColorPicker)
                        {
                            <MudTooltip Text="Less" Color="@MudBlazor.Color.Primary" Placement="Placement.Top">
                                <MudIconButton OnClick="ExpandColorPicker" Icon="@Icons.TwoTone.RemoveCircleOutline"></MudIconButton>
                            </MudTooltip>
                        }
                        @if (home == true)
                        {
                            <MudTooltip Text="Close" Color="@MudBlazor.Color.Primary" Placement="Placement.Top">
                                <MudIconButton OnClick="CloseColerPicker" Icon="@Icons.Material.Filled.Close"></MudIconButton>                            
                            </MudTooltip>
                        }   
                        </div>
                    </div> 
                    <div style="display: flex; justify-content: start; margin-bottom: 10px;">
                    <MudColorPicker Value="_pickerColor" ValueChanged="UpdateSelectedColor" Class="ColorPicker" DisableToolbar="false" DisableAlpha="true" DisableColorField="false" DisablePreview="true" DisableSliders="false" DisableInputs="true" DisableModeSwitch="false" ColorPickerMode="ColorPickerMode.RGB" PickerVariant="PickerVariant.Static" />
                        <div style="margin-bottom: 10px;">
                        <MudList Clickable="true" SelectedItemChanged="ChangeSelectedColor">
                        <MudListItem Style="max-width: 205px" OnClick="firstColorTrue">
                            @if (isFirstColor) {
                            <div class="colorPreviewActive" style="@($"background-color:{firstColor};")"></div>
                            }
                            else {
                            <div class="colorPreview" style="@($"background-color:{firstColor};")"></div>
                            }
                        </MudListItem>
                        <MudTextField @bind-Value="firstColorConverted" Style="margin-right: 7px; margin-bottom: 7px; max-width: 205px" Adornment="Adornment.End" AdornmentIcon="@Icons.Outlined.ChangeCircle" AdornmentAriaLabel="Refresh" OnAdornmentClick="HEXColorEntered" ReadOnly="false" Variant="Variant.Outlined"/>
@*                        <MudListItem Style="max-width: 205px" OnClick="secondColorTrue">
                            @if (isSecondColor) {
                            <div class="colorPreviewActive" style="@($"background-color:{secondColor};")"></div>
                            }
                            else {
                            <div class="colorPreview" style="@($"background-color:{secondColor};")"></div>
                            }
                        </MudListItem>
                        <MudTextField @bind-Value="secondColorConverted" Style="margin-right: 7px; max-width: 205px;" Adornment="Adornment.End" AdornmentIcon="@Icons.Outlined.ChangeCircle" OnAdornmentClick="HEXColorEntered" ReadOnly="false" Variant="Variant.Outlined"/>
*@                    </MudList>
                            <MudText Style="margin-top: 15px;">Recent Colors</MudText>
                            <div class="recentColors">         
                                <button @onclick="() => setPickedColor(0)" class="colorPreviewSmall" style="background-color: @recentColor[0]"></button>
                                <button @onclick="() => setPickedColor(1)" class="colorPreviewSmall" style="background-color: @recentColor[1]"></button>
                                <button @onclick="() => setPickedColor(2)" class="colorPreviewSmall" style="background-color: @recentColor[2]"></button>
                                <button @onclick="() => setPickedColor(3)" class="colorPreviewSmall" style="background-color: @recentColor[3]"></button>
                                <button @onclick="() => setPickedColor(4)" class="colorPreviewSmall" style="background-color: @recentColor[4]"></button>
                                <button @onclick="() => setPickedColor(5)" class="colorPreviewSmall" style="background-color: @recentColor[5]"></button>
                                <button @onclick="() => setPickedColor(6)" class="colorPreviewSmall" style="background-color: @recentColor[6]"></button>
                                <button @onclick="() => setPickedColor(7)" class="colorPreviewSmall" style="background-color: @recentColor[7]"></button>
                                <button @onclick="() => setPickedColor(8)" class="colorPreviewSmall" style="background-color: @recentColor[8]"></button>
                                <button @onclick="() => setPickedColor(9)" class="colorPreviewSmall" style="background-color: @recentColor[9]"></button>
                                <button @onclick="() => setPickedColor(10)" class="colorPreviewSmall" style="background-color: @recentColor[10]"></button>
                                <button @onclick="() => setPickedColor(11)" class="colorPreviewSmall" style="background-color: @recentColor[11]"></button>
                                <button @onclick="() => setPickedColor(12)" class="colorPreviewSmall" style="background-color: @recentColor[12]"></button>
                                <button @onclick="() => setPickedColor(13)" class="colorPreviewSmall" style="background-color: @recentColor[13]"></button>
                                <button @onclick="() => setPickedColor(14)" class="colorPreviewSmall" style="background-color: @recentColor[14]"></button>
                                <button @onclick="() => setPickedColor(15)" class="colorPreviewSmall" style="background-color: @recentColor[15]"></button>
                                <button @onclick="() => setPickedColor(16)" class="colorPreviewSmall" style="background-color: @recentColor[16]"></button>
                                <button @onclick="() => setPickedColor(17)" class="colorPreviewSmall" style="background-color: @recentColor[17]"></button>
                                <button @onclick="() => setPickedColor(18)" class="colorPreviewSmall" style="background-color: @recentColor[18]"></button>
                                <button @onclick="() => setPickedColor(19)" class="colorPreviewSmall" style="background-color: @recentColor[19]"></button>
                                <button @onclick="() => setPickedColor(20)" class="colorPreviewSmall" style="background-color: @recentColor[20]"></button>
                                <button @onclick="() => setPickedColor(21)" class="colorPreviewSmall" style="background-color: @recentColor[21]"></button>
                                <button @onclick="() => setPickedColor(22)" class="colorPreviewSmall" style="background-color: @recentColor[22]"></button>
                                <button @onclick="() => setPickedColor(23)" class="colorPreviewSmall" style="background-color: @recentColor[23]"></button>
                                <button @onclick="() => setPickedColor(24)" class="colorPreviewSmall" style="background-color: @recentColor[24]"></button>
                                <button @onclick="() => setPickedColor(25)" class="colorPreviewSmall" style="background-color: @recentColor[25]"></button>
                                <button @onclick="() => setPickedColor(26)" class="colorPreviewSmall" style="background-color: @recentColor[26]"></button>
                                <button @onclick="() => setPickedColor(27)" class="colorPreviewSmall" style="background-color: @recentColor[27]"></button>
                                <button @onclick="() => setPickedColor(28)" class="colorPreviewSmall" style="background-color: @recentColor[28]"></button>
                                <button @onclick="() => setPickedColor(29)" class="colorPreviewSmall" style="background-color: @recentColor[29]"></button>
                                <button @onclick="() => setPickedColor(30)" class="colorPreviewSmall" style="background-color: @recentColor[30]"></button>
                                <button @onclick="() => setPickedColor(31)" class="colorPreviewSmall" style="background-color: @recentColor[31]"></button>     
                                <button @onclick="() => setPickedColor(32)" class="colorPreviewSmall" style="background-color: @recentColor[32]"></button>
                                <button @onclick="() => setPickedColor(33)" class="colorPreviewSmall" style="background-color: @recentColor[33]"></button>
                                <button @onclick="() => setPickedColor(34)" class="colorPreviewSmall" style="background-color: @recentColor[34]"></button>
                                <button @onclick="() => setPickedColor(35)" class="colorPreviewSmall" style="background-color: @recentColor[35]"></button>
                                <button @onclick="() => setPickedColor(36)" class="colorPreviewSmall" style="background-color: @recentColor[36]"></button>
                                <button @onclick="() => setPickedColor(37)" class="colorPreviewSmall" style="background-color: @recentColor[37]"></button>
                                <button @onclick="() => setPickedColor(38)" class="colorPreviewSmall" style="background-color: @recentColor[38]"></button>
                                <button @onclick="() => setPickedColor(39)" class="colorPreviewSmall" style="background-color: @recentColor[39]"></button>   
                            </div>
                    </div>
                    @if (isExpandedColorPicker == true)
                    {
                    <div style="margin-bottom: 10px;">
                        <div style="max-width: 200px;">
                        <MudText>Customize Theme</MudText>
                            <div class="customizeTheme">
                                <div style="justify-content: space-between; display: flex;">
                                    <MudButton OnClick="SetBackgroundColor" Style="margin-top: 2px; max-width: 200px; max-height: 30px;">Set Background Color</MudButton> 
                                    <div class="colorPreviewSmall" style="background-color: @customBackColor; margin: 5px;"></div>
                                </div>
                                <div style="justify-content: space-between; display: flex;">
                                    <MudButton OnClick="SetAccentColor" Style="margin-top: 2px; max-width: 200px; max-height: 30px;">Set Accent Color</MudButton>
                                    <div class="colorPreviewSmall" style="background-color: @customAccentColor; margin: 5px;"></div>
                                </div>
                                <div style="justify-content: space-between; display: flex;">
                                    <MudButton OnClick="SetAppBarColor" Style="margin-top: 2px; max-width: 200px; max-height: 30px;">Set AppBar Color</MudButton>
                                    <div class="colorPreviewSmall" style="background-color: @customAppBarColor; margin: 5px;"></div>
                                </div>
                                <div style="justify-content: space-between; display: flex;">
                                    <MudButton OnClick="SetWidgetColor" Style="margin-top: 2px; max-width: 200px; max-height: 30px;">Set Tool Color</MudButton>
                                    <div class="colorPreviewSmall" style="background-color: @customWidgetColor; margin: 5px;"></div>
                                </div>
                                @*
                                <div style="justify-content: space-between; display: flex;">
                                    <MudButton OnClick="SetTextColor" Style="margin-top: 2px; max-width: 200px; max-height: 30px;">Set Text Color</MudButton>
                                    <div class="colorPreviewSmall" style="background-color: @customTextColor"></div>
                                </div>
                                *@
                            </div>
                        </div>
                    </div>
                    }
                    </div>
                </div>
                }
            }
            @if (App_Calculator == true)
            {
                OpenCalculator();
                @if (CalculatorIsOpen == true)
                {
                <div class="@calculatorClass" style="order: @widgetOrder[0]; background-color: @widgetColor;">
                    <div style="display: flex; justify-content: space-between;">
                        <MudText Color="@MudBlazor.Color.Secondary" Style="margin-top: 20px; margin-left: 20px; margin-right: 20px;">Calculator</MudText>
                        <div style="margin: 2px;">
                        @if (!isExpandedCalculator)
                        {
                            <MudTooltip Text="More" Color="@MudBlazor.Color.Primary" Placement="Placement.Top">
                                <MudIconButton OnClick="ExpandCalculator" Icon="@Icons.TwoTone.AddCircleOutline"></MudIconButton>
                            </MudTooltip>
                        }
                        @if (isExpandedCalculator)
                        {
                            <MudTooltip Text="Less" Color="@MudBlazor.Color.Primary" Placement="Placement.Top">
                                <MudIconButton OnClick="ExpandCalculator" Icon="@Icons.TwoTone.RemoveCircleOutline"></MudIconButton>
                            </MudTooltip>
                        }
                        @if (home == true)
                        {
                            <MudTooltip Text="Close" Color="@MudBlazor.Color.Primary" Placement="Placement.Top">
                                <MudIconButton OnClick="CloseCalculator" Icon="@Icons.Material.Filled.Close"></MudIconButton>                            
                            </MudTooltip>
                        }   
                        </div>
                    </div> 
                    <div style="display: flex; justify-content: start;">                        
                        <div>
                            <div style="display: flex;">
                            <MudTextField @bind-Value="App_Calculator_Display" AdornmentColor="@MudBlazor.Color.Secondary" ReadOnly="true" Variant="Variant.Outlined" Style="margin-left: 5px; margin-right: 5px; margin-bottom: 5px; max-width: 390px;" ></MudTextField>
                            </div>
                            <div class="calcMain" style="">
                                <MudButton OnClick="App_Calculator_Clear"  Class="MudButtonCalculator"><MudText Color="MudBlazor.Color.Secondary" Style="font-size: 20px;">C</MudText></MudButton>
                                <MudButton OnClick="App_Calculator_ClearEntry"  Class="MudButtonCalculator"><MudText Color="@MudBlazor.Color.Secondary" Style="font-size: 20px;" Class="Text">CE</MudText></MudButton>
                                <MudButton OnClick="Calc_Button_Backspace"  Class="MudButtonCalculator"><MudText Color="@MudBlazor.Color.Secondary" Style="font-size: 20px;" Class="Text">←</MudText></MudButton>
                                <MudButton OnClick="Division"  Class="MudButtonCalculator"><MudText Color="@MudBlazor.Color.Secondary" Style="font-size: 20px;" Class="Text">÷</MudText></MudButton>
                                <MudButton OnClick='() => Calc_Button_Number("7")'  Class="MudButtonCalculator"><MudText Color="@MudBlazor.Color.Secondary" Style="font-size: 20px;" Class="Text">7</MudText></MudButton>
                                <MudButton OnClick='() => Calc_Button_Number("8")'  Class="MudButtonCalculator"><MudText Color="@MudBlazor.Color.Secondary" Style="font-size: 20px;" Class="Text">8</MudText></MudButton>
                                <MudButton OnClick='() => Calc_Button_Number("9")'  Class="MudButtonCalculator"><MudText Color="@MudBlazor.Color.Secondary" Style="font-size: 20px;" Class="Text">9</MudText></MudButton>
                                <MudButton OnClick="Multiplication"  Class="MudButtonCalculator"><MudText Color="@MudBlazor.Color.Secondary" Style="font-size: 20px;" Class="Text">x</MudText></MudButton>
                                <MudButton OnClick='() => Calc_Button_Number("4")'  Class="MudButtonCalculator"><MudText Color="@MudBlazor.Color.Secondary" Style="font-size: 20px;" Class="Text">4</MudText></MudButton>
                                <MudButton OnClick='() => Calc_Button_Number("5")'  Class="MudButtonCalculator"><MudText Color="@MudBlazor.Color.Secondary" Style="font-size: 20px;" Class="Text">5</MudText></MudButton>
                                <MudButton OnClick='() => Calc_Button_Number("6")'  Class="MudButtonCalculator"><MudText Color="@MudBlazor.Color.Secondary" Style="font-size: 20px;" Class="Text">6</MudText></MudButton>
                                <MudButton OnClick="Addition"  Class="MudButtonCalculator"><MudText Color="@MudBlazor.Color.Secondary" Style="font-size: 20px;" Class="Text">+</MudText></MudButton>
                                <MudButton OnClick='() => Calc_Button_Number("1")'  Class="MudButtonCalculator"><MudText Color="@MudBlazor.Color.Secondary" Style="font-size: 20px;" Class="Text">1</MudText></MudButton>
                                <MudButton OnClick='() => Calc_Button_Number("2")'  Class="MudButtonCalculator"><MudText Color="@MudBlazor.Color.Secondary" Style="font-size: 20px;" Class="Text">2</MudText></MudButton>
                                <MudButton OnClick='() => Calc_Button_Number("3")'  Class="MudButtonCalculator"><MudText Color="@MudBlazor.Color.Secondary" Style="font-size: 20px;" Class="Text">3</MudText></MudButton>
                                <MudButton OnClick="Subtraction"  Class="MudButtonCalculator"><MudText Color="@MudBlazor.Color.Secondary" Style="font-size: 20px;" Class="Text">-</MudText></MudButton>
                                <MudButton OnClick="App_Calculator_PlusMinus"  Class="MudButtonCalculator"><MudText Color="@MudBlazor.Color.Secondary" Style="font-size: 20px;" Class="Text">±</MudText></MudButton>
                                <MudButton OnClick='() => Calc_Button_Number("0")'  Class="MudButtonCalculator"><MudText Color="@MudBlazor.Color.Secondary" Style="font-size: 20px;" Class="Text">0</MudText></MudButton>
                                <MudButton OnClick="App_Calculator_Decimal"  Class="MudButtonCalculator"><MudText Color="@MudBlazor.Color.Secondary" Style="font-size: 20px;" Class="Text">.</MudText></MudButton>
                                <MudButton OnClick="Equals"  Class="MudButtonCalculator"><MudText Color="@MudBlazor.Color.Secondary" Style="font-size: 20px;" Class="Text">=</MudText></MudButton>
                            </div>
                        </div>
                        @if (isExpandedCalculator)
                        {
                        <div class="calculatorExpanded">
                            <div class="calculatorLog" style="border-color: @widgetTextColor;">
                            <MudTextField @bind-Value="calcLog" Class="converterLogText" ReadOnly="true" Variant="Variant.Text" Style="" DisableUnderLine="true" Lines="12" ></MudTextField>
                            </div>
                            <MudButton OnClick="ClearLogCalc" Class="toolButtons" Variant="Variant.Outlined" Color="MudBlazor.Color.Secondary" >
                                <MudText Class="toolButtonsFont">Clear Log</MudText>                                
                            </MudButton>                    
                        </div>
                        }
                    </div>
                </div>
                }
            }
    }
    </div>
</div>

<MudDialog @bind-IsVisible="visible" OnBackdropClick="CountOpenWidgets" Options="dialogOptions">
    <TitleContent>
        Manage Tools
    </TitleContent>
    <DialogContent>
        <MudText>Utilities</MudText>
        <MudCheckBox @bind-Checked="@App_Calculator" Label="Calculator"></MudCheckBox>
        <div class="hideOnMobile"><MudCheckBox @bind-Checked="@App_ColorPicker" Label="Color Picker"></MudCheckBox></div>
        <MudCheckBox @bind-Checked="@App_Stopwatch" Label="Stopwatch"></MudCheckBox>
        <MudCheckBox @bind-Checked="@App_Timer" Label="Timer"></MudCheckBox>
        <MudCheckBox @bind-Checked="@App_Notes" Label="Notes"></MudCheckBox>
        <div class="hideOnMobile"><MudCheckBox @bind-Checked="@App_Calendar" Label="Calendar"></MudCheckBox></div>
        <div class="hideOnMobile"><MudCheckBox @bind-Checked="@App_GraphBuilder" Label="Graph Builder"></MudCheckBox></div>
        <MudText>Converters</MudText>
        <MudCheckBox @bind-Checked="@App_TemperatureConverter" Label="Temperature Converter"></MudCheckBox>
        <MudCheckBox @bind-Checked="@App_VolumeConverter" Label="Volume Converter"></MudCheckBox>
        <MudCheckBox @bind-Checked="@App_LengthConverter" Label="Length Converter"></MudCheckBox>
        <MudCheckBox @bind-Checked="@App_MassConverter" Label="Mass Converter"></MudCheckBox>
    </DialogContent>
    <DialogActions>
        @if (App_Calculator == true && App_TemperatureConverter == true && App_ColorPicker == true && App_Stopwatch == true &&  App_Timer == true && App_VolumeConverter == true && App_Notes == true && App_LengthConverter == true && App_MassConverter == true && App_Calendar == true && App_GraphBuilder == true)
        {
        <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Primary" OnClick="AllAppsFalse" Style="width:140px;">Deselect All</MudButton>
        }
        else {
        <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Primary" OnClick="App_SelectAll" Style="width:140px;">Select All</MudButton>
        }
        <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Primary" OnClick="Submit" Class="px-10">Close</MudButton>
    </DialogActions>
</MudDialog>
<MudMessageBox @ref="timerNotificationMSG" YesText="Ok">
    <MessageContent>
        <MudText Style="font-family:'Ubuntu', sans-serif; font-weight: bold; font-size: 20px;"> Timer Finished </MudText>
        @if (SoundOn)
        {
        <audio autoplay><source src="/Audio/TimerSound.mp3" /></audio>
        }
    </MessageContent>
</MudMessageBox>

@code {
    protected override void OnInitialized()
    {
            App_SelectAll();
            SetTheme("Dark");
    }
    private bool visible;
    private void OpenDialog() {
        visible = true;
        CountOpenWidgets();
    }
    private void Submit() {
        visible = false;
        CountOpenWidgets();
    }
    private DialogOptions dialogOptions = new() { FullWidth = true };

    string className = "MultipleWidgetsDiv";
    //Apps
    //Calculator
    private bool App_Calculator = false;
    private bool isExpandedCalculator = false;
    string calculatorClass = "MudPaperSmallWidget";
    string buttonValue = "0";
    double App_Calculator_Value = 0;
    double App_Calculator_Value2 = 0;
    double negateTemp = 0;
    string App_Calculator_Display = "0";
    string App_Calculator_FirstNumber = "0";
    string App_Calculator_SecondNumber = "0";
    string App_Calculator_Mode = "";
    string calcLog = "";
    string sign = "";
    string solution = "";
    int secondNumberLength = 0;
    private void Addition()
    {
        if (App_Calculator_Display.Contains('+') || App_Calculator_Display.Contains("- ") || App_Calculator_Display.Contains('*') || App_Calculator_Display.Contains('÷'))
        {
            Equals(); 
        }
        sign = " + ";
        App_Calculator_Mode = "Addition";
        App_Calculator_Value = Double.Parse(App_Calculator_FirstNumber);
        App_Calculator_Display = App_Calculator_Value + " + ";
    }
    private void Subtraction()
    {
        if (App_Calculator_Display.Contains('+') || App_Calculator_Display.Contains("- ") || App_Calculator_Display.Contains('*') || App_Calculator_Display.Contains('÷'))
        {
            Equals(); 
        }
        sign = " - ";
        App_Calculator_Mode = "Subtraction";
        App_Calculator_Value = Double.Parse(App_Calculator_FirstNumber);
        App_Calculator_Display = App_Calculator_Value + " - ";
    }
    private void Multiplication()
    {
        if (App_Calculator_Display.Contains('+') || App_Calculator_Display.Contains("- ") || App_Calculator_Display.Contains('*') || App_Calculator_Display.Contains('÷'))
        {
            Equals(); 
        }
        sign = " * ";
        App_Calculator_Mode = "Multiplication";
        App_Calculator_Value = Double.Parse(App_Calculator_FirstNumber);
        App_Calculator_Display = App_Calculator_Value + " * ";
    }
    private void Division()
    {
        if (App_Calculator_Display.Contains('+') || App_Calculator_Display.Contains("- ") || App_Calculator_Display.Contains('*') || App_Calculator_Display.Contains('÷'))
        {
            Equals(); 
        }
        sign = " ÷ ";
        App_Calculator_Mode = "Division";
        App_Calculator_Value = Double.Parse(App_Calculator_FirstNumber);
        App_Calculator_Display = App_Calculator_Value + " ÷ ";
    }
    private void Equals()
    {
        AddToLogCalc();
        if (App_Calculator_Mode == "Addition")
        {
            App_Calculator_Value = Double.Parse(App_Calculator_FirstNumber);
            App_Calculator_Value2 = Double.Parse(App_Calculator_SecondNumber);
            App_Calculator_Value = App_Calculator_Value + App_Calculator_Value2;
            App_Calculator_Display = App_Calculator_Value.ToString();
            App_Calculator_FirstNumber = App_Calculator_Value.ToString();
            App_Calculator_SecondNumber = "0";
        }
        if (App_Calculator_Mode == "Subtraction")
        {
            App_Calculator_Value = Double.Parse(App_Calculator_FirstNumber);
            App_Calculator_Value2 = Double.Parse(App_Calculator_SecondNumber);
            App_Calculator_Value = App_Calculator_Value - App_Calculator_Value2;
            App_Calculator_Display = App_Calculator_Value.ToString();
            App_Calculator_FirstNumber = App_Calculator_Value.ToString();
            App_Calculator_SecondNumber = "0";
        }
        if (App_Calculator_Mode == "Multiplication")
        {
            App_Calculator_Value = Double.Parse(App_Calculator_FirstNumber);
            App_Calculator_Value2 = Double.Parse(App_Calculator_SecondNumber);
            App_Calculator_Value = App_Calculator_Value * App_Calculator_Value2;
            App_Calculator_Display = App_Calculator_Value.ToString();
            App_Calculator_FirstNumber = App_Calculator_Value.ToString();
            App_Calculator_SecondNumber = "0";
        }
        if (App_Calculator_Mode == "Division")
        {
            App_Calculator_Value = Double.Parse(App_Calculator_FirstNumber);
            App_Calculator_Value2 = Double.Parse(App_Calculator_SecondNumber);
            App_Calculator_Value = App_Calculator_Value / App_Calculator_Value2;
            App_Calculator_Display = App_Calculator_Value.ToString();
            App_Calculator_FirstNumber = App_Calculator_Value.ToString();
            App_Calculator_SecondNumber = "0";
        }
        solution = App_Calculator_Display;
        AddToLogCalcSolution();
    }
    private void App_Calculator_Clear()
    {
        App_Calculator_SecondNumber = "0";
        App_Calculator_FirstNumber = "0";   
        App_Calculator_Display = "0";   
        App_Calculator_Mode = "";
        App_Calculator_Value = 0;
        App_Calculator_Value2 = 0;
        negateTemp = 0;
    }
    private void App_Calculator_ClearEntry()
    {
        if (App_Calculator_Display.Contains('+') || App_Calculator_Display.Contains("- ") || App_Calculator_Display.Contains('*') || App_Calculator_Display.Contains('÷'))
        {
            if (App_Calculator_SecondNumber != "0")
            {
                secondNumberLength = App_Calculator_SecondNumber.Length;
                App_Calculator_Display = App_Calculator_Display.Remove(App_Calculator_Display.Length - secondNumberLength);
                App_Calculator_SecondNumber = "0";
                App_Calculator_Value2 = 0;
            }
        }
        else 
        {
            App_Calculator_Display = "0";
            App_Calculator_FirstNumber = "0";
            App_Calculator_Value = 0;
        }
    }
    private void App_Calculator_Decimal()
    {
        if (App_Calculator_Display.Contains('+') || App_Calculator_Display.Contains("- ") || App_Calculator_Display.Contains('*') || App_Calculator_Display.Contains('÷'))
        {
            if (!App_Calculator_SecondNumber.Contains('.'))
            {
                App_Calculator_SecondNumber = App_Calculator_SecondNumber + ".";
                App_Calculator_Display = App_Calculator_Display + ".";
            }
        }
        else 
        {
            if (!App_Calculator_FirstNumber.Contains('.')) {
                App_Calculator_FirstNumber = App_Calculator_FirstNumber + ".";
                App_Calculator_Display = App_Calculator_Display + "."; 
            }
        }
    }
    private void App_Calculator_PlusMinus()
    {
        if (App_Calculator_Display.Contains('+') || App_Calculator_Display.Contains("- ") || App_Calculator_Display.Contains('*') || App_Calculator_Display.Contains('÷'))
        {
            secondNumberLength = App_Calculator_SecondNumber.Length;
            if (App_Calculator_SecondNumber.Contains('-') == false)
            {
                if (App_Calculator_SecondNumber == "0")
                {
                    App_Calculator_Display = App_Calculator_Display + "-";
                    App_Calculator_SecondNumber = "-0";
                }
                else if (App_Calculator_SecondNumber == "0.")
                {
                    App_Calculator_Display = App_Calculator_Display.Remove(App_Calculator_Display.Length - 1);
                    App_Calculator_Display = App_Calculator_Display + "-.";
                    App_Calculator_SecondNumber = "-0.";
                }
                else
                {
                    App_Calculator_Display = App_Calculator_Display.Remove(App_Calculator_Display.Length - secondNumberLength);
                    negateTemp = Double.Parse(App_Calculator_SecondNumber);
                    negateTemp = negateTemp * -1;
                    App_Calculator_SecondNumber = negateTemp.ToString();
                    App_Calculator_Display = App_Calculator_Display + App_Calculator_SecondNumber;
                }
            }
            else if (App_Calculator_SecondNumber.Contains('-') == true)
            {
                if (App_Calculator_SecondNumber == "-0")
                {
                    App_Calculator_Display = App_Calculator_Display.Remove(App_Calculator_Display.Length - 1);
                    App_Calculator_SecondNumber = "0";
                }
                else if (App_Calculator_SecondNumber.Contains("-0.") == true)
                {
                    App_Calculator_SecondNumber = App_Calculator_SecondNumber.Replace("-.", string.Empty);
                    App_Calculator_Display = App_Calculator_Display.Replace(" -.", " .");
                    App_Calculator_SecondNumber = "0.";
                }
                else
                {
                    App_Calculator_Display = App_Calculator_Display.Remove(App_Calculator_Display.Length - secondNumberLength);
                    App_Calculator_SecondNumber = App_Calculator_SecondNumber.Replace("-", string.Empty);
                    negateTemp = Double.Parse(App_Calculator_SecondNumber);
                    if (App_Calculator_SecondNumber == "")
                    {
                        App_Calculator_SecondNumber = "0";
                    }
                    App_Calculator_Display = App_Calculator_Display + App_Calculator_SecondNumber;
                }
            }
        }
        else
        {
            if (App_Calculator_FirstNumber.Contains('-') == false)
            {
                negateTemp = Double.Parse(App_Calculator_FirstNumber);
                negateTemp = negateTemp * -1;
                App_Calculator_FirstNumber = negateTemp.ToString();
                App_Calculator_Display = App_Calculator_FirstNumber;
                if (App_Calculator_Display == "-0")
                {
                    App_Calculator_Display = "-";
                }
            }
            else if (App_Calculator_FirstNumber.Contains('-') == true)
            {
                App_Calculator_FirstNumber = App_Calculator_FirstNumber.Replace("-", string.Empty);
                App_Calculator_Display = App_Calculator_FirstNumber;
                if (App_Calculator_FirstNumber == "")
                {
                    App_Calculator_FirstNumber = "0";
                    App_Calculator_Display = App_Calculator_FirstNumber;
                }
                negateTemp = 0;
            }
        }
    }
    private void Calc_Button_Backspace()
    {
        if (App_Calculator_Display.Contains('+') || App_Calculator_Display.Contains("- ") || App_Calculator_Display.Contains('*') || App_Calculator_Display.Contains('÷'))
        {
            if (App_Calculator_SecondNumber == "0")
            {
                App_Calculator_Display = App_Calculator_Display.Remove(App_Calculator_Display.Length - 2);
                App_Calculator_Mode = "";
            }
            if (App_Calculator_SecondNumber.Length > 1)
            {
                App_Calculator_SecondNumber = App_Calculator_SecondNumber.Remove(App_Calculator_SecondNumber.Length - 1);
                App_Calculator_Display = App_Calculator_Display.Remove(App_Calculator_Display.Length - 1);
                if (App_Calculator_SecondNumber == "")
                {
                    App_Calculator_SecondNumber = "0";
                }
            }
            else {
                App_Calculator_Display = App_Calculator_Display.Remove(App_Calculator_Display.Length - 1);
                App_Calculator_SecondNumber = "0";
            }
        }
        else
        {
            if (App_Calculator_Display.Length > 1 && App_Calculator_FirstNumber.Length > 1)
            {
                App_Calculator_FirstNumber = App_Calculator_FirstNumber.Remove(App_Calculator_FirstNumber.Length - 1);
                App_Calculator_Display = App_Calculator_Display.Remove(App_Calculator_Display.Length - 1);
            }
            else
            {
                App_Calculator_FirstNumber = "0";
                App_Calculator_Display = "0";
            }
        }
        App_Calculator_Value = 0;
        App_Calculator_Value2 = 0;
    }
    private void Calc_Button_Number(string buttonValue)
    {
        if (App_Calculator_Display.Contains('+') || App_Calculator_Display.Contains("- ") || App_Calculator_Display.Contains('*') || App_Calculator_Display.Contains('÷'))
        {
            if (App_Calculator_SecondNumber == "0")
            {
                App_Calculator_SecondNumber = "";
            }
            if (App_Calculator_SecondNumber == "-0")
            {
                App_Calculator_SecondNumber = buttonValue;
                App_Calculator_Display = App_Calculator_Display.Remove(App_Calculator_Display.Length - 1);
                App_Calculator_Display = App_Calculator_Display + App_Calculator_SecondNumber;
            }
            else
            {
                App_Calculator_Value2 = Double.Parse(buttonValue);
                App_Calculator_Display = App_Calculator_Display + App_Calculator_Value2.ToString();
                App_Calculator_SecondNumber = App_Calculator_SecondNumber + App_Calculator_Value2.ToString();
            }
        }
        else
        {
            if (App_Calculator_Display == "0")
            {
                App_Calculator_Value = Double.Parse(buttonValue);
                App_Calculator_Display = App_Calculator_Value.ToString();
                App_Calculator_FirstNumber = App_Calculator_Display;
            }
            else
            {
                App_Calculator_Value = Double.Parse(buttonValue);
                App_Calculator_Display = App_Calculator_Display + App_Calculator_Value.ToString();
                App_Calculator_FirstNumber = App_Calculator_Display;
            }
        }
    }
    private void ExpandCalculator()
    {
        if (isExpandedCalculator == false)
        {
            calculatorClass = "MudPaperSmallWidgetExpanded";
            isExpandedCalculator = true;
        }
        else if (isExpandedCalculator == true)
        {
            calculatorClass = "MudPaperSmallWidget";
            isExpandedCalculator = false;
        }
    }
    private void AddToLogCalc()
    {
        calcLog = calcLog + App_Calculator_FirstNumber + sign + App_Calculator_SecondNumber + " = " + "\n";
    }
    private void AddToLogCalcSolution()
    {
        calcLog = calcLog + solution + "\n" + "\n";
    }
    private void ClearLogCalc()
    {
        calcLog = "";
    }
    //Temperature Converter
    private bool App_TemperatureConverter = false;
    private bool LogTemp = false;
    double App_TemperatureConverter_Value1 = 0;
    double App_TemperatureConverter_Value2 = 0;
    private string TempValue1 { get; set; } = "Fahrenheit";
    private string TempValue2 { get; set; } = "Celsius";
    string tempLog = "";
    private void ConvertTemp()
    {
        if (TempValue1 == "Fahrenheit" && TempValue2 == "Fahrenheit")
        {
            App_TemperatureConverter_Value2 = App_TemperatureConverter_Value1;
        }
        if (TempValue1 == "Fahrenheit" && TempValue2 == "Celsius")
        {
            App_TemperatureConverter_Value2 = App_TemperatureConverter_Value1;
            App_TemperatureConverter_Value2 = App_TemperatureConverter_Value2 - 32;
            App_TemperatureConverter_Value2 = App_TemperatureConverter_Value2 * 5 / 9;
        }
        if (TempValue1 == "Fahrenheit" && TempValue2 == "Kelvin")
        {
            App_TemperatureConverter_Value2 = App_TemperatureConverter_Value1;
            App_TemperatureConverter_Value2 = App_TemperatureConverter_Value2 - 32;
            App_TemperatureConverter_Value2 = App_TemperatureConverter_Value2 * 5 / 9;
            App_TemperatureConverter_Value2 = App_TemperatureConverter_Value2 + 273.15;
        }
        if (TempValue1 == "Celsius" && TempValue2 == "Fahrenheit")
        {
            App_TemperatureConverter_Value2 = App_TemperatureConverter_Value1;
            App_TemperatureConverter_Value2 = App_TemperatureConverter_Value2 * 9 / 5;
            App_TemperatureConverter_Value2 = App_TemperatureConverter_Value2 + 32;
        }
        if (TempValue1 == "Celsius" && TempValue2 == "Celsius")
        {
            App_TemperatureConverter_Value2 = App_TemperatureConverter_Value1;
        }
        if (TempValue1 == "Celsius" && TempValue2 == "Kelvin")
        {
            App_TemperatureConverter_Value2 = App_TemperatureConverter_Value1;
            App_TemperatureConverter_Value2 = App_TemperatureConverter_Value2 + 273.15;
        }
        if (TempValue1 == "Kelvin" && TempValue2 == "Fahrenheit")
        {
            App_TemperatureConverter_Value2 = App_TemperatureConverter_Value1;
            App_TemperatureConverter_Value2 = App_TemperatureConverter_Value2 - 273.15;
            App_TemperatureConverter_Value2 = App_TemperatureConverter_Value2 * 9 / 5;
            App_TemperatureConverter_Value2 = App_TemperatureConverter_Value2 + 32;
        }
        if (TempValue1 == "Kelvin" && TempValue2 == "Celsius")
        {
            App_TemperatureConverter_Value2 = App_TemperatureConverter_Value1;
            App_TemperatureConverter_Value2 = App_TemperatureConverter_Value2 - 273.15;
        }
        if (TempValue1 == "Kelvin" && TempValue2 == "Kelvin")
        {
            App_TemperatureConverter_Value2 = App_TemperatureConverter_Value1;
        }
        AddToLogTemp();
    }
    private void AddToLogTemp()
    {
        tempLog = tempLog + App_TemperatureConverter_Value1 + " " + TempValue1 + " " + " = " + App_TemperatureConverter_Value2 + " " + TempValue2 + "\n";
    }
    private void ToggleLogTemp()
    {
        if (LogTemp == false)
        {
            LogTemp = true;
        }
        else if (LogTemp == true)
        {
            LogTemp = false;
        }
    }
    private void ClearLogTemp()
    {
        tempLog = "";
    }
    //Volume Converter
    private bool App_VolumeConverter = false;
    private bool LogVolume = false;
    double App_VolumeConverter_Value1 = 0;
    double App_VolumeConverter_Value2 = 0;
    private string VolumeValue1 { get; set; } = "US Gallon";
    private string VolumeValue2 { get; set; } = "US Quart";
    string volumeLog = "";
    private void ConvertVolume()
    {
        if (VolumeValue1 == "US Gallon" && VolumeValue2 == "US Gallon") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1;
        }
        if (VolumeValue1 == "US Gallon" && VolumeValue2 == "US Quart") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1 * 4;
        }
        if (VolumeValue1 == "US Gallon" && VolumeValue2 == "US Pint") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1 * 8;
        }
        if (VolumeValue1 == "US Gallon" && VolumeValue2 == "US Cup") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1 * 15.773;
        }
        if (VolumeValue1 == "US Gallon" && VolumeValue2 == "Liter") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1 * 3.785;
        }
        if (VolumeValue1 == "US Gallon" && VolumeValue2 == "Milliliter") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1 * 3785;
        }
        if (VolumeValue1 == "US Quart" && VolumeValue2 == "US Gallon") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1 / 4;
        }
        if (VolumeValue1 == "US Quart" && VolumeValue2 == "US Quart") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1;
        }
        if (VolumeValue1 == "US Quart" && VolumeValue2 == "US Pint") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1 * 2;
        }
        if (VolumeValue1 == "US Quart" && VolumeValue2 == "US Cup") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1 * 3.943;
        }
        if (VolumeValue1 == "US Quart" && VolumeValue2 == "Liter") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1 / 1.057;
        }
        if (VolumeValue1 == "US Quart" && VolumeValue2 == "Milliliter") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1 * 946.4;
        }
        if (VolumeValue1 == "US Pint" && VolumeValue2 == "US Gallon") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1 / 8;
        }
        if (VolumeValue1 == "US Pint" && VolumeValue2 == "US Quart") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1 / 2;
        }
        if (VolumeValue1 == "US Pint" && VolumeValue2 == "US Pint") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1;
        }
        if (VolumeValue1 == "US Pint" && VolumeValue2 == "US Cup") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1 * 1.972;
        }
        if (VolumeValue1 == "US Pint" && VolumeValue2 == "Liter") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1 / 2.113;
        }
        if (VolumeValue1 == "US Pint" && VolumeValue2 == "Milliliter") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1 * 473.2;
        }
        if (VolumeValue1 == "US Cup" && VolumeValue2 == "US Gallon") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1 / 15.772;
        }
        if (VolumeValue1 == "US Cup" && VolumeValue2 == "US Quart") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1 / 3.943;
        }
        if (VolumeValue1 == "US Cup" && VolumeValue2 == "US Pint") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1 / 1.972;
        }
        if (VolumeValue1 == "US Cup" && VolumeValue2 == "US Cup") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1;
        }
        if (VolumeValue1 == "US Cup" && VolumeValue2 == "Liter") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1 / 4.167;
        }
        if (VolumeValue1 == "US Cup" && VolumeValue2 == "Milliliter") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1 * 240;
        }
        if (VolumeValue1 == "Liter" && VolumeValue2 == "US Gallon") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1 / 3.785;
        }
        if (VolumeValue1 == "Liter" && VolumeValue2 == "US Quart") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1 * 1.057;
        }
        if (VolumeValue1 == "Liter" && VolumeValue2 == "US Pint") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1 * 2.113;
        }
        if (VolumeValue1 == "Liter" && VolumeValue2 == "US Cup") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1 * 4.167;
        }
        if (VolumeValue1 == "Liter" && VolumeValue2 == "Liter") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1;
        }
        if (VolumeValue1 == "Liter" && VolumeValue2 == "Milliliter") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1 * 1000;
        }
        if (VolumeValue1 == "Milliliter" && VolumeValue2 == "US Gallon") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1 / 3785;
        }
        if (VolumeValue1 == "Milliliter" && VolumeValue2 == "US Quart") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1 / 946.4;
        }
        if (VolumeValue1 == "Milliliter" && VolumeValue2 == "US Pint") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1 / 473.2;
        }
        if (VolumeValue1 == "Milliliter" && VolumeValue2 == "US Cup") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1 / 240;
        }
        if (VolumeValue1 == "Milliliter" && VolumeValue2 == "Liter") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1 / 1000;
        }
        if (VolumeValue1 == "Milliliter" && VolumeValue2 == "Milliliter") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1;
        }
        AddToLogVolume();
    }
    private void AddToLogVolume()
    {
        volumeLog = volumeLog + App_VolumeConverter_Value1 + " " + VolumeValue1 + " " + " = " + App_VolumeConverter_Value2 + " " + VolumeValue2 + "\n";
    }
    private void ToggleLogVolume()
    {
        if (LogVolume == false)
        {
            LogVolume = true;
        }
        else if (LogVolume == true)
        {
            LogVolume = false;
        }
    }
    private void ClearLogVolume()
    {
        volumeLog = "";
    }
    //Stopwatch
    private bool App_Stopwatch = false;
    private bool isTiming = false;
    private bool isStopped = true;
    private bool LogStopwatch = false;
    string displaytimer = "00:00:00";
    int stopwatchStops = 0;
    string RecentTime = "";
    string swLog = "";
    TimeSpan TimeFromZero;
    async Task StopwatchTiming() { 
        displaytimer = "00:00:00";
        isStopped = false;
        TimeFromZero = new TimeSpan(0, 0, 0);  
        isTiming = true;
        while (isTiming) { 
            await Task.Delay(1000);
            if (isTiming)
            {
                TimeFromZero = TimeFromZero.Add(new TimeSpan(0, 0, 1));
                displaytimer = TimeFromZero.ToString();
                StateHasChanged();
            }
        }
    }
    void StopwatchStop()
    {
        RecentTime = TimeFromZero.ToString();
        AddToLogStopwatch();
        isTiming = false;
        isStopped = true;

        stopwatchStops++;
    }
    private void AddToLogStopwatch()
    {
        swLog = swLog + RecentTime + "\n";
    }
    private void ToggleLogStopwatch()
    {
        if (LogStopwatch == false)
        {
            LogStopwatch = true;
        }
        else if (LogStopwatch == true)
        {
            LogStopwatch = false;
        }
    }
    private void ClearLogStopwatch()
    {
        swLog = "";
    }
    //Color Picker
    private bool App_ColorPicker = false;
    private bool isFirstColor = true;
    private bool isSecondColor = false;
    private bool isExpandedColorPicker = false;
    private bool isDarkMode = false;
    private bool _isDarkMode = false;
    private bool customThemeCreated = false;
    private bool theme1 = true;
    private bool theme2 = false;
    private bool theme3 = false;
    private bool theme4 = false;
    private bool theme5 = false;
    private MudTheme _theme = new();
    public MudColor textColor = "#ffffff";
    public MudColor textColorInactive = "#c9cacb";
    public MudColor backcolor = "#bdcad8";
    public MudColor accentcolor = "#111A28";
    public MudColor appbarcolor = "#121218";
    public MudColor appbarcolorLighten = "#151521";
    public MudColor graphcolor = "#111A28";
    public MudColor firstColor = "#0476f6";
    public MudColor secondColor = "#ed0c3d";
    public MudColor _pickerColor = "#0476f6";
    public MudColor widgetTextColor = "#000000";
    public MudColor widgetColor = "#ffffff";
    public MudColor customBackColor = "ffffff";
    public MudColor customAppBarColor = "ffffff";
    public MudColor customTextColor = "ffffff";
    public MudColor customTextColorInactive = "e1e0e0";
    public MudColor customWidgetColor = "ffffff";
    public MudColor customWidgetTextColor = "ffffff";
    public MudColor customAccentColor = "ffffff";
    string firstColorConverted = "#0476f6";
    string colorValStr = "#######";
    string secondColorConverted = "#ed0c3d";
    string selectedTheme = "Default";
    string fontType = "Roboto";
    string colorPickerClass = "ColorPickerMediumWidget";
    string[] recentColor = { "ffffff", "ffffff", "ffffff", "ffffff", "ffffff", "ffffff", "ffffff", "ffffff", "ffffff", 
    "ffffff", "ffffff", "ffffff", "ffffff", "ffffff", "ffffff", "ffffff", "ffffff", "ffffff", "ffffff", "ffffff", "ffffff", 
    "ffffff", "ffffff", "ffffff", "ffffff", "ffffff", "ffffff", "ffffff", "ffffff", "ffffff", "ffffff", "ffffff", "ffffff", 
    "ffffff", "ffffff", "ffffff", "ffffff", "ffffff", "ffffff", "ffffff",};
    private void ChangeSelectedColor(MudListItem item)
    {
        if (isFirstColor == true)
        {
            isSecondColor = false;
            _pickerColor = firstColor;
            UpdateSelectedColor(firstColor);
        }
        if (isFirstColor == false)
        {
            isSecondColor = true;
            isFirstColor = false;
            _pickerColor = secondColor;
            UpdateSelectedColor(secondColor);
        }
    }
    public void UpdateSelectedColor(MudColor value)
    {
        _pickerColor = value;
        if (isFirstColor)
        {
            firstColor = value;
            firstColorConverted = firstColor.ToString(MudColorOutputFormats.Hex);
        }
        else
        {
            secondColor = value;
            secondColorConverted = secondColor.ToString(MudColorOutputFormats.Hex);
        }
    }
    private void firstColorTrue()
    {
        _pickerColor = firstColorConverted;
        isFirstColor = true;
        isSecondColor = false;
        setRecentColor();
    }
    private void secondColorTrue()
    {
        _pickerColor = secondColorConverted;
        isSecondColor = true;
        isFirstColor = false;
        setRecentColor();
    }
    private void HEXColorEntered()
    {
        if (firstColorConverted.Contains("##"))
        {
            firstColorConverted = firstColorConverted.Replace("##", "#");
        }
        var regex = @"(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)";
        var match = Regex.Match(firstColorConverted, regex,RegexOptions.IgnoreCase);
        if (!match.Success)
        {
            Console.Write("Matches: " + match);
            firstColorConverted = "#000000";
        }
        firstColor = firstColorConverted;
        secondColor = secondColorConverted;
        if (isFirstColor == true){
            _pickerColor = firstColorConverted;
        }
        if (isFirstColor == false){
            _pickerColor = secondColorConverted;
        }
        setRecentColor();         

    }
    private void SetBackgroundColor()
    {
        if (customThemeCreated == false)
        {
            SetTheme("Custom Theme");
        }
        backcolor = _pickerColor;
        if (widgetColor == backcolor || customWidgetColor == customBackColor){
            Console.Write("Check1");
            string colorString = backcolor.ToString(MudColorOutputFormats.Hex);
            System.Drawing.Color _backcolor = StringToColor(colorString);
            _backcolor = ChangeColorBrightness(_backcolor, -.15f);
            colorString = HexConverter(_backcolor);
            customBackColor = colorString;
            backcolor = colorString;
        }
        else {
            customBackColor = backcolor;
            Console.Write("Check2");
        }
        customThemeCreated = true;
        setRecentColor();
        Save();
    }
    private void SetAccentColor()
    {
        if (customThemeCreated == false)
        {
            SetTheme("Custom Theme");
        }
        accentcolor = _pickerColor;
        graphcolor = _pickerColor;
        if (accentcolor == widgetColor || customAccentColor == customWidgetColor){
            string colorString = accentcolor.ToString(MudColorOutputFormats.Hex);
            if (accentcolor.L > .45){
                System.Drawing.Color _accentcolor = StringToColor(colorString);
                _accentcolor = ChangeColorBrightness(_accentcolor, -.5f);            
                colorString = HexConverter(_accentcolor);
            }
            if (accentcolor.L < .45){
                System.Drawing.Color _accentcolor = StringToColor(colorString);
                _accentcolor = ChangeColorBrightness(_accentcolor, .5f);          
                colorString = HexConverter(_accentcolor);
            }
            customAccentColor = colorString;
            accentcolor = colorString;
        }
        else {
            customAccentColor = accentcolor;
        }
        customThemeCreated = true;
        setRecentColor();
        Save();
    }
    private void SetGraphColor()
    {
        if (customThemeCreated == false)
        {
            SetTheme("Custom Theme");
        }
        graphcolor = _pickerColor;
    }
    private void SetAppBarColor()
    {
        if (customThemeCreated == false)
        {
            SetTheme("Custom Theme");
        }
        appbarcolor = _pickerColor;
        if (appbarcolor == backcolor || appbarcolor == widgetColor || customAppBarColor == customBackColor || customAppBarColor == customWidgetColor){
            string colorString = appbarcolor.ToString(MudColorOutputFormats.Hex);
            System.Drawing.Color _appbarcolor = StringToColor(colorString);
            _appbarcolor = ChangeColorBrightness(_appbarcolor, -.30f);
            colorString = HexConverter(_appbarcolor);
            customAppBarColor = colorString;
            appbarcolor = colorString;
        }
        else {
            customAppBarColor = appbarcolor;
        }
        if (appbarcolor.L > .35){
            textColor = "000000";
            textColorInactive = "282828";
        }
        if (appbarcolor.L < .35){
            textColor = "ffffff";
            textColorInactive = "c9cacb";
        }
        customThemeCreated = true;
        setRecentColor();
        Save();
    }
    private void SetWidgetColor()
    {
        if (customThemeCreated == false)
        {
            SetTheme("Custom Theme");
        }
        widgetColor = _pickerColor;
        if (accentcolor == widgetColor || customAccentColor == customWidgetColor)
        {
            SetAccentColor();
        }
        if (widgetColor == backcolor || customWidgetColor == customBackColor){
            string colorString = widgetColor.ToString(MudColorOutputFormats.Hex);
            System.Drawing.Color _widgetColor = StringToColor(colorString);
            _widgetColor = ChangeColorBrightness(_widgetColor, -.15f);
            colorString = HexConverter(_widgetColor);
            customWidgetColor = colorString;
            widgetColor = colorString;
        }
        else {
            customWidgetColor = widgetColor;
        }
        if (widgetColor.L > .45){
            widgetTextColor = "000000";
        }
        if (widgetColor.L < .45){
            widgetTextColor = "ffffff";
        }
        customThemeCreated = true;
        setRecentColor();
        Save();
    }
    public static System.Drawing.Color ChangeColorBrightness(System.Drawing.Color color, float correctionFactor)
    {
        float red = (float)color.R;
        float green = (float)color.G;
        float blue = (float)color.B;
        if (correctionFactor < 0)
        {
            correctionFactor = 1 + correctionFactor;
            red *= correctionFactor;
            green *= correctionFactor;
            blue *= correctionFactor;
        }
        else
        {
            red = (255 - red) * correctionFactor + red;
            green = (255 - green) * correctionFactor + green;
            blue = (255 - blue) * correctionFactor + blue;
        }
        return System.Drawing.Color.FromArgb(color.A, (int)red, (int)green, (int)blue);
        Console.WriteLine(color);
    }
    public static System.Drawing.Color StringToColor(string colorStr)
    {
        TypeConverter cc = TypeDescriptor.GetConverter(typeof(System.Drawing.Color));
        var result = (System.Drawing.Color)cc.ConvertFromString(colorStr);
        return result;
    }
    private static String HexConverter(System.Drawing.Color c)
    {
        return "#" + c.R.ToString("X2") + c.G.ToString("X2") + c.B.ToString("X2");
    }
    //private void SetTextColor()
    //{
    //    customTextColor = _pickerColor;

    //    textColor = customTextColor;
    //    widgetTextColor = customTextColor;
    //    customThemeCreated = true;
    //    customWidgetColor = widgetColor;
    //}
    //private void SetWidgetTextColor()
    //{
    //    widgetTextColor = _pickerColor;
    //}
    private void ExpandColorPicker()
    {
        if (isExpandedColorPicker == false)
        {
            colorPickerClass = "ColorPickerMediumWidgetExpanded";
            isExpandedColorPicker = true;
        }
        else if (isExpandedColorPicker == true)
        {
            colorPickerClass = "ColorPickerMediumWidget";
            isExpandedColorPicker = false;
        }
    }
    private void setRecentColor() 
    {
        if (recentColor[0] != _pickerColor)
        {
            string tempRecentColor = recentColor[recentColor.Length - 1];
            for (int t = recentColor.Length - 1; t > 0; t--)
            {
                recentColor[t] = recentColor[t-1];
            }
            recentColor[0] = tempRecentColor;
            recentColor[0] = _pickerColor.ToString(MudColorOutputFormats.Hex);
        }
    }
    private void setPickedColor(int n) {
        _pickerColor = recentColor[n];
        setRecentColor();
    }
    //private string setPickedColor(string s) {
    //    int n = Int32.Parse(s);
    //    string tempRecent = recentColor[n];
    //    backcolor = tempRecent;
    //    return recentColor[n];
    //}
    private void SetTheme(String _theme)
    {
        if (_theme == "Light")
        {
            setAllThemesFalse();
            theme1 = true;
            selectedTheme = _theme;
            backcolor = "#e5ecf1";
            appbarcolor = "#121218";
            textColor = "ffffff";
            textColorInactive = "#c9cacb";
            fontType = "Fira Sans";
            widgetColor = "#ffffff";
            widgetTextColor = "#000000";
            accentcolor = "47476d";
            graphcolor = "121218";
            isDarkMode = false;
            _isDarkMode = false;
        }  
        if (_theme == "Dark")
        {
            setAllThemesFalse();
            theme2 = true;
            selectedTheme = _theme;
            backcolor = "#1E1E2D";
            appbarcolor = "#121218";
            textColor = "ffffff";
            textColorInactive = "#c9cacb";
            fontType = "Fira Sans";
            widgetColor = "#151521";
            widgetTextColor = "#ffffff";
            accentcolor = "47476d";
            graphcolor = "ffffff";
            isDarkMode = true;
            _isDarkMode = true;
        }  
        if (_theme == "Miami Vice")
        {
            setAllThemesFalse();
            theme3 = true;
            selectedTheme = _theme;
            backcolor = "#9ef9f9";
            appbarcolor = "#f7a1e9";
            textColor = "000000";
            textColorInactive = "#282828";
            fontType = "Broadway";
            widgetColor = "#ffffff";
            widgetTextColor = "#000000";
            accentcolor = "f50aed";
            graphcolor = "f7a1e9";
            isDarkMode = false;
            _isDarkMode = false;
        }  
        if (_theme == "Cyberpunk")
        {
            setAllThemesFalse();
            theme4 = true;
            selectedTheme = _theme;
            backcolor = "#120324";
            appbarcolor = "#020d19";
            textColor = "ff0586";
            textColorInactive = "#8b064b";
            fontType = "Fira Sans";
            widgetColor = "#340939";
            widgetTextColor = "#ff0586";
            accentcolor = "8b064b";
            graphcolor = "ff0586";
            isDarkMode = true;
            _isDarkMode = true;
        }  
        if (_theme == "Custom Theme")
        {
            setAllThemesFalse();
            theme5 = true;
            selectedTheme = _theme;
            backcolor = customBackColor;
            appbarcolor = customAppBarColor;
            widgetColor = customWidgetColor;
            accentcolor = customAccentColor;
            //textColor = customTextColor;
            //widgetTextColor = customTextColor;
            fontType = "Fira Sans";
            if (appbarcolor.L > .45){
                textColor = "000000";
                textColorInactive = "282828";
            }
            if (appbarcolor.L < .45){
                textColor = "ffffff";
                textColorInactive = "c9cacb";
            }
            if (widgetColor.L > .45){
                widgetTextColor = "000000";
            }
            if (widgetColor.L < .45){
                widgetTextColor = "ffffff";
            }
            isDarkMode = false;
            _isDarkMode = false;
        }
    }
    private void toggleDark()
    {
        if (isDarkMode == false){
            isDarkMode = true;
            SetTheme("Dark");
        }
        else if (isDarkMode == true){
            isDarkMode = false;
            SetTheme("Light");
        }
    }
    private void setAllThemesFalse() {
        theme1 = false;
        theme2 = false;
        theme3 = false;
        theme4 = false;
        theme5 = false;
    }

    public async Task Save()
    {
        await BrowserStorage.SetAsync("Custom Background Color", customBackColor);
        Console.Write("Custom Background Color Saved", customBackColor);
        await BrowserStorage.SetAsync("Custom Accent Color", customAccentColor);
        Console.Write("Custom Accent Color Saved", customAccentColor); 
        await BrowserStorage.SetAsync("Custom Appbar Color", customAppBarColor);
        Console.Write("Custom Appbar Color Saved", customAppBarColor); 
        await BrowserStorage.SetAsync("Custom Widget Color", customWidgetColor);
        Console.Write("Custom Widget Color Saved", customWidgetColor); 
    }
    public async Task Read()
    {
        var result1 = await BrowserStorage.GetAsync<string>("Custom Background Color");
        customBackColor = result1.Success ? result1.Value : "";
        Console.Write("Custom Background Color Read", result1); 
        var result2 = await BrowserStorage.GetAsync<string>("Custom Accent Color");
        customAccentColor = result2.Success ? result2.Value : "";
        Console.Write("Custom Accent Color Read", result2); 
        var result3 = await BrowserStorage.GetAsync<string>("Custom Appbar Color");
        customAppBarColor = result3.Success ? result3.Value : "";
        Console.Write("Custom Appbar Color Read", result3); 
        var result4 = await BrowserStorage.GetAsync<string>("Custom Widget Color");
        customWidgetColor = result4.Success ? result4.Value : "";
        Console.Write("Custom Widget Color Read", result4); 
    }
    public async Task Delete()
    {
        await BrowserStorage.DeleteAsync("Custom Background Color");
        await BrowserStorage.DeleteAsync("Custom Accent Color");
        await BrowserStorage.DeleteAsync("Custom Appbar Color");
        await BrowserStorage.DeleteAsync("Custom Widget Color");
    }
    //Notes
    private bool App_Notes = false;
    private bool isExpandedNotes = false;
    string notesText = "";
    string notesClass = "MudPaperSmallWidget";
    private void ExpandNotes()
    {
        if (isExpandedNotes == false)
        {
            notesClass = "MudPaperMediumWidget";
            isExpandedNotes = true;
        }
        else if (isExpandedNotes == true)
        {
            notesClass = "MudPaperSmallWidget";
            isExpandedNotes = false;
        }
    }
    //Length Converter
    protected bool App_LengthConverter = false;
    protected bool LogLength = false;
    protected double App_LengthConverter_Value1 = 0;
    protected double App_LengthConverter_Value2 = 0;
    protected string LengthValue1 { get; set; } = "Foot";
    protected string LengthValue2 { get; set; } = "Yard";
    protected string lengthLog = "";
    protected void ConvertLength()
    {
        if (LengthValue1 == "Foot" && LengthValue2 == "Foot")
        {
            App_LengthConverter_Value2 = App_LengthConverter_Value1;
        }
        if (LengthValue1 == "Foot" && LengthValue2 == "Yard")
        {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 * 1 / 3;
        }
        if (LengthValue1 == "Foot" && LengthValue2 == "Mile")
        {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 / 5280;
        }
        if (LengthValue1 == "Foot" && LengthValue2 == "Inch")
        {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 * 12;
        }
        if (LengthValue1 == "Foot" && LengthValue2 == "Meter")
        {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 / 3.281;
        }
        if (LengthValue1 == "Foot" && LengthValue2 == "Kilometer")
        {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 / 3281;
        }
        if (LengthValue1 == "Yard" && LengthValue2 == "Foot")
        {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 * 3;
        }
        if (LengthValue1 == "Yard" && LengthValue2 == "Yard")
        {
            App_LengthConverter_Value2 = App_LengthConverter_Value1;
        }
        if (LengthValue1 == "Yard" && LengthValue2 == "Mile")
        {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 / 1760;
        }
        if (LengthValue1 == "Yard" && LengthValue2 == "Inch")
        {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 * 36;
        }
        if (LengthValue1 == "Yard" && LengthValue2 == "Meter")
        {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 / 1.094;
        }
        if (LengthValue1 == "Yard" && LengthValue2 == "Kilometer")
        {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 / 1094;
        }
        if (LengthValue1 == "Mile" && LengthValue2 == "Foot")
        {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 * 5280;
        }
        if (LengthValue1 == "Mile" && LengthValue2 == "Yard")
        {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 * 1760;
        }
        if (LengthValue1 == "Mile" && LengthValue2 == "Mile")
        {
            App_LengthConverter_Value2 = App_LengthConverter_Value1;
        }
        if (LengthValue1 == "Mile" && LengthValue2 == "Inch")
        {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 * 63360;
        }
        if (LengthValue1 == "Mile" && LengthValue2 == "Meter")
        {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 * 1609;
        }
        if (LengthValue1 == "Mile" && LengthValue2 == "Kilometer")
        {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 * 1.609;
        }
        if (LengthValue1 == "Inch" && LengthValue2 == "Foot")
        {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 / 12;
        }
        if (LengthValue1 == "Inch" && LengthValue2 == "Yard")
        {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 / 36;
        }
        if (LengthValue1 == "Inch" && LengthValue2 == "Mile")
        {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 / 63360;
        }
        if (LengthValue1 == "Inch" && LengthValue2 == "Inch")
        {
            App_LengthConverter_Value2 = App_LengthConverter_Value1;
        }
        if (LengthValue1 == "Inch" && LengthValue2 == "Meter")
        {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 / 39.37;
        }
        if (LengthValue1 == "Inch" && LengthValue2 == "Kilometer")
        {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 / 39370;
        }
        if (LengthValue1 == "Meter" && LengthValue2 == "Foot")
        {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 * 3.281;
        }
        if (LengthValue1 == "Meter" && LengthValue2 == "Yard")
        {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 * 1.094;
        }
        if (LengthValue1 == "Meter" && LengthValue2 == "Mile")
        {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 / 1609;
        }
        if (LengthValue1 == "Meter" && LengthValue2 == "Inch")
        {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 * 39.37;
        }
        if (LengthValue1 == "Meter" && LengthValue2 == "Meter")
        {
            App_LengthConverter_Value2 = App_LengthConverter_Value1;
        }
        if (LengthValue1 == "Meter" && LengthValue2 == "Kilometer")
        {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 / 1000;
        }
        if (LengthValue1 == "Kilometer" && LengthValue2 == "Foot")
        {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 * 3281;
        }
        if (LengthValue1 == "Kilometer" && LengthValue2 == "Yard")
        {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 * 1094;
        }
        if (LengthValue1 == "Kilometer" && LengthValue2 == "Mile")
        {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 / 1.609;
        }
        if (LengthValue1 == "Kilometer" && LengthValue2 == "Inch")
        {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 * 39370;
        }
        if (LengthValue1 == "Kilometer" && LengthValue2 == "Meter")
        {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 * 1000;
        }
        if (LengthValue1 == "Kilometer" && LengthValue2 == "Kilometer")
        {
            App_LengthConverter_Value2 = App_LengthConverter_Value1;
        }
        AddToLogLength();
    }
    protected void AddToLogLength()
    {
        lengthLog = lengthLog + App_LengthConverter_Value1 + " " + LengthValue1 + " " + " = " + App_LengthConverter_Value2 + " " + LengthValue2 + "\n";
    }
    protected void ToggleLogLength()
    {
        if (LogLength == false)
        {
            LogLength = true;
        }
        else if (LogLength == true)
        {
            LogLength = false;
        }
    }
    protected void ClearLogLength()
    {
        lengthLog = "";
    }
    //Mass Converter
    private bool App_MassConverter = false;
    private bool LogMass = false;
    double App_MassConverter_Value1 = 0;
    double App_MassConverter_Value2 = 0;
    private string MassValue1 { get; set; } = "Pound";
    private string MassValue2 { get; set; } = "Kilogram";
    string massLog = "";
    private void ConvertMass()
    {
        if (MassValue1 == "Pound" && MassValue2 == "Pound") {
            App_MassConverter_Value2 = App_MassConverter_Value1;
        }
        if (MassValue1 == "Pound" && MassValue2 == "Ounce") {
            App_MassConverter_Value2 = App_MassConverter_Value1 * 16;
        }
        if (MassValue1 == "Pound" && MassValue2 == "Kilogram") {
            App_MassConverter_Value2 = App_MassConverter_Value1 / 2.205;
        }
        if (MassValue1 == "Pound" && MassValue2 == "Gram") {
            App_MassConverter_Value2 = App_MassConverter_Value1 * 453.6;
        }
        if (MassValue1 == "Pound" && MassValue2 == "US Ton") {
            App_MassConverter_Value2 = App_MassConverter_Value1 / 2000;
        }
        if (MassValue1 == "Pound" && MassValue2 == "Metric Ton") {
            App_MassConverter_Value2 = App_MassConverter_Value1 / 2205;
        }
        if (MassValue1 == "Ounce" && MassValue2 == "Pound") {
            App_MassConverter_Value2 = App_MassConverter_Value1 / 16;
        }
        if (MassValue1 == "Ounce" && MassValue2 == "Ounce") {
            App_MassConverter_Value2 = App_MassConverter_Value1;
        }
        if (MassValue1 == "Ounce" && MassValue2 == "Kilogram") {
            App_MassConverter_Value2 = App_MassConverter_Value1 / 35.274;
        }
        if (MassValue1 == "Ounce" && MassValue2 == "Gram") {
            App_MassConverter_Value2 = App_MassConverter_Value1 * 28.35;
        }
        if (MassValue1 == "Ounce" && MassValue2 == "US Ton") {
            App_MassConverter_Value2 = App_MassConverter_Value1 / 32000;
        }
        if (MassValue1 == "Ounce" && MassValue2 == "Metric Ton") {
            App_MassConverter_Value2 = App_MassConverter_Value1 / 35270;
        }
        if (MassValue1 == "Kilogram" && MassValue2 == "Pound") {
            App_MassConverter_Value2 = App_MassConverter_Value1 * 2.205;
        }
        if (MassValue1 == "Kilogram" && MassValue2 == "Ounce") {
            App_MassConverter_Value2 = App_MassConverter_Value1 * 35.274;
        }
        if (MassValue1 == "Kilogram" && MassValue2 == "Kilogram") {
            App_MassConverter_Value2 = App_MassConverter_Value1;
        }
        if (MassValue1 == "Kilogram" && MassValue2 == "Gram") {
            App_MassConverter_Value2 = App_MassConverter_Value1 * 1000;
        }
        if (MassValue1 == "Kilogram" && MassValue2 == "US Ton") {
            App_MassConverter_Value2 = App_MassConverter_Value1 / 907.2;
        }
        if (MassValue1 == "Kilogram" && MassValue2 == "Metric Ton") {
            App_MassConverter_Value2 = App_MassConverter_Value1 / 1000;
        }
        if (MassValue1 == "Gram" && MassValue2 == "Pound") {
            App_MassConverter_Value2 = App_MassConverter_Value1 / 453.6;
        }
        if (MassValue1 == "Gram" && MassValue2 == "Ounce") {
            App_MassConverter_Value2 = App_MassConverter_Value1 / 28.35;
        }
        if (MassValue1 == "Gram" && MassValue2 == "Kilogram") {
            App_MassConverter_Value2 = App_MassConverter_Value1 / 63360;
        }
        if (MassValue1 == "Gram" && MassValue2 == "Gram") {
            App_MassConverter_Value2 = App_MassConverter_Value1;
        }
        if (MassValue1 == "Gram" && MassValue2 == "US Ton") {
            App_MassConverter_Value2 = App_MassConverter_Value1 / 907200;
        }
        if (MassValue1 == "Gram" && MassValue2 == "Metric Ton") {
            App_MassConverter_Value2 = App_MassConverter_Value1 / 0.000001;
        }
        if (MassValue1 == "US Ton" && MassValue2 == "Pound") {
            App_MassConverter_Value2 = App_MassConverter_Value1 * 2000;
        }
        if (MassValue1 == "US Ton" && MassValue2 == "Ounce") {
            App_MassConverter_Value2 = App_MassConverter_Value1 * 32000;
        }
        if (MassValue1 == "US Ton" && MassValue2 == "Kilogram") {
            App_MassConverter_Value2 = App_MassConverter_Value1 * 907.2;
        }
        if (MassValue1 == "US Ton" && MassValue2 == "Gram") {
            App_MassConverter_Value2 = App_MassConverter_Value1 * 907200;
        }
        if (MassValue1 == "US Ton" && MassValue2 == "US Ton") {
            App_MassConverter_Value2 = App_MassConverter_Value1;
        }
        if (MassValue1 == "US Ton" && MassValue2 == "Metric Ton") {
            App_MassConverter_Value2 = App_MassConverter_Value1 / 1.102;
        }
        if (MassValue1 == "Metric Ton" && MassValue2 == "Pound") {
            App_MassConverter_Value2 = App_MassConverter_Value1 * 2205;
        }
        if (MassValue1 == "Metric Ton" && MassValue2 == "Ounce") {
            App_MassConverter_Value2 = App_MassConverter_Value1 * 35270;
        }
        if (MassValue1 == "Metric Ton" && MassValue2 == "Kilogram") {
            App_MassConverter_Value2 = App_MassConverter_Value1 * 1000;
        }
        if (MassValue1 == "Metric Ton" && MassValue2 == "Gram") {
            App_MassConverter_Value2 = App_MassConverter_Value1 * 0.000001;
        }
        if (MassValue1 == "Metric Ton" && MassValue2 == "US Ton") {
            App_MassConverter_Value2 = App_MassConverter_Value1 * 1.102;
        }
        if (MassValue1 == "Metric Ton" && MassValue2 == "Metric Ton") {
            App_MassConverter_Value2 = App_MassConverter_Value1;
        }
        AddToLogMass();
    }
    private void AddToLogMass()
    {
        massLog = massLog + App_MassConverter_Value1 + " " + MassValue1 + " " + " = " + App_MassConverter_Value2 + " " + MassValue2 + "\n";
    }
    private void ToggleLogMass()
    {
        if (LogMass == false)
        {
            LogMass = true;
        }
        else if (LogMass == true)
        {
            LogMass = false;
        }
    }
    private void ClearLogMass()
    {
        massLog = "";
    }
    //Timer
    private bool App_Timer = false;
    private bool isTiming_Timer = false;
    private bool isReset_Timer = true;
    private bool isPaused_Timer = true;
    private bool isTimer_Done = false;
    private bool _pause = false;
    private bool SoundOn = false;
    string displaytimer_Timer = "00:00:00";
    TimeSpan TimeFromZero_Timer;
    private int Seconds { get; set; }
    private int Minutes { get; set; }
    private int Hours { get; set; }
    async Task TimerTiming() { 
        isTimer_Done = false; //Set timer to not be done
        isTiming_Timer = true;
        isPaused_Timer = false;
        isReset_Timer = false;
        if(!_pause) TimeFromZero_Timer = new TimeSpan(Hours, Minutes, Seconds+1); //if not paused create new timer
        else //resume timer where it left off
        {
            _pause = false;
            TimeFromZero_Timer = TimeFromZero_Timer.Duration(); //create new timer with previous timer's duration b/c timespan has no resume functionality
        }   
        while (TimeFromZero_Timer > new TimeSpan()) //progress timer until 0
        {
            if (!_pause) //if not paused progress timer
            {
                await Task.Delay(1000);
                TimeFromZero_Timer = TimeFromZero_Timer.Subtract(new TimeSpan(0,0,1)); //Remove one second while timing is running
                displaytimer_Timer = TimeFromZero_Timer.ToString();
                StateHasChanged();
            }
            else{ //stop timing when paused
                break;
            }
        }
        isTiming_Timer = false;
        if (displaytimer_Timer == "00:00:00")
        {
            TimerReset();
            timerNotification();
        }
        StateHasChanged();
    }
    void TimerReset()
    {
        displaytimer_Timer = "00:00:00";
        Seconds = 0;
        Minutes = 0;
        Hours = 0;
        _pause = false;
        isTiming_Timer = false;
        isPaused_Timer = true;
        isReset_Timer = true;
        TimeFromZero_Timer = (new TimeSpan(Hours,Minutes,Seconds));
        TimeFromZero_Timer = TimeFromZero_Timer.Add(new TimeSpan(0,0,1));
    }
    void TimerPause()
    {
        TimeFromZero_Timer = TimeFromZero_Timer.Add(new TimeSpan(0,0,1));
        _pause = true;
        isTiming_Timer = false;
        isPaused_Timer = true;
    }
    MudMessageBox timerNotificationMSG { get; set; } //Call timer notification
    private async void timerNotification()
    {
        bool? result = await timerNotificationMSG.Show();
    }
    //Calendar
    private bool App_Calendar = false;
    string todayDate = DateTime.Now.ToShortDateString();
    //Graph Builder
    private bool App_GraphBuilder = false;
    private bool isExpandedGraphBuilder = false;
    private bool graphTabBars = true;
    string graphBuilderClass = "GraphBuilderMediumWidget";
    private double GraphBuilderMin = 0;
    private double GraphBuilderMax = 100;
    string GraphTitle = "Title";
    private int GraphNumberOfBars = 2;
    private double graphMax = 0;
    double[] GraphBar = {0, 0, 0, 0, 0, 0};
    double[] barHeight = {0, 0, 0, 0, 0, 0};
    string[] GraphBarLabel = { "Bar 1", "Bar 2", "Bar 3", "Bar 4", "Bar 5", "Bar 6" };
    public bool CheckBoxLabels { get; set; } = false;
    public bool CheckBoxValues { get; set; } = false;
    private void ExpandGraphBuilder()
    {
        if (isExpandedGraphBuilder == false)
        {
            graphBuilderClass = "GraphBuilderMediumWidgetExpanded";
            isExpandedGraphBuilder = true;
        }
        else if (isExpandedGraphBuilder == true)
        {
            graphBuilderClass = "GraphBuilderMediumWidget";
            isExpandedGraphBuilder = false;
        }
    }
    private void BuildGraph()
    {
        FindMax();
        for (int i = 0; i < 6; i++) {
            barHeight[i] = GraphBar[i] / GraphBuilderMax;
            barHeight[i] = barHeight[i] * 100;  
        }
    }
    private void ChangeGraphTab()
    {
        if (graphTabBars == false)
        {
            graphTabBars = true;
        }
        else if (graphTabBars == true)
        {
            graphTabBars = false;
        }
    }
    private void FindMax() {
        graphMax = GraphBar.Max();
        Console.Write("Graph Max: " + graphMax);
        if (GraphBuilderMax < graphMax)
        {
            GraphBuilderMax = graphMax;
        }
    }
    bool drawerOpen = false;

    void ToggleDrawer()
    {
        if(drawerOpen == false)
        {
            drawerOpen = true;
        }
        else if (drawerOpen == true)
        {
            drawerOpen = false;
        }
    }
}