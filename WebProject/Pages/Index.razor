@page "/"
@using System.Drawing;
@using System.Timers;
@using System.Threading.Tasks;
@using MudBlazor.Utilities;
@using System.Linq;
@using System.Text.RegularExpressions;
@using System.Collections.Generic;
@inject IDialogService DialogService
<MudThemeProvider @bind-IsDarkMode="@_isDarkMode" Theme="_theme"/>

<style>
    :root {
        --mud-palette-primary: @accentcolor;
        --mud-palette-lines-inputs: @widgetTextColor;
        --mud-palette-secondary: @widgetTextColor;
        --mud-palette-action-default: @widgetTextColor;
        --mud-palette-tertiary: @textColor;
        --mud-palette-success: @backcolor;
        --mud-palette-success-text: @widgetTextColor;
        --mud-palette-surface: @widgetColor;
        --mud-palette-text-primary: @widgetTextColor;
        --mud-palette-text-secondary: @widgetTextColor;
        --mud-palette-background: @textColor;
        --mud-palette-background-grey: @textColor;
        --mud-palette-primary-text: @textColor;
        --mud-palette-action-disabled-background: @backcolor;
        background-color: @backcolor;
    }
</style>


<PageTitle>Index</PageTitle>
<div>
    <MudAppBar Color="MudBlazor.Color.Primary" Elevation="1" Dense="true" Class="MudAppBar">
        <MudButton OnClick="tab1" Class="AppBarButton" DisableRipple="true">
            <MudText Style="font-size: 18px;" Color="MudBlazor.Color.Tertiary"> Home </MudText>
        </MudButton> 
        <MudButton OnClick="tab2" Class="AppBarButton" DisableRipple="true">
            <MudText Style="font-size: 18px;" Color="MudBlazor.Color.Tertiary"> Utilities </MudText>
        </MudButton> 
        <MudButton OnClick="tab3" Class="AppBarButton" DisableRipple="true">
            <MudText Style="font-size: 18px;" Color="MudBlazor.Color.Tertiary"> Converters </MudText>
        </MudButton>
        <MudSpacer />
        <MudMenu @bind-Value="selectedTheme" Variant="Variant.Outlined" Style="height: 20px;" Color="MudBlazor.Color.Tertiary" Label="Select Theme" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft" Dense="true">
            <MudMenuItem OnClick='() => SetTheme("Light")'>Light</MudMenuItem>
            <MudMenuItem OnClick='() => SetTheme("Dark")'>Dark</MudMenuItem>
            <MudMenuItem OnClick='() => SetTheme("High Contrast")'>High Contrast</MudMenuItem>
            <MudMenuItem OnClick='() => SetTheme("Low Contrast")'>Low Contrast</MudMenuItem>
            <MudMenuItem OnClick='() => SetTheme("Miami Vice")'>Miami Vice</MudMenuItem>
            <MudMenuItem OnClick='() => SetTheme("Cyberpunk")'>Cyberpunk</MudMenuItem>
        </MudMenu>
    </MudAppBar>
    @if (home == true)
    {
        <MudAppBar Color="MudBlazor.Color.Primary" Style="margin-top: 35px;" Elevation="0" Dense="true" Class="MudAppBar">
            <MudButton OnClick="OpenDialog" Class="AppBarButton" DisableRipple="true">
                <MudText Class="AppBarButtonText" Style="font-size: 12px; margin-bottom: 10px;" Color="MudBlazor.Color.Tertiary"> Select Widgets </MudText>
            </MudButton>
        </MudAppBar>
    }
    @if (Utilities == true)
    {
        <MudAppBar Color="MudBlazor.Color.Primary" Style="margin-top: 35px;" Elevation="0" Dense="true" Class="MudAppBar" DisableRipple="true">
            <MudButton OnClick="Tab_Calculator" Class="AppBarButton" DisableRipple="true">
                <MudText Class="AppBarButtonText" Style="font-size: 12px; margin-bottom: 10px;" Color="MudBlazor.Color.Tertiary"> Calculator </MudText>
            </MudButton>       
            <MudButton OnClick="Tab_Stopwatch" Class="AppBarButton" DisableRipple="true">
                <MudText Class="AppBarButtonText" Style="font-size: 12px; margin-bottom: 10px;" Color="MudBlazor.Color.Tertiary"> Stopwatch </MudText>
            </MudButton>   
            <MudButton OnClick="Tab_Timer" Class="AppBarButton" DisableRipple="true">
                <MudText Class="AppBarButtonText" Style="font-size: 12px; margin-bottom: 10px;" Color="MudBlazor.Color.Tertiary"> Timer </MudText>
            </MudButton> 
            <MudButton OnClick="Tab_ColorPicker" Class="AppBarButton" DisableRipple="true">
                <MudText Class="AppBarButtonText" Style="font-size: 12px; margin-bottom: 10px;" Color="MudBlazor.Color.Tertiary"> Color Picker </MudText>
            </MudButton> 
            <MudButton OnClick="Tab_Notes" Class="AppBarButton" DisableRipple="true">
                <MudText Class="AppBarButtonText" Style="font-size: 12px; margin-bottom: 10px;" Color="MudBlazor.Color.Tertiary"> Notes </MudText>
            </MudButton>
            <MudButton OnClick="Tab_Calendar" Class="AppBarButton" DisableRipple="true">
                <MudText Class="AppBarButtonText" Style="font-size: 12px; margin-bottom: 10px;" Color="MudBlazor.Color.Tertiary"> Calendar </MudText>
            </MudButton>  
            <MudButton OnClick="Tab_GraphBuilder" Class="AppBarButton" DisableRipple="true">
                <MudText Class="AppBarButtonText" Style="font-size: 12px; margin-bottom: 10px;" Color="MudBlazor.Color.Tertiary"> Graph Builder </MudText>
            </MudButton>  
        </MudAppBar>
    }
    @if (Converters == true)
    {
        <MudAppBar Color="MudBlazor.Color.Primary" Style="margin-top: 35px;" Elevation="0" Dense="true" Class="MudAppBar">
            <MudButton OnClick="Tab_TemperatureConverter" Class="AppBarButton" DisableRipple="true">
                <MudText Class="AppBarButtonText" Style="font-size: 12px; margin-bottom: 10px;" Color="MudBlazor.Color.Tertiary"> Temperature Converter </MudText>
            </MudButton> 
            <MudButton OnClick="Tab_VolumeConverter" Class="AppBarButton" DisableRipple="true">
                <MudText Class="AppBarButtonText" Style="font-size: 12px; margin-bottom: 10px;" Color="MudBlazor.Color.Tertiary"> Volume Converter </MudText>
            </MudButton> 
            <MudButton OnClick="Tab_LengthConverter" Class="AppBarButton" DisableRipple="true">
                <MudText Class="AppBarButtonText" Style="font-size: 12px; margin-bottom: 10px;" Color="MudBlazor.Color.Tertiary"> Length Converter </MudText>
            </MudButton> 
            <MudButton OnClick="Tab_MassConverter" Class="AppBarButton" DisableRipple="true">
                <MudText Class="AppBarButtonText" Style="font-size: 12px; margin-bottom: 10px;" Color="MudBlazor.Color.Tertiary"> Mass Converter </MudText>
            </MudButton>  
        </MudAppBar>
    }
    <div style="margin-top: 70px; height: 5px;"></div>
</div>
<div class="backScreen" style="background-color: @accentcolor">
    @if (home == true) {
                    <div style="margin-top: 1500px">
                    <MudText Class="Text" >widgetOrder[0]: @widgetOrder[0]</MudText>
                    <MudText Class="Text" >widgetOrder[1]: @widgetOrder[1]</MudText>
                    <MudText Class="Text" >widgetOrder[2]: @widgetOrder[2]</MudText>
                    <MudText Class="Text" >widgetOrder[3]: @widgetOrder[3]</MudText>
                    <MudText Class="Text" >widgetOrder[4]: @widgetOrder[4]</MudText>
                    <MudText Class="Text" >widgetOrder[5]: @widgetOrder[5]</MudText>
                    <MudText Class="Text" >widgetOrder[6]: @widgetOrder[6]</MudText>
                    <MudText Class="Text" >widgetOrder[7]: @widgetOrder[7]</MudText>
                    <MudText Class="Text" >widgetOrder[8]: @widgetOrder[8]</MudText>
                    <MudText Class="Text" >widgetOrder[8]: @widgetOrder[9]</MudText>
                    <MudText Class="Text" >widgetOrder[8]: @widgetOrder[10]</MudText>
                    </div>
    }
    <div class="@className">
    @if (Converters == true || home == true)
    {
            @if (App_MassConverter == true)
            {
                ReOrderWidgets();
                <div class="MudPaperMediumWidget" style="order: @widgetOrder[10]; background-color: @widgetColor;">
                    <div style="display: flex; justify-content: space-between;">
                        <MudText Color="@MudBlazor.Color.Secondary" Style="margin-top: 5%; margin-left: 5%; margin-right: 5%;">Mass Converter</MudText>
                        @if (home == true)
                        {
                            <div style="margin: 1%;">
                            <MudIconButton OnClick='() => MoveUp("10")' Icon="@Icons.TwoTone.KeyboardArrowUp"></MudIconButton>
                            <MudIconButton OnClick='() => MoveDown("10")' Icon="@Icons.TwoTone.KeyboardArrowDown"></MudIconButton>
                            <MudIconButton OnClick='() => App_MassConverter = false' Icon="@Icons.Material.Filled.Close"></MudIconButton>
                            </div>
                        }    
                    </div>
                    <div style="display: flex;">
                        <div style="margin-left: 5%;">
                            <MudTextField @bind-Value="App_MassConverter_Value1" ReadOnly="false" Variant="Variant.Outlined" Style="" ></MudTextField>
                            <MudSelect @bind-Value="MassValue1" Margin="Margin.Dense" T="string" Variant="Variant.Outlined">
                                <MudSelectItem Value="@("Pound")" />
                                <MudSelectItem Value="@("Ounce")" />
                                <MudSelectItem Value="@("Kilogram")" />
                                <MudSelectItem Value="@("Gram")" />
                                <MudSelectItem Value="@("US Ton")" />
                                <MudSelectItem Value="@("Metric Ton")" />
                            </MudSelect>    
                        </div>
                        <div style="margin-left: 5%;">
                            <MudTextField @bind-Value="App_MassConverter_Value2" ReadOnly="true" Variant="Variant.Outlined" Style="Color: " ></MudTextField>
                            <MudSelect @bind-Value="MassValue2" Margin="Margin.Dense" T="string" Variant="Variant.Outlined">
                                <MudSelectItem Value="@("Pound")" />
                                <MudSelectItem Value="@("Ounce")" />
                                <MudSelectItem Value="@("Kilogram")" />
                                <MudSelectItem Value="@("Gram")" />
                                <MudSelectItem Value="@("US Ton")" />
                                <MudSelectItem Value="@("Metric Ton")" />
                            </MudSelect>                
                        </div>
                    </div>
                    @if (LogMass == true) {
                    <div class="converterLog" style="border-color: @widgetTextColor;">
                            @if (LogMass == true) {
                            <MudTextField @bind-Value="massLog" Class="converterLogText" ReadOnly="false" Variant="Variant.Text" Style="" DisableUnderLine="true" Lines="6" ></MudTextField>
                            }
                    </div>
                    }
                    @if (LogMass == false) {
                    <div class="converterLog" style="border-color: @widgetColor;"></div>
                    }
                    <div>
                        <MudButton OnClick="ConvertMass" Style="margin: 5%; margin-top: 0px; height: 20px;" Variant="Variant.Outlined" Color="MudBlazor.Color.Secondary" >Convert</MudButton>
                        @if (LogMass == false) {
                        <MudButton OnClick="ToggleLogMass" Style="margin-bottom: 5%; margin-top: 0px; height: 20px; width: 120px;" Variant="Variant.Outlined" Color="MudBlazor.Color.Secondary" >Show Log</MudButton>                    
                        }
                        @if (LogMass == true) {
                        <MudButton OnClick="ToggleLogMass" Style="margin-bottom: 5%; margin-top: 0px; height: 20px; width: 120px;" Variant="Variant.Outlined" Color="MudBlazor.Color.Secondary" >Hide Log</MudButton>                    
                        <MudButton OnClick="ClearLogMass" Style="margin-bottom: 5%; margin-left: 5%; height: 20px;" Variant="Variant.Outlined" Color="MudBlazor.Color.Secondary" >Clear Log</MudButton>                    
                        }
                    </div>
                </div>
            }
            @if (App_LengthConverter == true)
            {
                ReOrderWidgets();
                <div class="MudPaperMediumWidget" style="order: @widgetOrder[9]; background-color: @widgetColor;">
                    <div style="display: flex; justify-content: space-between;">
                        <MudText Color="@MudBlazor.Color.Secondary" Style="margin-top: 5%; margin-left: 5%; margin-right: 5%;">Length Converter</MudText>
                        @if (home == true)
                        {
                            <div style="margin: 1%;">
                            <MudIconButton OnClick='() => MoveUp("9")' Icon="@Icons.TwoTone.KeyboardArrowUp"></MudIconButton>
                            <MudIconButton OOnClick='() => MoveDown("9")' Icon="@Icons.TwoTone.KeyboardArrowDown"></MudIconButton>
                            <MudIconButton OnClick='() => App_LengthConverter = false' Icon="@Icons.Material.Filled.Close"></MudIconButton>
                            </div>
                        }    
                    </div>             
                    <div style="display: flex;">
                        <div style="margin-left: 5%;">
                            <MudTextField @bind-Value="App_LengthConverter_Value1" ReadOnly="false" Variant="Variant.Outlined" Style="" ></MudTextField>
                            <MudSelect @bind-Value="LengthValue1" Margin="Margin.Dense" T="string" Variant="Variant.Outlined">
                                <MudSelectItem Value="@("Foot")" />
                                <MudSelectItem Value="@("Yard")" />
                                <MudSelectItem Value="@("Mile")" />
                                <MudSelectItem Value="@("Inch")" />
                                <MudSelectItem Value="@("Meter")" />
                                <MudSelectItem Value="@("Kilometer")" />
                            </MudSelect>    
                        </div>
                        <div style="margin-left: 5%;">
                            <MudTextField @bind-Value="App_LengthConverter_Value2" ReadOnly="true" Variant="Variant.Outlined" Style="" ></MudTextField>
                            <MudSelect @bind-Value="LengthValue2" Margin="Margin.Dense" T="string" Variant="Variant.Outlined">
                                <MudSelectItem Value="@("Foot")" />
                                <MudSelectItem Value="@("Yard")" />
                                <MudSelectItem Value="@("Mile")" />
                                <MudSelectItem Value="@("Inch")" />
                                <MudSelectItem Value="@("Meter")" />
                                <MudSelectItem Value="@("Kilometer")" />
                            </MudSelect>                
                        </div>
                    </div>
                    @if (LogLength == true) {
                    <div class="converterLog" style="border-color: @widgetTextColor;">
                            @if (LogLength == true) {
                            <MudTextField @bind-Value="lengthLog" Class="converterLogText" ReadOnly="true" Variant="Variant.Text" Style="" DisableUnderLine="true" Lines="6" ></MudTextField>
                            }
                    </div>
                    }
                    @if (LogLength == false) {
                    <div class="converterLog" style="border-color: @widgetColor;"></div>
                    }
                    <div>
                        <MudButton OnClick="ConvertLength" Style="margin: 5%; margin-top: 0px; height: 20px;" Variant="Variant.Outlined" Color="MudBlazor.Color.Secondary" >Convert</MudButton>
                        @if (LogLength == false) {
                        <MudButton OnClick="ToggleLogLength" Style="margin-bottom: 5%; margin-top: 0px; height: 20px; width: 120px;" Variant="Variant.Outlined" Color="MudBlazor.Color.Secondary" >Show Log</MudButton>                    
                        }
                        @if (LogLength == true) {
                        <MudButton OnClick="ToggleLogLength" Style="margin-bottom: 5%; margin-top: 0px; height: 20px; width: 120px;" Variant="Variant.Outlined" Color="MudBlazor.Color.Secondary" >Hide Log</MudButton>                    
                        <MudButton OnClick="ClearLogLength" Style="margin-bottom: 5%; margin-left: 5%; height: 20px;" Variant="Variant.Outlined" Color="MudBlazor.Color.Secondary" >Clear Log</MudButton>                    
                        }
                    </div>
                </div>
            }
            @if (App_VolumeConverter == true)
            {
                ReOrderWidgets();
                <div class="MudPaperMediumWidget" style="order: @widgetOrder[8]; background-color: @widgetColor;">
                    <div style="display: flex; justify-content: space-between;">
                        <MudText Color="@MudBlazor.Color.Secondary" Style="margin-top: 5%; margin-left: 5%; margin-right: 5%;">Volume Converter</MudText>
                        @if (home == true)
                        {
                            <div style="margin: 1%;">
                            <MudIconButton OnClick='() => MoveUp("8")' Icon="@Icons.TwoTone.KeyboardArrowUp"></MudIconButton>
                            <MudIconButton OnClick='() => MoveDown("8")' Icon="@Icons.TwoTone.KeyboardArrowDown"></MudIconButton>
                            <MudIconButton OnClick='() => App_VolumeConverter = false' Icon="@Icons.Material.Filled.Close"></MudIconButton>
                            </div>
                        }    
                    </div>
                    <div style="display: flex;">
                        <div style="margin-left: 5%;">
                            <MudTextField @bind-Value="App_VolumeConverter_Value1" ReadOnly="false" Variant="Variant.Outlined" Style="" ></MudTextField>
                            <MudSelect @bind-Value="VolumeValue1" Margin="Margin.Dense" T="string" Variant="Variant.Outlined">
                                <MudSelectItem Value="@("US Gallon")" />
                                <MudSelectItem Value="@("US Quart")" />
                                <MudSelectItem Value="@("US Pint")" />
                                <MudSelectItem Value="@("US Cup")" />
                                <MudSelectItem Value="@("Liter")" />
                                <MudSelectItem Value="@("Milliliter")" />
                            </MudSelect>    
                        </div>
                        <div style="margin-left: 5%;">
                            <MudTextField @bind-Value="App_VolumeConverter_Value2" ReadOnly="true" Variant="Variant.Outlined" Style="" ></MudTextField>
                            <MudSelect @bind-Value="VolumeValue2" Margin="Margin.Dense" T="string" Variant="Variant.Outlined">
                                <MudSelectItem Value="@("US Gallon")" />
                                <MudSelectItem Value="@("US Quart")" />
                                <MudSelectItem Value="@("US Pint")" />
                                <MudSelectItem Value="@("US Cup")" />
                                <MudSelectItem Value="@("Liter")" />
                                <MudSelectItem Value="@("Milliliter")" />
                            </MudSelect>                
                        </div>
                    </div>
                    @if (LogVolume == true) {
                    <div class="converterLog" style="border-color: @widgetTextColor;">
                            @if (LogVolume == true) {
                            <MudTextField @bind-Value="volumeLog" Class="converterLogText" ReadOnly="true" Variant="Variant.Text" Style="" DisableUnderLine="true" Lines="6" ></MudTextField>
                            }
                    </div>
                    }
                    @if (LogVolume == false) {
                    <div class="converterLog" style="border-color: @widgetColor;"></div>
                    }
                    <div>
                        <MudButton OnClick="ConvertVolume" Style="margin: 5%; margin-top: 0px; height: 20px;" Variant="Variant.Outlined" Color="MudBlazor.Color.Secondary" >Convert</MudButton>
                        @if (LogVolume == false) {
                        <MudButton OnClick="ToggleLogVolume" Style="margin-bottom: 5%; margin-top: 0px; height: 20px; width: 120px;" Variant="Variant.Outlined" Color="MudBlazor.Color.Secondary" >Show Log</MudButton>                    
                        }
                        @if (LogVolume == true) {
                        <MudButton OnClick="ToggleLogVolume" Style="margin-bottom: 5%; margin-top: 0px; height: 20px; width: 120px;" Variant="Variant.Outlined" Color="MudBlazor.Color.Secondary" >Hide Log</MudButton>                    
                        <MudButton OnClick="ClearLogVolume" Style="margin-bottom: 5%; margin-left: 5%; height: 20px;" Variant="Variant.Outlined" Color="MudBlazor.Color.Secondary" >Clear Log</MudButton>                    
                        }
                    </div>
                </div>
            }
            @if (App_TemperatureConverter == true)
            {
                ReOrderWidgets();
                <div class="MudPaperMediumWidget" style="order: @widgetOrder[7]; background-color: @widgetColor;">
                    <div style="display: flex; justify-content: space-between;">
                        <MudText Color="@MudBlazor.Color.Secondary" Style="margin-top: 5%; margin-left: 5%; margin-right: 5%;">Temperature Converter</MudText>
                        @if (home == true)
                        {
                            <div style="margin: 1%;">
                            <MudIconButton OnClick='() => MoveUp("7")' Icon="@Icons.TwoTone.KeyboardArrowUp"></MudIconButton>
                            <MudIconButton OnClick='() => MoveDown("7")' Icon="@Icons.TwoTone.KeyboardArrowDown"></MudIconButton>
                            <MudIconButton OnClick='() => App_TemperatureConverter = false' Icon="@Icons.Material.Filled.Close"></MudIconButton>
                            </div>
                        }    
                    </div>                  
                    <div style="display: flex;">
                        <div style="margin-left: 5%;">
                            <MudTextField @bind-Value="App_TemperatureConverter_Value1" ReadOnly="false" Variant="Variant.Outlined" Style="" ></MudTextField>
                            <MudSelect @bind-Value="TempValue1" Margin="Margin.Dense" T="string" Variant="Variant.Outlined">
                                <MudSelectItem Value="@("Fahrenheit")" />
                                <MudSelectItem Value="@("Celsius")" />
                                <MudSelectItem Value="@("Kelvin")" />
                            </MudSelect>    
                        </div>
                        <div style="margin-left: 5%;">
                            <MudTextField @bind-Value="App_TemperatureConverter_Value2" ReadOnly="true" Variant="Variant.Outlined" Style="" ></MudTextField>
                            <MudSelect @bind-Value="TempValue2" Margin="Margin.Dense" T="string" Variant="Variant.Outlined">
                                <MudSelectItem Value="@("Fahrenheit")" />
                                <MudSelectItem Value="@("Celsius")" />
                                <MudSelectItem Value="@("Kelvin")" />
                            </MudSelect>                
                        </div>
                    </div>
                    @if (LogTemp == true) {
                    <div class="converterLog" style="border-color: @widgetTextColor;">
                            @if (LogTemp == true) {
                            <MudTextField @bind-Value="tempLog" Class="converterLogText" ReadOnly="true" Variant="Variant.Text" Style="" DisableUnderLine="true" Lines="6" ></MudTextField>
                            }
                    </div>
                    }
                    @if (LogTemp == false) {
                    <div class="converterLog" style="border-color: @widgetColor;"></div>
                    }
                    <div>
                        <MudButton OnClick="ConvertTemp" Style="margin: 5%; margin-top: 0px; height: 20px;" Variant="Variant.Outlined" Color="MudBlazor.Color.Secondary" >Convert</MudButton>
                        @if (LogTemp == false) {
                        <MudButton OnClick="ToggleLogTemp" Style="margin-bottom: 5%; margin-top: 0px; height: 20px; width: 120px;" Variant="Variant.Outlined" Color="MudBlazor.Color.Secondary" >Show Log</MudButton>                    
                        }
                        @if (LogTemp == true) {
                        <MudButton OnClick="ToggleLogTemp" Style="margin-bottom: 5%; margin-top: 0px; height: 20px; width: 120px;" Variant="Variant.Outlined" Color="MudBlazor.Color.Secondary" >Hide Log</MudButton>                    
                        <MudButton OnClick="ClearLogTemp" Style="margin-bottom: 5%; margin-left: 5%; height: 20px;" Variant="Variant.Outlined" Color="MudBlazor.Color.Secondary" >Clear Log</MudButton>                    
                        }
                    </div>
                </div>
            }
    }
    @if (Utilities == true || home == true)
    {
            @if (App_GraphBuilder == true)
            {
                ReOrderWidgets();
                <div class="@graphBuilderClass" style="order: @widgetOrder[6]; background-color: @widgetColor;">
                    <div style="display: flex; justify-content: space-between;">
                        <MudText Color="@MudBlazor.Color.Secondary" Style="margin-top: 20px; margin-left: 20px; margin-right: 20px;">Graph Builder</MudText>
                            <div style="margin: 2px;">
                            @if (!isExpandedGraphBuilder)
                            {
                                <MudIconButton OnClick="ExpandGraphBuilder" Icon="@Icons.TwoTone.AddCircleOutline"></MudIconButton>
                            }
                            @if (isExpandedGraphBuilder)
                            {
                                <MudIconButton OnClick="ExpandGraphBuilder" Icon="@Icons.TwoTone.RemoveCircleOutline"></MudIconButton>
                            }
                            @if (home == true)
                            {
                                <MudIconButton OnClick='() => MoveUp("6")' Icon="@Icons.TwoTone.KeyboardArrowUp"></MudIconButton>
                                <MudIconButton OnClick='() => MoveDown("6")' Icon="@Icons.TwoTone.KeyboardArrowDown"></MudIconButton>
                                <MudIconButton OnClick='() => App_GraphBuilder = false' Icon="@Icons.Material.Filled.Close"></MudIconButton>
                            }  
                        </div>
                    </div>
                <div style="display: flex; justify-content: start;">
                    <div class="GraphArea">
                        <div class="GraphAreaTitle"><MudText Style="font-size: 20px;">@GraphTitle</MudText></div>
                        <div style="display: flex; justify-content: start;">                        
                            <div class="yAxisContainer">
                                <MudText Style="margin-left: 10px;">@GraphBuilderMax</MudText>
                                <MudText Style="margin-left: 10px; margin-top: 190px;">@GraphBuilderMin</MudText>
                            </div>
                            <div class="GraphContainer">
                                    @if (GraphNumberOfBars >= 1)
                                    {
                                        <div class="GraphBar">
                                            <div style="height: @barHeight[0]%; background-color: @graphcolor;" class="GraphBarInterior">
                                                @if (CheckBoxValues == true) {
                                                <MudText Style="padding-left: 25%;" Class="GraphBarValue">@GraphBar[0]</MudText>
                                                }                                                
                                            </div>
                                        </div>
                                    }
                                    @if (GraphNumberOfBars >= 2)
                                    {
                                        <div class="GraphBar">
                                            <div style="height: @barHeight[1]%; background-color: @graphcolor;" class="GraphBarInterior">
                                                @if (CheckBoxValues == true) {
                                                <MudText Style="padding-left: 25%;" Class="GraphBarValue">@GraphBar[1]</MudText>
                                                }                                             
                                            </div>
                                        </div>                                    
                                    }
                                    @if (GraphNumberOfBars >= 3)
                                    {
                                        <div class="GraphBar">
                                            <div style="height: @barHeight[2]%; background-color: @graphcolor;" class="GraphBarInterior">
                                                @if (CheckBoxValues == true) {
                                                <MudText Style="padding-left: 25%;" Class="GraphBarValue">@GraphBar[2]</MudText>
                                                }                                             
                                            </div>
                                        </div>                                    
                                    }
                                    @if (GraphNumberOfBars >= 4)
                                    {
                                        <div class="GraphBar">
                                            <div style="height: @barHeight[3]%; background-color: @graphcolor;" class="GraphBarInterior">
                                                @if (CheckBoxValues == true) {
                                                <MudText Style="padding-left: 25%;" Class="GraphBarValue">@GraphBar[3]</MudText>
                                                }                                             
                                            </div>
                                        </div>                                    
                                    }
                                    @if (GraphNumberOfBars >= 5)
                                    {
                                        <div class="GraphBar">
                                            <div style="height: @barHeight[4]%; background-color: @graphcolor;" class="GraphBarInterior">
                                                @if (CheckBoxValues == true) {
                                                <MudText Style="padding-left: 25%;" Class="GraphBarValue">@GraphBar[4]</MudText>
                                                }                                             
                                            </div>
                                        </div>                                    
                                    }
                                    @if (GraphNumberOfBars >= 6)
                                    {
                                        <div class="GraphBar">
                                            <div style="height: @barHeight[5]%; background-color: @graphcolor;" class="GraphBarInterior">
                                                @if (CheckBoxValues == true) {
                                                <MudText Style="padding-left: 25%;" Class="GraphBarValue">@GraphBar[5]</MudText>
                                                } 
                                            </div>
                                        </div>                                    
                                    }
                                </div>
                        </div>
                        <div class="xAxisContainer">
                                @if (CheckBoxLabels == true)
                                {
                                    @if (GraphNumberOfBars >= 1)
                                    {
                                        <MudText Class="GraphBarLabel">@GraphBarLabel[0]</MudText>
                                    }
                                    @if (GraphNumberOfBars >= 2)
                                    {
                                        <MudText Class="GraphBarLabel">@GraphBarLabel[1]</MudText>
                                    }
                                    @if (GraphNumberOfBars >= 3)
                                    {
                                        <MudText Class="GraphBarLabel">@GraphBarLabel[2]</MudText>
                                    }
                                    @if (GraphNumberOfBars >= 4)
                                    {
                                        <MudText Class="GraphBarLabel">@GraphBarLabel[3]</MudText>
                                    }
                                    @if (GraphNumberOfBars >= 5)
                                    {
                                        <MudText Class="GraphBarLabel">@GraphBarLabel[4]</MudText>
                                    }
                                    @if (GraphNumberOfBars >= 6)
                                    {
                                        <MudText Class="GraphBarLabel">@GraphBarLabel[5]</MudText>
                                    }
                                }
                        </div>
                    </div>
                    @if (isExpandedGraphBuilder)
                        {
                            @if (graphTabBars == true)
                            {
                            <div class="InputArea">
                                <MudButton OnClick="ChangeGraphTab" Style="" >Graph Label Input</MudButton> 
                                <div style="display: flex; justify-content: start;">
                                <MudButton OnClick="BuildGraph" Style="" >Build Graph</MudButton>
                                </div>
                                <div style="display: flex; justify-content: start;">
                                <MudNumericField Class="GraphInputBoxes" Margin="Margin.Dense" Style="margin-left: 6px; margin: 5px; width: 140px;" @bind-Value="GraphBuilderMax" Label="Max Value" Variant="Variant.Outlined"/>
                                <MudNumericField Class="GraphInputBoxes" Margin="Margin.Dense" Style="margin-left: 6px; margin: 5px; width: 140px;" @bind-Value="GraphNumberOfBars" Label="# of Bars" Variant="Variant.Outlined" Min="0" Max="6"/>
                                </div>
                                <div style="display: flex; justify-content: start;">
                                    @if (GraphNumberOfBars >= 1)
                                    {
                                    <MudNumericField Class="GraphInputBoxes" Margin="Margin.Dense" Style="margin-left: 6px; margin: 5px; width: 140px;" @bind-Value="GraphBar[0]" Label="@GraphBarLabel[0]" Variant="Variant.Outlined" Min="0"/>
                                    }
                                    @if (GraphNumberOfBars >= 2)
                                    {
                                    <MudNumericField Class="GraphInputBoxes" Margin="Margin.Dense" Style="margin-left: 6px; margin: 5px; width: 140px;" @bind-Value="GraphBar[1]" Label="@GraphBarLabel[1]" Variant="Variant.Outlined" Min="0"/>
                                    }
                                </div>
                                <div style="display: flex; justify-content: start;">
                                    @if (GraphNumberOfBars >= 3)
                                    {
                                    <MudNumericField Class="GraphInputBoxes" Margin="Margin.Dense" Style="margin-left: 6px; margin: 5px; width: 140px;" @bind-Value="GraphBar[2]" Label="@GraphBarLabel[2]" Variant="Variant.Outlined" Min="0"/>
                                    }
                                    @if (GraphNumberOfBars >= 4)
                                    {
                                    <MudNumericField Class="GraphInputBoxes" Margin="Margin.Dense" Style="margin-left: 6px; margin: 5px; width: 140px;" @bind-Value="GraphBar[3]" Label="@GraphBarLabel[3]" Variant="Variant.Outlined" Min="0"/>
                                    }
                                </div>
                                <div style="display: flex; justify-content: start;">
                                    @if (GraphNumberOfBars >= 5)
                                    {
                                    <MudNumericField Class="GraphInputBoxes" Margin="Margin.Dense" Style="margin-left: 6px; margin: 5px; width: 140px;" @bind-Value="GraphBar[4]" Label="@GraphBarLabel[4]" Variant="Variant.Outlined" Min="0"/>
                                    }
                                    @if (GraphNumberOfBars >= 6)
                                    {
                                    <MudNumericField Class="GraphInputBoxes" Margin="Margin.Dense" Style="margin-left: 6px; margin: 5px; width: 140px;" @bind-Value="GraphBar[5]" Label="@GraphBarLabel[5]" Variant="Variant.Outlined" Min="0"/>
                                    }
                                </div
                            </div>
                            }
                            @if (graphTabBars == false) {
                            <div class="InputArea">
                                <MudButton OnClick="ChangeGraphTab" Style="" >Graph Bar Input</MudButton> 
                                <div style="display: flex; justify-content: start;">
                                <MudButton OnClick="BuildGraph" Style="" >Build Graph</MudButton>
                                </div>
                                <MudTextField @bind-Value="GraphTitle" Margin="Margin.Dense" Style="margin-left: 8px; margin-right: 8px;" Label="Graph Title" Variant="Variant.Outlined"></MudTextField>                    
                                <div style="display: flex; justify-content: start;">
                                    <MudCheckBox @bind-Checked="@CheckBoxLabels" Label="Bar Labels"></MudCheckBox>
                                    <MudCheckBox @bind-Checked="@CheckBoxValues" Label="Bar Values"></MudCheckBox>
                                </div>
                                <div style="display: flex; justify-content: start;">
                                    @if (GraphNumberOfBars >= 1)
                                    {
                                    <MudTextField Class="GraphInputBoxes" Margin="Margin.Dense" Style="margin-left: 6px; margin: 5px; width: 140px;" @bind-Value="GraphBarLabel[0]" Label="" Variant="Variant.Outlined"/>
                                    }
                                    @if (GraphNumberOfBars >= 2)
                                    {
                                    <MudTextField Class="GraphInputBoxes" Margin="Margin.Dense" Style="margin-left: 6px; margin: 5px; width: 140px;" @bind-Value="GraphBarLabel[1]" Label="" Variant="Variant.Outlined"/>
                                    }
                                </div>
                                <div style="display: flex; justify-content: start;">
                                    @if (GraphNumberOfBars >= 3)
                                    {
                                    <MudTextField Class="GraphInputBoxes" Margin="Margin.Dense" Style="margin-left: 6px; margin: 5px; width: 140px;" @bind-Value="GraphBarLabel[2]" Label="" Variant="Variant.Outlined"/>
                                    }
                                    @if (GraphNumberOfBars >= 4)
                                    {
                                    <MudTextField Class="GraphInputBoxes" Margin="Margin.Dense" Style="margin-left: 6px; margin: 5px; width: 140px;" @bind-Value="GraphBarLabel[3]" Label="" Variant="Variant.Outlined"/>
                                    }
                                </div>
                                <div style="display: flex; justify-content: start;">
                                    @if (GraphNumberOfBars >= 5)
                                    {
                                    <MudTextField Class="GraphInputBoxes" Margin="Margin.Dense" Style="margin-left: 6px; margin: 5px; width: 140px;" @bind-Value="GraphBarLabel[4]" Label="" Variant="Variant.Outlined"/>
                                    }
                                    @if (GraphNumberOfBars >= 6)
                                    {
                                    <MudTextField Class="GraphInputBoxes" Margin="Margin.Dense" Style="margin-left: 6px; margin: 5px; width: 140px;" @bind-Value="GraphBarLabel[5]" Label="" Variant="Variant.Outlined"/>
                                    }
                                </div
                            </div>
                            }
                        }
                </div> 
                </div>
            }
            @if (App_Calendar == true)
            {
                ReOrderWidgets();
                <div class="MudPaperMediumWidget" style="order: @widgetOrder[5]; background-color: @widgetColor;">
                    <div style="display: flex; justify-content: space-between;">
                        <MudText Color="@MudBlazor.Color.Secondary" Style="margin-top: 20px; margin-left: 20px; margin-right: 20px;">Calendar</MudText>
                        @if (home == true)
                        {
                            <div style="margin: 1%;">
                            <MudIconButton OnClick='() => MoveUp("5")' Icon="@Icons.TwoTone.KeyboardArrowUp"></MudIconButton>
                            <MudIconButton OnClick='() => MoveDown("5")' Icon="@Icons.TwoTone.KeyboardArrowDown"></MudIconButton>
                            <MudIconButton OnClick='() => App_Calendar = false' Icon="@Icons.Material.Filled.Close"></MudIconButton>
                            </div>
                        }    
                    </div>
                @if (home == false) {
                <div style="width: 550px; height: 25px;"></div>
                }
                <div style="display: flex; justify-content: start;">
                    <div class="CalendarDiv">
                        <text style="color: @widgetTextColor;" class="CalenderDayDisplay">Today is @todayDate.</text>
                    </div>
                    <MudDatePicker ReadOnly="true" DisableToolbar="true" PickerVariant="PickerVariant.Static" Orientation="Orientation.Landscape" Date="@(DateTime.Today)" Class="Calendar"/>
                </div> 
                </div>
            }
            @if (App_Notes == true)
            {
                ReOrderWidgets();
                <div class="@notesClass" style="order: @widgetOrder[4]; background-color: @widgetColor;">
                    <div style="display: flex; justify-content: space-between;">
                        <MudText Color="@MudBlazor.Color.Secondary" Style="margin-top: 20px; margin-left: 20px; margin-right: 20px;">Notes</MudText>
                            <div style="margin: 2px;">
                            @if (!isExpandedNotes)
                            {
                                <MudIconButton OnClick="ExpandNotes" Icon="@Icons.TwoTone.AddCircleOutline"></MudIconButton>
                            }
                            @if (isExpandedNotes)
                            {
                                <MudIconButton OnClick="ExpandNotes" Icon="@Icons.TwoTone.RemoveCircleOutline"></MudIconButton>
                            }
                            @if (home == true)
                            {
                                <MudIconButton OnClick='() => MoveUp("4")' Icon="@Icons.TwoTone.KeyboardArrowUp"></MudIconButton>
                                <MudIconButton OnClick='() => MoveDown("4")' Icon="@Icons.TwoTone.KeyboardArrowDown"></MudIconButton>
                                <MudIconButton OnClick='() => App_Notes = false' Icon="@Icons.Material.Filled.Close"></MudIconButton>
                            
                            }   
                        </div>
                    </div>
                <div style="justify-content: start;">
                    <MudTextField @bind-Value="notesText" Style="margin: 4%;" Label="" DisableUnderLine="false" T="string" Lines="15" />
                </div> 
                </div>
            }
            @if (App_Timer == true)
            {
                ReOrderWidgets();
                <div class="MudPaperSmallWidget" style="order: @widgetOrder[3]; background-color: @widgetColor;">
                    <div style="display: flex; justify-content: space-between;">
                        <MudText Color="@MudBlazor.Color.Secondary" Style="margin-top: 5%; margin-left: 5%; margin-right: 5%;">Timer</MudText>
                        @if (home == true)
                        {
                            <div style="margin: 1%;">
                            <MudIconButton OnClick='() => MoveUp("3")' Icon="@Icons.TwoTone.KeyboardArrowUp"></MudIconButton>
                            <MudIconButton OnClick='() => MoveDown("3")' Icon="@Icons.TwoTone.KeyboardArrowDown"></MudIconButton>
                            <MudIconButton OnClick='() => App_Timer = false' Icon="@Icons.Material.Filled.Close"></MudIconButton>
                            </div>
                        }    
                    </div>
                    <div style="display: flex; justify-content: center;">
                        <MudText Color="@MudBlazor.Color.Secondary" Style="@($"font-family:{fontType}; font-size: 36px;")">@displaytimer_Timer</MudText>
                    </div>
                    <div style="display: flex; justify-content: center;">
                        <MudButton Variant="Variant.Outlined" Style="margin: 5%; height: 20px;" Color="MudBlazor.Color.Secondary" Disabled="@isTiming_Timer" OnClick="TimerTiming">Start</MudButton>
                        <MudButton Variant="Variant.Outlined" Style="margin: 5%; height: 20px;" Color="MudBlazor.Color.Secondary" Disabled="@isPaused_Timer" OnClick="TimerPause">Pause</MudButton>
                        <MudButton Variant="Variant.Outlined" Style="margin: 5%; height: 20px;" Color="MudBlazor.Color.Secondary" Disabled="@isReset_Timer" OnClick="TimerReset">Reset</MudButton>
                    </div>
                    <div style="display: flex; justify-content: center; margin: 20px;">
                        <MudNumericField Class="timerField" Style="margin: 10px;" @bind-Value="Hours" Label="Hours" Variant="Variant.Outlined" Min="0" Max="12"/>
                        <MudNumericField Class="timerField" Style="margin: 10px;" @bind-Value="Minutes" Label="Minutes" Variant="Variant.Outlined" Min="0" Max="60"/>
                        <MudNumericField Class="timerField" Style="margin: 10px;" @bind-Value="Seconds" Label="Seconds" Variant="Variant.Outlined" Min="0" Max="60"/>
                    </div>
                    <div>
                    <MudToggleIconButton Style="margin-left: 15px; margin-top: 17px;" @bind-Toggled="@SoundOn"
                     Icon="@Icons.Filled.VolumeOff" Title="Off"
                     ToggledIcon="@Icons.Filled.VolumeUp" ToggledTitle="On"/>
                    </div>
                </div>
            }   
            @if (App_Stopwatch == true)
            {
                ReOrderWidgets();
                <div class="MudPaperSmallWidget" style="order: @widgetOrder[2]; background-color: @widgetColor;">
                    <div style="display: flex; justify-content: space-between;">
                        <MudText Color="@MudBlazor.Color.Secondary" Style="margin-top: 5%; margin-left: 5%; margin-right: 5%;">Stopwatch</MudText>
                        @if (home == true)
                        {
                            <div style="margin: 1%;">
                            <MudIconButton OnClick='() => MoveUp("2")' Icon="@Icons.TwoTone.KeyboardArrowUp"></MudIconButton>
                            <MudIconButton OnClick='() => MoveDown("2")' Icon="@Icons.TwoTone.KeyboardArrowDown"></MudIconButton>
                            <MudIconButton OnClick='() => App_Stopwatch = false' Icon="@Icons.Material.Filled.Close"></MudIconButton>
                            </div>
                        }    
                    </div> 
                    <div style="display: flex; justify-content: center;">
                        <MudText Color="@MudBlazor.Color.Secondary" Style="@($"font-family:{fontType}; font-size: 36px;")">@displaytimer</MudText>
                    </div>
                    <div style="display: flex; justify-content: center;">
                        <MudButton Variant="Variant.Outlined" Style="margin: 5%; height: 20px;" Color="MudBlazor.Color.Secondary" Disabled="@isTiming" OnClick="StopwatchTiming">Start</MudButton>
                        <MudButton Variant="Variant.Outlined" Style="margin: 5%; height: 20px;" Color="MudBlazor.Color.Secondary" Disabled="@isStopped" OnClick="StopwatchStop">Stop</MudButton>
                    </div>
                    @if (LogStopwatch == true) {
                    <div class="stopwatchLog" style="border-color: @widgetTextColor;">
                            @if (LogStopwatch == true) {
                            <MudTextField @bind-Value="swLog" ReadOnly="true" Variant="Variant.Text" Style="" DisableUnderLine="true" Lines="6" ></MudTextField>
                            }
                    </div>
                    }
                    @if (LogStopwatch == false) {
                    <div class="stopwatchLog" style="border-color: @widgetColor;"></div>
                    }
                    @if (LogStopwatch == false) {
                        <MudButton OnClick="ToggleLogStopwatch" Style="margin-bottom: 5%; margin-left: 5%; margin-top: 0px; height: 20px; width: 120px;" Variant="Variant.Outlined" Color="MudBlazor.Color.Secondary" >Show Log</MudButton>                    
                        }
                        @if (LogStopwatch == true) {
                        <MudButton OnClick="ToggleLogStopwatch" Style="margin-bottom: 5%; margin-left: 5%; margin-top: 0px; height: 20px; width: 120px;" Variant="Variant.Outlined" Color="MudBlazor.Color.Secondary" >Hide Log</MudButton>                    
                        <MudButton OnClick="ClearLogStopwatch" Style="margin-bottom: 5%; margin-left: 5%; height: 20px;" Variant="Variant.Outlined" Color="MudBlazor.Color.Secondary" >Clear Log</MudButton>                    
                        }
                </div>
            }   
            @if (App_ColorPicker == true)
            {
                ReOrderWidgets();
                <div class="@colorPickerClass" style="order: @widgetOrder[1]; background-color: @widgetColor;">
                    <div style="display: flex; justify-content: space-between;">
                        <MudText Color="@MudBlazor.Color.Secondary" Style="margin-top: 20px; margin-left: 20px; margin-right: 20px;">Color Picker</MudText>
                        <div style="margin: 2px;">
                        @if (!isExpandedColorPicker)
                        {
                            <MudIconButton OnClick="ExpandColorPicker" Icon="@Icons.TwoTone.AddCircleOutline"></MudIconButton>
                        }
                        @if (isExpandedColorPicker)
                        {
                            <MudIconButton OnClick="ExpandColorPicker" Icon="@Icons.TwoTone.RemoveCircleOutline"></MudIconButton>
                        }
                        @if (home == true)
                        {
                            <MudIconButton OnClick='() => MoveUp("1")' Icon="@Icons.TwoTone.KeyboardArrowUp"></MudIconButton>
                            <MudIconButton OnClick='() => MoveDown("1")' Icon="@Icons.TwoTone.KeyboardArrowDown"></MudIconButton>
                            <MudIconButton OnClick='() => App_ColorPicker = false' Icon="@Icons.Material.Filled.Close"></MudIconButton>                            
                        }   
                        </div>
                    </div> 
                    <div style="display: flex; justify-content: start; margin-bottom: 10px;">
                    <MudColorPicker Value="_pickerColor" ValueChanged="UpdateSelectedColor" Class="ColorPicker" DisableToolbar="false" DisableAlpha="true" DisableColorField="false" DisablePreview="true" DisableSliders="false" DisableInputs="true" DisableModeSwitch="false" ColorPickerMode="ColorPickerMode.RGB" PickerVariant="PickerVariant.Static" />
                        <div style="margin-bottom: 10px;">
                        <MudList Clickable="true" SelectedItemChanged="ChangeSelectedColor">
                        <MudListItem Style="max-width: 205px" OnClick="firstColorTrue">
                            <div class="colorPreview" style="@($"background-color:{firstColor};")"></div>
                        </MudListItem>
                        <MudTextField @bind-Value="firstColorConverted" Style="margin-right: 7px; margin-bottom: 7px; max-width: 205px" Adornment="Adornment.End" AdornmentIcon="@Icons.Outlined.ChangeCircle" OnAdornmentClick="HEXColorEntered" ReadOnly="false" Variant="Variant.Outlined"/>
                        <MudListItem Style="max-width: 205px" OnClick="secondColorTrue">
                            <div class="colorPreview" style="@($"background-color:{secondColor};")"></div>
                        </MudListItem>
                        <MudTextField @bind-Value="secondColorConverted" Style="margin-right: 7px; max-width: 205px;" Adornment="Adornment.End" AdornmentIcon="@Icons.Outlined.ChangeCircle" OnAdornmentClick="HEXColorEntered" ReadOnly="false" Variant="Variant.Outlined"/>
                    </MudList>
                    </div>
                    @if (isExpandedColorPicker == true)
                    {
                    <div style="margin-bottom: 10px;">
                        <div style="max-width: 200px;">
                        <MudButton OnClick="SetBackgroundColor" Style="margin-top: 2px; max-width: 200px; max-height: 30px;">Set Background Color</MudButton>
                        <MudButton OnClick="SetAccentColor" Style="margin-top: 2px; max-width: 200px; max-height: 30px;">Set Accent Color</MudButton>
                        <MudButton OnClick="SetGraphColor" Style="margin-top: 2px; max-width: 200px; max-height: 30px;">Set Graph Color</MudButton>
                        </div>
                        <MudMenu @bind-Value="selectedTheme" Label="Select Theme" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft" Dense="true">
                            <MudMenuItem OnClick='() => SetTheme("Light")'>Light</MudMenuItem>
                            <MudMenuItem OnClick='() => SetTheme("Dark")'>Dark</MudMenuItem>
                            <MudMenuItem OnClick='() => SetTheme("High Contrast")'>High Contrast</MudMenuItem>
                            <MudMenuItem OnClick='() => SetTheme("Low Contrast")'>Low Contrast</MudMenuItem>
                            <MudMenuItem OnClick='() => SetTheme("Miami Vice")'>Miami Vice</MudMenuItem>
                            <MudMenuItem OnClick='() => SetTheme("Cyberpunk")'>Cyberpunk</MudMenuItem>
                        </MudMenu>
                    </div>
                    }
                    </div>
                </div>
            }
            @if (App_Calculator == true)
            {
                ReOrderWidgets();
                <div class="@calculatorClass" style="order: @widgetOrder[0]; background-color: @widgetColor;">
                    <div style="display: flex; justify-content: space-between;">
                        <MudText Color="@MudBlazor.Color.Secondary" Style="margin-top: 20px; margin-left: 20px; margin-right: 20px;">Calculator</MudText>
                        <div style="margin: 2px;">
                        @if (!isExpandedCalculator)
                        {
                            <MudIconButton OnClick="ExpandCalculator" Icon="@Icons.TwoTone.AddCircleOutline"></MudIconButton>
                        }
                        @if (isExpandedCalculator)
                        {
                            <MudIconButton OnClick="ExpandCalculator" Icon="@Icons.TwoTone.RemoveCircleOutline"></MudIconButton>
                        }
                        @if (home == true)
                        {
                            <MudIconButton OnClick='() => MoveUp("0")' Icon="@Icons.TwoTone.KeyboardArrowUp"></MudIconButton>
                            <MudIconButton OnClick='() => MoveDown("0")' Icon="@Icons.TwoTone.KeyboardArrowDown"></MudIconButton>
                            <MudIconButton OnClick='() => App_Calculator = false' Icon="@Icons.Material.Filled.Close"></MudIconButton>                            
                        }   
                        </div>
                    </div> 
                    <div style="display: flex; justify-content: start;">                        
                        <div>
                            <div style="display: flex;">
                            <MudTextField @bind-Value="App_Calculator_Display" AdornmentColor="@MudBlazor.Color.Secondary" ReadOnly="true" Variant="Variant.Outlined" Style="margin-left: 5px; margin-right: 5px; margin-bottom: 5px; max-width: 390px;" ></MudTextField>
                            </div>
                            <div style="margin-left: 15px; max-width: 390px;">
                                <MudButton OnClick="App_Calculator_Clear" Style="min-width: 90px; min-height: 50px;" Class="MudButtonCalculator"><MudText Color="MudBlazor.Color.Secondary" Style="font-size: 20px;">C</MudText></MudButton>
                                <MudButton OnClick="App_Calculator_ClearEntry" Style="min-width: 90px; min-height: 50px;" Class="MudButtonCalculator"><MudText Color="@MudBlazor.Color.Secondary" Style="font-size: 20px;" Class="Text">CE</MudText></MudButton>
                                <MudButton OnClick="Calc_Button_Backspace" Style="min-width: 90px; min-height: 50px;" Class="MudButtonCalculator"><MudText Color="@MudBlazor.Color.Secondary" Style="font-size: 20px;" Class="Text">←</MudText></MudButton>
                                <MudButton OnClick="Division" Style="min-width: 90px; min-height: 50px;" Class="MudButtonCalculator"><MudText Color="@MudBlazor.Color.Secondary" Style="font-size: 20px;" Class="Text">÷</MudText></MudButton>
                                <MudButton OnClick='() => Calc_Button_Number("7")' Style="min-width: 90px; min-height: 50px;" Class="MudButtonCalculator"><MudText Color="@MudBlazor.Color.Secondary" Style="font-size: 20px;" Class="Text">7</MudText></MudButton>
                                <MudButton OnClick='() => Calc_Button_Number("8")' Style="min-width: 90px; min-height: 50px;" Class="MudButtonCalculator"><MudText Color="@MudBlazor.Color.Secondary" Style="font-size: 20px;" Class="Text">8</MudText></MudButton>
                                <MudButton OnClick='() => Calc_Button_Number("9")' Style="min-width: 90px; min-height: 50px;" Class="MudButtonCalculator"><MudText Color="@MudBlazor.Color.Secondary" Style="font-size: 20px;" Class="Text">9</MudText></MudButton>
                                <MudButton OnClick="Multiplication" Style="min-width: 90px; min-height: 50px;" Class="MudButtonCalculator"><MudText Color="@MudBlazor.Color.Secondary" Style="font-size: 20px;" Class="Text">x</MudText></MudButton>
                                <MudButton OnClick='() => Calc_Button_Number("4")' Style="min-width: 90px; min-height: 50px;" Class="MudButtonCalculator"><MudText Color="@MudBlazor.Color.Secondary" Style="font-size: 20px;" Class="Text">4</MudText></MudButton>
                                <MudButton OnClick='() => Calc_Button_Number("5")' Style="min-width: 90px; min-height: 50px;" Class="MudButtonCalculator"><MudText Color="@MudBlazor.Color.Secondary" Style="font-size: 20px;" Class="Text">5</MudText></MudButton>
                                <MudButton OnClick='() => Calc_Button_Number("6")' Style="min-width: 90px; min-height: 50px;" Class="MudButtonCalculator"><MudText Color="@MudBlazor.Color.Secondary" Style="font-size: 20px;" Class="Text">6</MudText></MudButton>
                                <MudButton OnClick="Addition" Style="min-width: 90px; min-height: 50px;" Class="MudButtonCalculator"><MudText Color="@MudBlazor.Color.Secondary" Style="font-size: 20px;" Class="Text">+</MudText></MudButton>
                                <MudButton OnClick='() => Calc_Button_Number("1")' Style="min-width: 90px; min-height: 50px;" Class="MudButtonCalculator"><MudText Color="@MudBlazor.Color.Secondary" Style="font-size: 20px;" Class="Text">1</MudText></MudButton>
                                <MudButton OnClick='() => Calc_Button_Number("2")' Style="min-width: 90px; min-height: 50px;" Class="MudButtonCalculator"><MudText Color="@MudBlazor.Color.Secondary" Style="font-size: 20px;" Class="Text">2</MudText></MudButton>
                                <MudButton OnClick='() => Calc_Button_Number("3")' Style="min-width: 90px; min-height: 50px;" Class="MudButtonCalculator"><MudText Color="@MudBlazor.Color.Secondary" Style="font-size: 20px;" Class="Text">3</MudText></MudButton>
                                <MudButton OnClick="Subtraction" Style="min-width: 90px; min-height: 50px;" Class="MudButtonCalculator"><MudText Color="@MudBlazor.Color.Secondary" Style="font-size: 20px;" Class="Text">-</MudText></MudButton>
                                <MudButton OnClick="App_Calculator_PlusMinus" Style="min-width: 90px; min-height: 50px;" Class="MudButtonCalculator"><MudText Color="@MudBlazor.Color.Secondary" Style="font-size: 20px;" Class="Text">±</MudText></MudButton>
                                <MudButton OnClick='() => Calc_Button_Number("0")' Style="min-width: 90px; min-height: 50px;" Class="MudButtonCalculator"><MudText Color="@MudBlazor.Color.Secondary" Style="font-size: 20px;" Class="Text">0</MudText></MudButton>
                                <MudButton OnClick="App_Calculator_Decimal" Style="min-width: 90px; min-height: 50px;" Class="MudButtonCalculator"><MudText Color="@MudBlazor.Color.Secondary" Style="font-size: 20px;" Class="Text">.</MudText></MudButton>
                                <MudButton OnClick="Equals" Style="min-width: 90px; min-height: 50px;" Class="MudButtonCalculator"><MudText Color="@MudBlazor.Color.Secondary" Style="font-size: 20px;" Class="Text">=</MudText></MudButton>
                            </div>
                        </div>
                        @if (isExpandedCalculator)
                        {
                        <div class="calculatorExpanded">
                            <div class="calculatorLog" style="border-color: @widgetTextColor;">
                            <MudTextField @bind-Value="calcLog" Class="converterLogText" ReadOnly="true" Variant="Variant.Text" Style="" DisableUnderLine="true" Lines="12" ></MudTextField>
                            </div>
                            <MudButton OnClick="ClearLogCalc" Style="margin-bottom: 5%; margin-left: 5%; height: 20px;" Variant="Variant.Outlined" Color="MudBlazor.Color.Secondary" >Clear Log</MudButton>                    
                        </div>
                        }
                    </div>



@*                    <MudText Class="Text" Style="margin-top: 40px;" >App_Calculator_Value: @App_Calculator_Value</MudText>
                    <MudText Class="Text" >App_Calculator_Value2: @App_Calculator_Value2</MudText>
                    <MudText Class="Text" >App_Calculator_Display: @App_Calculator_Display</MudText>
                    <MudText Class="Text" >App_Calculator_FirstNumber: @App_Calculator_FirstNumber</MudText>
                    <MudText Class="Text" >App_Calculator_SecondNumber: @App_Calculator_SecondNumber</MudText>
                    <MudText Class="Text" >App_Calculator_Mode: @App_Calculator_Mode</MudText>
                    <MudText Class="Text" >negateTemp: @negateTemp</MudText>
                    <MudText Class="Text" >secondNumberLength: @App_Calculator_SecondNumber.Length</MudText>
                    <MudText Class="Text" >buttonValue: @buttonValue</MudText>*@
                </div>
            }
    }
    </div>
</div>
<MudDialog @bind-IsVisible="visible" Options="dialogOptions">
    <TitleContent>
        Select Widgets
    </TitleContent>
    <DialogContent>
        <MudText>Utilities</MudText>
        <MudCheckBox @bind-Checked="@App_Calculator" Label="Calculator"></MudCheckBox>
        <MudCheckBox @bind-Checked="@App_ColorPicker" Label="Color Picker"></MudCheckBox>
        <MudCheckBox @bind-Checked="@App_Stopwatch" Label="Stopwatch"></MudCheckBox>
        <MudCheckBox @bind-Checked="@App_Timer" Label="Timer"></MudCheckBox>
        <MudCheckBox @bind-Checked="@App_Notes" Label="Notes"></MudCheckBox>
        <MudCheckBox @bind-Checked="@App_Calendar" Label="Calendar"></MudCheckBox>
        <MudCheckBox @bind-Checked="@App_GraphBuilder" Label="Graph Builder"></MudCheckBox>
        <MudText>Converters</MudText>
        <MudCheckBox @bind-Checked="@App_TemperatureConverter" Label="Temperature Converter"></MudCheckBox>
        <MudCheckBox @bind-Checked="@App_VolumeConverter" Label="Volume Converter"></MudCheckBox>
        <MudCheckBox @bind-Checked="@App_LengthConverter" Label="Length Converter"></MudCheckBox>
        <MudCheckBox @bind-Checked="@App_MassConverter" Label="Mass Converter"></MudCheckBox>
    </DialogContent>
    <DialogActions>
        @if (App_Calculator == true && App_TemperatureConverter == true && App_ColorPicker == true && App_Stopwatch == true &&  App_Timer == true && App_VolumeConverter == true && App_Notes == true && App_LengthConverter == true && App_MassConverter == true && App_Calendar == true && App_GraphBuilder == true)
        {
        <MudButton Variant="Variant.Filled" OnClick="AllAppsFalse" Style="width:140px;">Deselect All</MudButton>
        }
        else {
        <MudButton Variant="Variant.Filled" OnClick="App_SelectAll" Style="width:140px;">Select All</MudButton>
        }
        <MudButton Variant="Variant.Filled" OnClick="Submit" Class="px-10">Close</MudButton>
    </DialogActions>
</MudDialog>
<MudMessageBox @ref="timerNotificationMSG" YesText="Ok">
    <MessageContent>
        <MudText Style="font-family:'Ubuntu', sans-serif; font-weight: bold; font-size: 20px;"> Timer Finished </MudText>
        @if (SoundOn)
        {
        <audio autoplay><source src="/Audio/TimerSound.mp3" /></audio>
        }
    </MessageContent>
</MudMessageBox>
@code {
    private bool visible;
    private void OpenDialog() => visible = true;
    void Submit() => visible = false;
    private DialogOptions dialogOptions = new() { FullWidth = true };
    string className = "MultipleWidgetsDiv";
    //Apps
    //Calculator
    private bool App_Calculator = false;
    private bool isExpandedCalculator = false;
    string calculatorClass = "MudPaperSmallWidget";
    string buttonValue = "0";
    double App_Calculator_Value = 0;
    double App_Calculator_Value2 = 0;
    double negateTemp = 0;
    string App_Calculator_Display = "0";
    string App_Calculator_FirstNumber = "0";
    string App_Calculator_SecondNumber = "0";
    string App_Calculator_Mode = "";
    string calcLog = "";
    string sign = "";
    string solution = "";
    int secondNumberLength = 0;
    private void Addition()
    {
        if (App_Calculator_Display.Contains('+') || App_Calculator_Display.Contains("- ") || App_Calculator_Display.Contains('*') || App_Calculator_Display.Contains('÷'))
        {
            Equals(); 
        }
        sign = " + ";
        App_Calculator_Mode = "Addition";
        App_Calculator_Value = Double.Parse(App_Calculator_FirstNumber);
        App_Calculator_Display = App_Calculator_Value + " + ";
    }
    private void Subtraction()
    {
        if (App_Calculator_Display.Contains('+') || App_Calculator_Display.Contains("- ") || App_Calculator_Display.Contains('*') || App_Calculator_Display.Contains('÷'))
        {
            Equals(); 
        }
        sign = " - ";
        App_Calculator_Mode = "Subtraction";
        App_Calculator_Value = Double.Parse(App_Calculator_FirstNumber);
        App_Calculator_Display = App_Calculator_Value + " - ";
    }
    private void Multiplication()
    {
        if (App_Calculator_Display.Contains('+') || App_Calculator_Display.Contains("- ") || App_Calculator_Display.Contains('*') || App_Calculator_Display.Contains('÷'))
        {
            Equals(); 
        }
        sign = " * ";
        App_Calculator_Mode = "Multiplication";
        App_Calculator_Value = Double.Parse(App_Calculator_FirstNumber);
        App_Calculator_Display = App_Calculator_Value + " * ";
    }
    private void Division()
    {
        if (App_Calculator_Display.Contains('+') || App_Calculator_Display.Contains("- ") || App_Calculator_Display.Contains('*') || App_Calculator_Display.Contains('÷'))
        {
            Equals(); 
        }
        sign = " ÷ ";
        App_Calculator_Mode = "Division";
        App_Calculator_Value = Double.Parse(App_Calculator_FirstNumber);
        App_Calculator_Display = App_Calculator_Value + " ÷ ";
    }
    private void Equals()
    {
        AddToLogCalc();
        if (App_Calculator_Mode == "Addition")
        {
            App_Calculator_Value = Double.Parse(App_Calculator_FirstNumber);
            App_Calculator_Value2 = Double.Parse(App_Calculator_SecondNumber);
            App_Calculator_Value = App_Calculator_Value + App_Calculator_Value2;
            App_Calculator_Display = App_Calculator_Value.ToString();
            App_Calculator_FirstNumber = App_Calculator_Value.ToString();
            App_Calculator_SecondNumber = "0";
        }
        if (App_Calculator_Mode == "Subtraction")
        {
            App_Calculator_Value = Double.Parse(App_Calculator_FirstNumber);
            App_Calculator_Value2 = Double.Parse(App_Calculator_SecondNumber);
            App_Calculator_Value = App_Calculator_Value - App_Calculator_Value2;
            App_Calculator_Display = App_Calculator_Value.ToString();
            App_Calculator_FirstNumber = App_Calculator_Value.ToString();
            App_Calculator_SecondNumber = "0";
        }
        if (App_Calculator_Mode == "Multiplication")
        {
            App_Calculator_Value = Double.Parse(App_Calculator_FirstNumber);
            App_Calculator_Value2 = Double.Parse(App_Calculator_SecondNumber);
            App_Calculator_Value = App_Calculator_Value * App_Calculator_Value2;
            App_Calculator_Display = App_Calculator_Value.ToString();
            App_Calculator_FirstNumber = App_Calculator_Value.ToString();
            App_Calculator_SecondNumber = "0";
        }
        if (App_Calculator_Mode == "Division")
        {
            App_Calculator_Value = Double.Parse(App_Calculator_FirstNumber);
            App_Calculator_Value2 = Double.Parse(App_Calculator_SecondNumber);
            App_Calculator_Value = App_Calculator_Value / App_Calculator_Value2;
            App_Calculator_Display = App_Calculator_Value.ToString();
            App_Calculator_FirstNumber = App_Calculator_Value.ToString();
            App_Calculator_SecondNumber = "0";
        }
        solution = App_Calculator_Display;
        AddToLogCalcSolution();
    }
    private void App_Calculator_Clear()
    {
        App_Calculator_SecondNumber = "0";
        App_Calculator_FirstNumber = "0";   
        App_Calculator_Display = "0";   
        App_Calculator_Mode = "";
        App_Calculator_Value = 0;
        App_Calculator_Value2 = 0;
        negateTemp = 0;
    }
    private void App_Calculator_ClearEntry()
    {
        if (App_Calculator_Display.Contains('+') || App_Calculator_Display.Contains("- ") || App_Calculator_Display.Contains('*') || App_Calculator_Display.Contains('÷'))
        {
            if (App_Calculator_SecondNumber != "0")
            {
                secondNumberLength = App_Calculator_SecondNumber.Length;
                App_Calculator_Display = App_Calculator_Display.Remove(App_Calculator_Display.Length - secondNumberLength);
                App_Calculator_SecondNumber = "0";
                App_Calculator_Value2 = 0;
            }
        }
        else 
        {
            App_Calculator_Display = "0";
            App_Calculator_FirstNumber = "0";
            App_Calculator_Value = 0;
        }
    }
    private void App_Calculator_Decimal()
    {
        if (App_Calculator_Display.Contains('+') || App_Calculator_Display.Contains("- ") || App_Calculator_Display.Contains('*') || App_Calculator_Display.Contains('÷'))
        {
            if (!App_Calculator_SecondNumber.Contains('.'))
            {
                App_Calculator_SecondNumber = App_Calculator_SecondNumber + ".";
                App_Calculator_Display = App_Calculator_Display + ".";
            }
        }
        else 
        {
            if (!App_Calculator_FirstNumber.Contains('.')) {
                App_Calculator_FirstNumber = App_Calculator_FirstNumber + ".";
                App_Calculator_Display = App_Calculator_Display + "."; 
            }
        }
    }
    private void App_Calculator_PlusMinus()
    {
        if (App_Calculator_Display.Contains('+') || App_Calculator_Display.Contains("- ") || App_Calculator_Display.Contains('*') || App_Calculator_Display.Contains('÷'))
        {
            secondNumberLength = App_Calculator_SecondNumber.Length;
            if (App_Calculator_SecondNumber.Contains('-') == false)
            {
                if (App_Calculator_SecondNumber == "0")
                {
                    App_Calculator_Display = App_Calculator_Display + "-";
                    App_Calculator_SecondNumber = "-0";
                }
                else if (App_Calculator_SecondNumber == "0.")
                {
                    App_Calculator_Display = App_Calculator_Display.Remove(App_Calculator_Display.Length - 1);
                    App_Calculator_Display = App_Calculator_Display + "-.";
                    App_Calculator_SecondNumber = "-0.";
                }
                else
                {
                    App_Calculator_Display = App_Calculator_Display.Remove(App_Calculator_Display.Length - secondNumberLength);
                    negateTemp = Double.Parse(App_Calculator_SecondNumber);
                    negateTemp = negateTemp * -1;
                    App_Calculator_SecondNumber = negateTemp.ToString();
                    App_Calculator_Display = App_Calculator_Display + App_Calculator_SecondNumber;
                }
            }
            else if (App_Calculator_SecondNumber.Contains('-') == true)
            {
                if (App_Calculator_SecondNumber == "-0")
                {
                    App_Calculator_Display = App_Calculator_Display.Remove(App_Calculator_Display.Length - 1);
                    App_Calculator_SecondNumber = "0";
                }
                else if (App_Calculator_SecondNumber.Contains("-0.") == true)
                {
                    App_Calculator_SecondNumber = App_Calculator_SecondNumber.Replace("-.", string.Empty);
                    App_Calculator_Display = App_Calculator_Display.Replace(" -.", " .");
                    App_Calculator_SecondNumber = "0.";
                }
                else
                {
                    App_Calculator_Display = App_Calculator_Display.Remove(App_Calculator_Display.Length - secondNumberLength);
                    App_Calculator_SecondNumber = App_Calculator_SecondNumber.Replace("-", string.Empty);
                    negateTemp = Double.Parse(App_Calculator_SecondNumber);
                    if (App_Calculator_SecondNumber == "")
                    {
                        App_Calculator_SecondNumber = "0";
                    }
                    App_Calculator_Display = App_Calculator_Display + App_Calculator_SecondNumber;
                }
            }
        }
        else
        {
            if (App_Calculator_FirstNumber.Contains('-') == false)
            {
                negateTemp = Double.Parse(App_Calculator_FirstNumber);
                negateTemp = negateTemp * -1;
                App_Calculator_FirstNumber = negateTemp.ToString();
                App_Calculator_Display = App_Calculator_FirstNumber;
                if (App_Calculator_Display == "-0")
                {
                    App_Calculator_Display = "-";
                }
            }
            else if (App_Calculator_FirstNumber.Contains('-') == true)
            {
                App_Calculator_FirstNumber = App_Calculator_FirstNumber.Replace("-", string.Empty);
                App_Calculator_Display = App_Calculator_FirstNumber;
                if (App_Calculator_FirstNumber == "")
                {
                    App_Calculator_FirstNumber = "0";
                    App_Calculator_Display = App_Calculator_FirstNumber;
                }
                negateTemp = 0;
            }
        }
    }
    private void Calc_Button_Backspace()
    {
        if (App_Calculator_Display.Contains('+') || App_Calculator_Display.Contains("- ") || App_Calculator_Display.Contains('*') || App_Calculator_Display.Contains('÷'))
        {
            if (App_Calculator_SecondNumber == "0")
            {
                App_Calculator_Display = App_Calculator_Display.Remove(App_Calculator_Display.Length - 2);
                App_Calculator_Mode = "";
            }
            if (App_Calculator_SecondNumber.Length > 1)
            {
                App_Calculator_SecondNumber = App_Calculator_SecondNumber.Remove(App_Calculator_SecondNumber.Length - 1);
                App_Calculator_Display = App_Calculator_Display.Remove(App_Calculator_Display.Length - 1);
                if (App_Calculator_SecondNumber == "")
                {
                    App_Calculator_SecondNumber = "0";
                }
            }
            else {
                App_Calculator_Display = App_Calculator_Display.Remove(App_Calculator_Display.Length - 1);
                App_Calculator_SecondNumber = "0";
            }
        }
        else
        {
            if (App_Calculator_Display.Length > 1 && App_Calculator_FirstNumber.Length > 1)
            {
                App_Calculator_FirstNumber = App_Calculator_FirstNumber.Remove(App_Calculator_FirstNumber.Length - 1);
                App_Calculator_Display = App_Calculator_Display.Remove(App_Calculator_Display.Length - 1);
            }
            else
            {
                App_Calculator_FirstNumber = "0";
                App_Calculator_Display = "0";
            }
        }
        App_Calculator_Value = 0;
        App_Calculator_Value2 = 0;
    }
    private void Calc_Button_Number(string buttonValue)
    {
        if (App_Calculator_Display.Contains('+') || App_Calculator_Display.Contains("- ") || App_Calculator_Display.Contains('*') || App_Calculator_Display.Contains('÷'))
        {
            if (App_Calculator_SecondNumber == "0")
            {
                App_Calculator_SecondNumber = "";
            }
            if (App_Calculator_SecondNumber == "-0")
            {
                App_Calculator_SecondNumber = buttonValue;
                App_Calculator_Display = App_Calculator_Display.Remove(App_Calculator_Display.Length - 1);
                App_Calculator_Display = App_Calculator_Display + App_Calculator_SecondNumber;
            }
            else
            {
                App_Calculator_Value2 = Double.Parse(buttonValue);
                App_Calculator_Display = App_Calculator_Display + App_Calculator_Value2.ToString();
                App_Calculator_SecondNumber = App_Calculator_SecondNumber + App_Calculator_Value2.ToString();
            }
        }
        else
        {
            if (App_Calculator_Display == "0")
            {
                App_Calculator_Value = Double.Parse(buttonValue);
                App_Calculator_Display = App_Calculator_Value.ToString();
                App_Calculator_FirstNumber = App_Calculator_Display;
            }
            else
            {
                App_Calculator_Value = Double.Parse(buttonValue);
                App_Calculator_Display = App_Calculator_Display + App_Calculator_Value.ToString();
                App_Calculator_FirstNumber = App_Calculator_Display;
            }
        }
    }
    private void ExpandCalculator()
    {
        if (isExpandedCalculator == false)
        {
            calculatorClass = "MudPaperSmallWidgetExpanded";
            isExpandedCalculator = true;
        }
        else if (isExpandedCalculator == true)
        {
            calculatorClass = "MudPaperSmallWidget";
            isExpandedCalculator = false;
        }
    }
    private void AddToLogCalc()
    {
        calcLog = calcLog + App_Calculator_FirstNumber + sign + App_Calculator_SecondNumber + " = " + "\n";
    }
    private void AddToLogCalcSolution()
    {
        calcLog = calcLog + solution + "\n" + "\n";
    }
    private void ClearLogCalc()
    {
        calcLog = "";
    }
    //Temperature Converter
    private bool App_TemperatureConverter = false;
    private bool LogTemp = false;
    double App_TemperatureConverter_Value1 = 0;
    double App_TemperatureConverter_Value2 = 0;
    private string TempValue1 { get; set; } = "Fahrenheit";
    private string TempValue2 { get; set; } = "Celsius";
    string tempLog = "";
    private void ConvertTemp()
    {
        if (TempValue1 == "Fahrenheit" && TempValue2 == "Fahrenheit")
        {
            App_TemperatureConverter_Value2 = App_TemperatureConverter_Value1;
        }
        if (TempValue1 == "Fahrenheit" && TempValue2 == "Celsius")
        {
            App_TemperatureConverter_Value2 = App_TemperatureConverter_Value1;
            App_TemperatureConverter_Value2 = App_TemperatureConverter_Value2 - 32;
            App_TemperatureConverter_Value2 = App_TemperatureConverter_Value2 * 5 / 9;
        }
        if (TempValue1 == "Fahrenheit" && TempValue2 == "Kelvin")
        {
            App_TemperatureConverter_Value2 = App_TemperatureConverter_Value1;
            App_TemperatureConverter_Value2 = App_TemperatureConverter_Value2 - 32;
            App_TemperatureConverter_Value2 = App_TemperatureConverter_Value2 * 5 / 9;
            App_TemperatureConverter_Value2 = App_TemperatureConverter_Value2 + 273.15;
        }
        if (TempValue1 == "Celsius" && TempValue2 == "Fahrenheit")
        {
            App_TemperatureConverter_Value2 = App_TemperatureConverter_Value1;
            App_TemperatureConverter_Value2 = App_TemperatureConverter_Value2 * 9 / 5;
            App_TemperatureConverter_Value2 = App_TemperatureConverter_Value2 + 32;
        }
        if (TempValue1 == "Celsius" && TempValue2 == "Celsius")
        {
            App_TemperatureConverter_Value2 = App_TemperatureConverter_Value1;
        }
        if (TempValue1 == "Celsius" && TempValue2 == "Kelvin")
        {
            App_TemperatureConverter_Value2 = App_TemperatureConverter_Value1;
            App_TemperatureConverter_Value2 = App_TemperatureConverter_Value2 + 273.15;
        }
        if (TempValue1 == "Kelvin" && TempValue2 == "Fahrenheit")
        {
            App_TemperatureConverter_Value2 = App_TemperatureConverter_Value1;
            App_TemperatureConverter_Value2 = App_TemperatureConverter_Value2 - 273.15;
            App_TemperatureConverter_Value2 = App_TemperatureConverter_Value2 * 9 / 5;
            App_TemperatureConverter_Value2 = App_TemperatureConverter_Value2 + 32;
        }
        if (TempValue1 == "Kelvin" && TempValue2 == "Celsius")
        {
            App_TemperatureConverter_Value2 = App_TemperatureConverter_Value1;
            App_TemperatureConverter_Value2 = App_TemperatureConverter_Value2 - 273.15;
        }
        if (TempValue1 == "Kelvin" && TempValue2 == "Kelvin")
        {
            App_TemperatureConverter_Value2 = App_TemperatureConverter_Value1;
        }
        AddToLogTemp();
    }
    private void AddToLogTemp()
    {
        tempLog = tempLog + App_TemperatureConverter_Value1 + " " + TempValue1 + " " + " = " + App_TemperatureConverter_Value2 + " " + TempValue2 + "\n";
    }
    private void ToggleLogTemp()
    {
        if (LogTemp == false)
        {
            LogTemp = true;
        }
        else if (LogTemp == true)
        {
            LogTemp = false;
        }
    }
    private void ClearLogTemp()
    {
        tempLog = "";
    }
    //Volume Converter
    private bool App_VolumeConverter = false;
    private bool LogVolume = false;
    double App_VolumeConverter_Value1 = 0;
    double App_VolumeConverter_Value2 = 0;
    private string VolumeValue1 { get; set; } = "US Gallon";
    private string VolumeValue2 { get; set; } = "US Quart";
    string volumeLog = "";
    private void ConvertVolume()
    {
        if (VolumeValue1 == "US Gallon" && VolumeValue2 == "US Gallon") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1;
        }
        if (VolumeValue1 == "US Gallon" && VolumeValue2 == "US Quart") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1 * 4;
        }
        if (VolumeValue1 == "US Gallon" && VolumeValue2 == "US Pint") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1 * 8;
        }
        if (VolumeValue1 == "US Gallon" && VolumeValue2 == "US Cup") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1 * 15.773;
        }
        if (VolumeValue1 == "US Gallon" && VolumeValue2 == "Liter") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1 * 3.785;
        }
        if (VolumeValue1 == "US Gallon" && VolumeValue2 == "Milliliter") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1 * 3785;
        }
        if (VolumeValue1 == "US Quart" && VolumeValue2 == "US Gallon") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1 / 4;
        }
        if (VolumeValue1 == "US Quart" && VolumeValue2 == "US Quart") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1;
        }
        if (VolumeValue1 == "US Quart" && VolumeValue2 == "US Pint") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1 * 2;
        }
        if (VolumeValue1 == "US Quart" && VolumeValue2 == "US Cup") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1 * 3.943;
        }
        if (VolumeValue1 == "US Quart" && VolumeValue2 == "Liter") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1 / 1.057;
        }
        if (VolumeValue1 == "US Quart" && VolumeValue2 == "Milliliter") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1 * 946.4;
        }
        if (VolumeValue1 == "US Pint" && VolumeValue2 == "US Gallon") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1 / 8;
        }
        if (VolumeValue1 == "US Pint" && VolumeValue2 == "US Quart") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1 / 2;
        }
        if (VolumeValue1 == "US Pint" && VolumeValue2 == "US Pint") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1;
        }
        if (VolumeValue1 == "US Pint" && VolumeValue2 == "US Cup") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1 * 1.972;
        }
        if (VolumeValue1 == "US Pint" && VolumeValue2 == "Liter") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1 / 2.113;
        }
        if (VolumeValue1 == "US Pint" && VolumeValue2 == "Milliliter") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1 * 473.2;
        }
        if (VolumeValue1 == "US Cup" && VolumeValue2 == "US Gallon") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1 / 15.772;
        }
        if (VolumeValue1 == "US Cup" && VolumeValue2 == "US Quart") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1 / 3.943;
        }
        if (VolumeValue1 == "US Cup" && VolumeValue2 == "US Pint") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1 / 1.972;
        }
        if (VolumeValue1 == "US Cup" && VolumeValue2 == "US Cup") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1;
        }
        if (VolumeValue1 == "US Cup" && VolumeValue2 == "Liter") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1 / 4.167;
        }
        if (VolumeValue1 == "US Cup" && VolumeValue2 == "Milliliter") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1 * 240;
        }
        if (VolumeValue1 == "Liter" && VolumeValue2 == "US Gallon") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1 / 3.785;
        }
        if (VolumeValue1 == "Liter" && VolumeValue2 == "US Quart") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1 * 1.057;
        }
        if (VolumeValue1 == "Liter" && VolumeValue2 == "US Pint") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1 * 2.113;
        }
        if (VolumeValue1 == "Liter" && VolumeValue2 == "US Cup") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1 * 4.167;
        }
        if (VolumeValue1 == "Liter" && VolumeValue2 == "Liter") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1;
        }
        if (VolumeValue1 == "Liter" && VolumeValue2 == "Milliliter") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1 * 1000;
        }
        if (VolumeValue1 == "Milliliter" && VolumeValue2 == "US Gallon") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1 / 3785;
        }
        if (VolumeValue1 == "Milliliter" && VolumeValue2 == "US Quart") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1 / 946.4;
        }
        if (VolumeValue1 == "Milliliter" && VolumeValue2 == "US Pint") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1 / 473.2;
        }
        if (VolumeValue1 == "Milliliter" && VolumeValue2 == "US Cup") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1 / 240;
        }
        if (VolumeValue1 == "Milliliter" && VolumeValue2 == "Liter") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1 / 1000;
        }
        if (VolumeValue1 == "Milliliter" && VolumeValue2 == "Milliliter") {
            App_VolumeConverter_Value2 = App_VolumeConverter_Value1;
        }
        AddToLogVolume();
    }
    private void AddToLogVolume()
    {
        volumeLog = volumeLog + App_VolumeConverter_Value1 + " " + VolumeValue1 + " " + " = " + App_VolumeConverter_Value2 + " " + VolumeValue2 + "\n";
    }
    private void ToggleLogVolume()
    {
        if (LogVolume == false)
        {
            LogVolume = true;
        }
        else if (LogVolume == true)
        {
            LogVolume = false;
        }
    }
    private void ClearLogVolume()
    {
        volumeLog = "";
    }
    //Stopwatch
    private bool App_Stopwatch = false;
    private bool isTiming = false;
    private bool isStopped = true;
    private bool LogStopwatch = false;
    string displaytimer = "00:00:00";
    int stopwatchStops = 0;
    string RecentTime = "";
    string swLog = "";
    TimeSpan TimeFromZero;
    async Task StopwatchTiming() { 
        displaytimer = "00:00:00";
        isStopped = false;
        TimeFromZero = new TimeSpan(0, 0, 0);  
        isTiming = true;
        while (isTiming) { 
            await Task.Delay(1000);
            if (isTiming)
            {
                TimeFromZero = TimeFromZero.Add(new TimeSpan(0, 0, 1));
                displaytimer = TimeFromZero.ToString();
                StateHasChanged();
            }
        }
    }
    void StopwatchStop()
    {
        RecentTime = TimeFromZero.ToString();
        AddToLogStopwatch();
        isTiming = false;
        isStopped = true;

        stopwatchStops++;
    }
    private void AddToLogStopwatch()
    {
        swLog = swLog + RecentTime + "\n";
    }
    private void ToggleLogStopwatch()
    {
        if (LogStopwatch == false)
        {
            LogStopwatch = true;
        }
        else if (LogStopwatch == true)
        {
            LogStopwatch = false;
        }
    }
    private void ClearLogStopwatch()
    {
        swLog = "";
    }
    //Color Picker
    private bool App_ColorPicker = false;
    private bool isFirstColor = true;
    private bool isExpandedColorPicker = false;
    private bool _isDarkMode = false;
    private MudTheme _theme = new();
    public MudColor textColor = "#ffffff";
    public MudColor backcolor = "#bdcad8";
    public MudColor accentcolor = "#111A28";
    public MudColor graphcolor = "#0476f6";
    public MudColor firstColor = "#0476f6";
    public MudColor secondColor = "#ed0c3d";
    public MudColor _pickerColor = "#0476f6";
    public MudColor widgetTextColor = "#000000";
    string firstColorConverted = "#0476f6";
    string colorValStr = "#######";
    string secondColorConverted = "#ed0c3d";
    string selectedTheme = "Default";
    string fontType = "Roboto";
    string widgetColor = "#ffffff";
    string colorPickerClass = "MudPaperMediumWidget";
    private void ChangeSelectedColor(MudListItem item)
    {
        if (isFirstColor == true)
        {
            _pickerColor = firstColor;
            UpdateSelectedColor(firstColor);
        }
        if (isFirstColor == false)
        {
            isFirstColor = false;
            _pickerColor = secondColor;
            UpdateSelectedColor(secondColor);
        }
    }
    public void UpdateSelectedColor(MudColor value)
    {
        _pickerColor = value;
        if (isFirstColor)
        {
            firstColor = value;
            firstColorConverted = firstColor.ToString(MudColorOutputFormats.Hex);
        }
        else
        {
            secondColor = value;
            secondColorConverted = secondColor.ToString(MudColorOutputFormats.Hex);
        }
    }
    private void firstColorTrue()
    {
        _pickerColor = firstColorConverted;
        isFirstColor = true;
    }
    private void secondColorTrue()
    {
        _pickerColor = secondColorConverted;
        isFirstColor = false;
    }
    private void HEXColorEntered()
    {
        firstColor = firstColorConverted;
        secondColor = secondColorConverted;
        if (isFirstColor == true){
            _pickerColor = firstColorConverted;
        }
        if (isFirstColor == false){
            _pickerColor = secondColorConverted;
        }
    }
    private void SetBackgroundColor()
    {
        backcolor = _pickerColor;
    }
    private void SetAccentColor()
    {
        accentcolor = _pickerColor;
        if (accentcolor.L > .45){
            textColor = "000000";
        }
        if (accentcolor.L < .45){
            textColor = "ffffff";
        }
    }
    private void SetGraphColor()
    {
        graphcolor = _pickerColor;
    }
    private void ExpandColorPicker()
    {
        if (isExpandedColorPicker == false)
        {
            colorPickerClass = "MudPaperMediumWidgetExpanded";
            isExpandedColorPicker = true;
        }
        else if (isExpandedColorPicker == true)
        {
            colorPickerClass = "MudPaperMediumWidget";
            isExpandedColorPicker = false;
        }
    }
    private void SetTheme(String _theme)
    {
        if (_theme == "Light")
        {
            selectedTheme = _theme;
            backcolor = "#bdcad8";
            accentcolor = "#121218";
            textColor = "ffffff";
            fontType = "Roboto";
            widgetColor = "#ffffff";
            widgetTextColor = "#000000";
            _isDarkMode = false;
        }  
        if (_theme == "Dark")
        {
            selectedTheme = _theme;
            backcolor = "#1E1E2D";
            accentcolor = "#121218";
            textColor = "ffffff";
            fontType = "Roboto";
            widgetColor = "#151521";
            widgetTextColor = "#ffffff";
            _isDarkMode = true;
        }  
        if (_theme == "High Contrast")
        {
            selectedTheme = _theme;
            backcolor = "#000000";
            accentcolor = "#000000";
            textColor = "ffffff";
            fontType = "Roboto";
            widgetColor = "#ffffff";
            widgetTextColor = "#000000";
            _isDarkMode = false;
        }  
        if (_theme == "Low Contrast")
        {
            selectedTheme = _theme;
            backcolor = "#eff3f3";
            accentcolor = "#e7eded";
            textColor = "000000";
            fontType = "Roboto";
            widgetColor = "#ffffff";
            widgetTextColor = "#000000";
            _isDarkMode = false;
        }  
        if (_theme == "Miami Vice")
        {
            selectedTheme = _theme;
            backcolor = "#9ef9f9";
            accentcolor = "#f7a1e9";
            textColor = "000000";
            fontType = "Broadway";
            widgetColor = "#ffffff";
            widgetTextColor = "#000000";
            _isDarkMode = false;
        }  
        if (_theme == "Cyberpunk")
        {
            selectedTheme = _theme;
            backcolor = "#120324";
            accentcolor = "#020d19";
            textColor = "ff0586";
            fontType = "Roboto";
            widgetColor = "#340939";
            widgetTextColor = "#ff0586";
            _isDarkMode = true;
        }  
    }
    //Notes
    private bool App_Notes = false;
    private bool isExpandedNotes = false;
    string notesText = "";
    string notesClass = "MudPaperSmallWidget";
    private void ExpandNotes()
    {
        if (isExpandedNotes == false)
        {
            notesClass = "MudPaperMediumWidget";
            isExpandedNotes = true;
        }
        else if (isExpandedNotes == true)
        {
            notesClass = "MudPaperSmallWidget";
            isExpandedNotes = false;
        }
    }
    //Length Converter
    private bool App_LengthConverter = false;
    private bool LogLength = false;
    double App_LengthConverter_Value1 = 0;
    double App_LengthConverter_Value2 = 0;
    private string LengthValue1 { get; set; } = "Foot";
    private string LengthValue2 { get; set; } = "Yard";
    string lengthLog = "";
    private void ConvertLength()
    {
        if (LengthValue1 == "Foot" && LengthValue2 == "Foot") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1;
        }
        if (LengthValue1 == "Foot" && LengthValue2 == "Yard") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 * 1/3;
        }
        if (LengthValue1 == "Foot" && LengthValue2 == "Mile") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 / 5280;
        }
        if (LengthValue1 == "Foot" && LengthValue2 == "Inch") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 * 12;
        }
        if (LengthValue1 == "Foot" && LengthValue2 == "Meter") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 / 3.281;
        }
        if (LengthValue1 == "Foot" && LengthValue2 == "Kilometer") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 / 3281;
        }
        if (LengthValue1 == "Yard" && LengthValue2 == "Foot") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 * 3;
        }
        if (LengthValue1 == "Yard" && LengthValue2 == "Yard") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1;
        }
        if (LengthValue1 == "Yard" && LengthValue2 == "Mile") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 / 1760;
        }
        if (LengthValue1 == "Yard" && LengthValue2 == "Inch") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 * 36;
        }
        if (LengthValue1 == "Yard" && LengthValue2 == "Meter") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 / 1.094;
        }
        if (LengthValue1 == "Yard" && LengthValue2 == "Kilometer") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 / 1094;
        }
        if (LengthValue1 == "Mile" && LengthValue2 == "Foot") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 * 5280;
        }
        if (LengthValue1 == "Mile" && LengthValue2 == "Yard") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 * 1760;
        }
        if (LengthValue1 == "Mile" && LengthValue2 == "Mile") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1;
        }
        if (LengthValue1 == "Mile" && LengthValue2 == "Inch") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 * 63360;
        }
        if (LengthValue1 == "Mile" && LengthValue2 == "Meter") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 * 1609;
        }
        if (LengthValue1 == "Mile" && LengthValue2 == "Kilometer") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 * 1.609;
        }
        if (LengthValue1 == "Inch" && LengthValue2 == "Foot") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 / 12;
        }
        if (LengthValue1 == "Inch" && LengthValue2 == "Yard") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 / 36;
        }
        if (LengthValue1 == "Inch" && LengthValue2 == "Mile") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 / 63360;
        }
        if (LengthValue1 == "Inch" && LengthValue2 == "Inch") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1;
        }
        if (LengthValue1 == "Inch" && LengthValue2 == "Meter") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 / 39.37;
        }
        if (LengthValue1 == "Inch" && LengthValue2 == "Kilometer") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 / 39370;
        }
        if (LengthValue1 == "Meter" && LengthValue2 == "Foot") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 * 3.281;
        }
        if (LengthValue1 == "Meter" && LengthValue2 == "Yard") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 * 1.094;
        }
        if (LengthValue1 == "Meter" && LengthValue2 == "Mile") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 / 1609;
        }
        if (LengthValue1 == "Meter" && LengthValue2 == "Inch") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 * 39.37;
        }
        if (LengthValue1 == "Meter" && LengthValue2 == "Meter") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1;
        }
        if (LengthValue1 == "Meter" && LengthValue2 == "Kilometer") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 / 1000;
        }
        if (LengthValue1 == "Kilometer" && LengthValue2 == "Foot") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 * 3281;
        }
        if (LengthValue1 == "Kilometer" && LengthValue2 == "Yard") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 * 1094;
        }
        if (LengthValue1 == "Kilometer" && LengthValue2 == "Mile") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 / 1.609;
        }
        if (LengthValue1 == "Kilometer" && LengthValue2 == "Inch") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 * 39370;
        }
        if (LengthValue1 == "Kilometer" && LengthValue2 == "Meter") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1 * 1000;
        }
        if (LengthValue1 == "Kilometer" && LengthValue2 == "Kilometer") {
            App_LengthConverter_Value2 = App_LengthConverter_Value1;
        }
        AddToLogLength();
    }
    private void AddToLogLength()
    {
        lengthLog = lengthLog + App_LengthConverter_Value1 + " " + LengthValue1 + " " + " = " + App_LengthConverter_Value2 + " " + LengthValue2 + "\n";
    }
    private void ToggleLogLength()
    {
        if (LogLength == false)
        {
            LogLength = true;
        }
        else if (LogLength == true)
        {
            LogLength = false;
        }
    }
    private void ClearLogLength()
    {
        lengthLog = "";
    }
    //Mass Converter
    private bool App_MassConverter = false;
    private bool LogMass = false;
    double App_MassConverter_Value1 = 0;
    double App_MassConverter_Value2 = 0;
    private string MassValue1 { get; set; } = "Pound";
    private string MassValue2 { get; set; } = "Kilogram";
    string massLog = "";
    private void ConvertMass()
    {
        if (MassValue1 == "Pound" && MassValue2 == "Pound") {
            App_MassConverter_Value2 = App_MassConverter_Value1;
        }
        if (MassValue1 == "Pound" && MassValue2 == "Ounce") {
            App_MassConverter_Value2 = App_MassConverter_Value1 * 16;
        }
        if (MassValue1 == "Pound" && MassValue2 == "Kilogram") {
            App_MassConverter_Value2 = App_MassConverter_Value1 / 2.205;
        }
        if (MassValue1 == "Pound" && MassValue2 == "Gram") {
            App_MassConverter_Value2 = App_MassConverter_Value1 * 453.6;
        }
        if (MassValue1 == "Pound" && MassValue2 == "US Ton") {
            App_MassConverter_Value2 = App_MassConverter_Value1 / 2000;
        }
        if (MassValue1 == "Pound" && MassValue2 == "Metric Ton") {
            App_MassConverter_Value2 = App_MassConverter_Value1 / 2205;
        }
        if (MassValue1 == "Ounce" && MassValue2 == "Pound") {
            App_MassConverter_Value2 = App_MassConverter_Value1 / 16;
        }
        if (MassValue1 == "Ounce" && MassValue2 == "Ounce") {
            App_MassConverter_Value2 = App_MassConverter_Value1;
        }
        if (MassValue1 == "Ounce" && MassValue2 == "Kilogram") {
            App_MassConverter_Value2 = App_MassConverter_Value1 / 35.274;
        }
        if (MassValue1 == "Ounce" && MassValue2 == "Gram") {
            App_MassConverter_Value2 = App_MassConverter_Value1 * 28.35;
        }
        if (MassValue1 == "Ounce" && MassValue2 == "US Ton") {
            App_MassConverter_Value2 = App_MassConverter_Value1 / 32000;
        }
        if (MassValue1 == "Ounce" && MassValue2 == "Metric Ton") {
            App_MassConverter_Value2 = App_MassConverter_Value1 / 35270;
        }
        if (MassValue1 == "Kilogram" && MassValue2 == "Pound") {
            App_MassConverter_Value2 = App_MassConverter_Value1 * 2.205;
        }
        if (MassValue1 == "Kilogram" && MassValue2 == "Ounce") {
            App_MassConverter_Value2 = App_MassConverter_Value1 * 35.274;
        }
        if (MassValue1 == "Kilogram" && MassValue2 == "Kilogram") {
            App_MassConverter_Value2 = App_MassConverter_Value1;
        }
        if (MassValue1 == "Kilogram" && MassValue2 == "Gram") {
            App_MassConverter_Value2 = App_MassConverter_Value1 * 1000;
        }
        if (MassValue1 == "Kilogram" && MassValue2 == "US Ton") {
            App_MassConverter_Value2 = App_MassConverter_Value1 / 907.2;
        }
        if (MassValue1 == "Kilogram" && MassValue2 == "Metric Ton") {
            App_MassConverter_Value2 = App_MassConverter_Value1 / 1000;
        }
        if (MassValue1 == "Gram" && MassValue2 == "Pound") {
            App_MassConverter_Value2 = App_MassConverter_Value1 / 453.6;
        }
        if (MassValue1 == "Gram" && MassValue2 == "Ounce") {
            App_MassConverter_Value2 = App_MassConverter_Value1 / 28.35;
        }
        if (MassValue1 == "Gram" && MassValue2 == "Kilogram") {
            App_MassConverter_Value2 = App_MassConverter_Value1 / 63360;
        }
        if (MassValue1 == "Gram" && MassValue2 == "Gram") {
            App_MassConverter_Value2 = App_MassConverter_Value1;
        }
        if (MassValue1 == "Gram" && MassValue2 == "US Ton") {
            App_MassConverter_Value2 = App_MassConverter_Value1 / 907200;
        }
        if (MassValue1 == "Gram" && MassValue2 == "Metric Ton") {
            App_MassConverter_Value2 = App_MassConverter_Value1 / 0.000001;
        }
        if (MassValue1 == "US Ton" && MassValue2 == "Pound") {
            App_MassConverter_Value2 = App_MassConverter_Value1 * 2000;
        }
        if (MassValue1 == "US Ton" && MassValue2 == "Ounce") {
            App_MassConverter_Value2 = App_MassConverter_Value1 * 32000;
        }
        if (MassValue1 == "US Ton" && MassValue2 == "Kilogram") {
            App_MassConverter_Value2 = App_MassConverter_Value1 * 907.2;
        }
        if (MassValue1 == "US Ton" && MassValue2 == "Gram") {
            App_MassConverter_Value2 = App_MassConverter_Value1 * 907200;
        }
        if (MassValue1 == "US Ton" && MassValue2 == "US Ton") {
            App_MassConverter_Value2 = App_MassConverter_Value1;
        }
        if (MassValue1 == "US Ton" && MassValue2 == "Metric Ton") {
            App_MassConverter_Value2 = App_MassConverter_Value1 / 1.102;
        }
        if (MassValue1 == "Metric Ton" && MassValue2 == "Pound") {
            App_MassConverter_Value2 = App_MassConverter_Value1 * 2205;
        }
        if (MassValue1 == "Metric Ton" && MassValue2 == "Ounce") {
            App_MassConverter_Value2 = App_MassConverter_Value1 * 35270;
        }
        if (MassValue1 == "Metric Ton" && MassValue2 == "Kilogram") {
            App_MassConverter_Value2 = App_MassConverter_Value1 * 1000;
        }
        if (MassValue1 == "Metric Ton" && MassValue2 == "Gram") {
            App_MassConverter_Value2 = App_MassConverter_Value1 * 0.000001;
        }
        if (MassValue1 == "Metric Ton" && MassValue2 == "US Ton") {
            App_MassConverter_Value2 = App_MassConverter_Value1 * 1.102;
        }
        if (MassValue1 == "Metric Ton" && MassValue2 == "Metric Ton") {
            App_MassConverter_Value2 = App_MassConverter_Value1;
        }
        AddToLogMass();
    }
    private void AddToLogMass()
    {
        massLog = massLog + App_MassConverter_Value1 + " " + MassValue1 + " " + " = " + App_MassConverter_Value2 + " " + MassValue2 + "\n";
    }
    private void ToggleLogMass()
    {
        if (LogMass == false)
        {
            LogMass = true;
        }
        else if (LogMass == true)
        {
            LogMass = false;
        }
    }
    private void ClearLogMass()
    {
        massLog = "";
    }
    //Timer
    private bool App_Timer = false;
    private bool isTiming_Timer = false;
    private bool isReset_Timer = true;
    private bool isPaused_Timer = true;
    private bool isTimer_Done = false;
    private bool _pause = false;
    private bool SoundOn = false;
    string displaytimer_Timer = "00:00:00";
    TimeSpan TimeFromZero_Timer;
    private int Seconds { get; set; }
    private int Minutes { get; set; }
    private int Hours { get; set; }
    async Task TimerTiming() { 
        isTimer_Done = false; //Set timer to not be done
        isTiming_Timer = true;
        isPaused_Timer = false;
        isReset_Timer = false;
        if(!_pause) TimeFromZero_Timer = new TimeSpan(Hours, Minutes, Seconds+1); //if not paused create new timer
        else //resume timer where it left off
        {
            _pause = false;
            TimeFromZero_Timer = TimeFromZero_Timer.Duration(); //create new timer with previous timer's duration b/c timespan has no resume functionality
        }   
        while (TimeFromZero_Timer > new TimeSpan()) //progress timer until 0
        {
            if (!_pause) //if not paused progress timer
            {
                await Task.Delay(1000);
                TimeFromZero_Timer = TimeFromZero_Timer.Subtract(new TimeSpan(0,0,1)); //Remove one second while timing is running
                displaytimer_Timer = TimeFromZero_Timer.ToString();
                StateHasChanged();
            }
            else{ //stop timing when paused
                break;
            }
        }
        isTiming_Timer = false;
        if (displaytimer_Timer == "00:00:00")
        {
            TimerReset();
            timerNotification();
        }
        StateHasChanged();
    }
    void TimerReset()
    {
        displaytimer_Timer = "00:00:00";
        Seconds = 0;
        Minutes = 0;
        Hours = 0;
        _pause = false;
        isTiming_Timer = false;
        isPaused_Timer = true;
        isReset_Timer = true;
        TimeFromZero_Timer = (new TimeSpan(Hours,Minutes,Seconds));
        TimeFromZero_Timer = TimeFromZero_Timer.Add(new TimeSpan(0,0,1));
    }
    void TimerPause()
    {
        TimeFromZero_Timer = TimeFromZero_Timer.Add(new TimeSpan(0,0,1));
        _pause = true;
        isTiming_Timer = false;
        isPaused_Timer = true;
    }
    MudMessageBox timerNotificationMSG { get; set; } //Call timer notification
    private async void timerNotification()
    {
        bool? result = await timerNotificationMSG.Show();
    }
    //Calendar
    private bool App_Calendar = false;
    string todayDate = DateTime.Now.ToShortDateString();
    //Graph Builder
    private bool App_GraphBuilder = false;
    private bool isExpandedGraphBuilder = false;
    private bool graphTabBars = true;
    string graphBuilderClass = "MudPaperMediumWidget";
    private double GraphBuilderMin = 0;
    private double GraphBuilderMax = 100;
    string GraphTitle = "Title";
    private int GraphNumberOfBars = 2;
    double[] GraphBar = {0, 0, 0, 0, 0, 0};
    double[] barHeight = {0, 0, 0, 0, 0, 0};
    string[] GraphBarLabel = { "Bar 1", "Bar 2", "Bar 3", "Bar 4", "Bar 5", "Bar 6" };
    public bool CheckBoxLabels { get; set; } = false;
    public bool CheckBoxValues { get; set; } = false;
    private void ExpandGraphBuilder()
    {
        if (isExpandedGraphBuilder == false)
        {
            graphBuilderClass = "MudPaperMediumWidgetExpanded";
            isExpandedGraphBuilder = true;
        }
        else if (isExpandedGraphBuilder == true)
        {
            graphBuilderClass = "MudPaperMediumWidget";
            isExpandedGraphBuilder = false;
        }
    }
    private void BuildGraph()
    {
        for (int i = 0; i < 6; i++) {
            barHeight[i] = GraphBar[i] / GraphBuilderMax;
            barHeight[i] = barHeight[i] * 100;
        }
    }
    private void ChangeGraphTab()
    {
        if (graphTabBars == false)
        {
            graphTabBars = true;
        }
        else if (graphTabBars == true)
        {
            graphTabBars = false;
        }
    }
}